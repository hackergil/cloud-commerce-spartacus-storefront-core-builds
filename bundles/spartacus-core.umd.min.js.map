{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@spartacus/core/src/state/utils/loader/loader.action.ts","ng://@spartacus/core/src/cart/store/cart-state.ts","ng://@spartacus/core/src/cart/store/actions/cart.action.ts","ng://@spartacus/core/src/cart/store/actions/cart-entry.action.ts","ng://@spartacus/core/src/state/utils/loader/loader.selectors.ts","ng://@spartacus/core/src/cart/store/selectors/cart.selector.ts","ng://@spartacus/core/src/config/server-config/server-config.ts","ng://@spartacus/core/src/config/utils/deep-merge.ts","ng://@spartacus/core/src/config/server-config/server-config-validator.ts","ng://@spartacus/core/src/config/utils/config-validator.ts","ng://@spartacus/core/src/config/config.module.ts","ng://@spartacus/core/src/occ/occ-models/occ.models.ts","ng://@spartacus/core/src/routing/store/actions/router.action.ts","ng://@spartacus/core/src/routing/state.ts","ng://@spartacus/core/src/routing/store/reducers/router.reducer.ts","ng://@spartacus/core/src/routing/store/effects/router.effect.ts","ng://@spartacus/core/src/routing/store/effects/index.ts","ng://@spartacus/core/src/routing/configurable-routes/config/configurable-routes-config.ts","ng://@spartacus/core/src/routing/configurable-routes/routes-config-loader.ts","ng://@spartacus/core/src/routing/configurable-routes/configurable-routes.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url-parsing.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/path-utils.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/route-recognizer.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url-translation.service.ts","ng://@spartacus/core/src/window/window-ref.ts","ng://@spartacus/core/src/routing/facade/routing.service.ts","ng://@spartacus/core/src/routing/configurable-routes/config/default-storefront-routes-translations.ts","ng://@spartacus/core/src/routing/configurable-routes/config/default-configurable-routes-config.ts","ng://@spartacus/core/src/routing/configurable-routes/configurable-routes.module.ts","ng://@spartacus/core/src/routing/routing.module.ts","ng://@spartacus/core/src/occ/config/occ-config.ts","ng://@spartacus/core/src/auth/config/auth-config.ts","ng://@spartacus/core/src/auth/config/default-auth-config.ts","ng://@spartacus/core/src/auth/store/auth-state.ts","ng://@spartacus/core/src/auth/store/actions/client-token.action.ts","ng://@spartacus/core/src/auth/store/actions/login-logout.action.ts","ng://@spartacus/core/src/auth/store/actions/user-token.action.ts","ng://@spartacus/core/src/auth/store/selectors/feature.selector.ts","ng://@spartacus/core/src/auth/store/selectors/client-token.selectors.ts","ng://@spartacus/core/src/auth/store/selectors/user-token.selectors.ts","ng://@spartacus/core/src/auth/facade/auth.service.ts","ng://@spartacus/core/src/auth/services/client-error/client-error-handling.service.ts","ng://@spartacus/core/src/auth/services/user-error/user-error-handling.service.ts","ng://@spartacus/core/src/occ/utils/interceptor-util.ts","ng://@spartacus/core/src/auth/http-interceptors/auth-error.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/client-token.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/user-token.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/index.ts","ng://@spartacus/core/src/auth/services/client-authentication/client-authentication-token.service.ts","ng://@spartacus/core/src/auth/services/user-authentication/user-authentication-token.service.ts","ng://@spartacus/core/src/auth/services/index.ts","ng://@spartacus/core/src/state/utils/loader/loader.reducer.ts","ng://@spartacus/core/src/auth/store/reducers/user-token.reducer.ts","ng://@spartacus/core/src/auth/store/reducers/index.ts","ng://@spartacus/core/src/auth/store/effects/user-token.effect.ts","ng://@spartacus/core/src/auth/store/effects/client-token.effect.ts","ng://@spartacus/core/src/auth/store/effects/index.ts","ng://@spartacus/core/src/state/config/state-config.ts","ng://@spartacus/core/src/state/reducers/store-sync.reducer.ts","ng://@spartacus/core/src/state/meta-reducer.ts","ng://@spartacus/core/src/state/utils/get-state-slice.ts","ng://@spartacus/core/src/state/reducers/transfer-state.reducer.ts","ng://@spartacus/core/src/state/reducers/index.ts","ng://@spartacus/core/src/state/config/default-state-config.ts","ng://@spartacus/core/src/state/state.module.ts","ng://@spartacus/core/src/auth/store/auth-store.module.ts","ng://@spartacus/core/src/auth/auth.module.ts","ng://@spartacus/core/src/auth/guards/auth.guard.ts","ng://@spartacus/core/src/auth/guards/not-auth.guard.ts","ng://@spartacus/core/src/cart/facade/cart-data.service.ts","ng://@spartacus/core/src/cart/facade/cart.service.ts","ng://@spartacus/core/src/cart/facade/index.ts","ng://@spartacus/core/src/cart/occ/custom.encoder.ts","ng://@spartacus/core/src/cart/occ/cart.service.ts","ng://@spartacus/core/src/occ/config/default-occ-config.ts","ng://@spartacus/core/src/occ/occ.module.ts","ng://@spartacus/core/src/cart/occ/cart-occ.module.ts","ng://@spartacus/core/src/cart/store/reducers/cart.reducer.ts","ng://@spartacus/core/src/cart/store/reducers/index.ts","ng://@spartacus/core/src/product/occ/product.service.ts","ng://@spartacus/core/src/product/occ/product-search.service.ts","ng://@spartacus/core/src/product/occ/product-occ.module.ts","ng://@spartacus/core/src/product/store/product-state.ts","ng://@spartacus/core/src/occ/miscs/miscs.service.ts","ng://@spartacus/core/src/product/store/converters/product-image-converter.service.ts","ng://@spartacus/core/src/product/store/converters/product-reference-converter.service.ts","ng://@spartacus/core/src/product/store/converters/product-converter.module.ts","ng://@spartacus/core/src/product/store/actions/product-search.action.ts","ng://@spartacus/core/src/state/utils/entity/entity.action.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.action.ts","ng://@spartacus/core/src/product/store/actions/product.action.ts","ng://@spartacus/core/src/product/store/actions/product-reviews.action.ts","ng://@spartacus/core/src/product/store/selectors/feature.selector.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.selectors.ts","ng://@spartacus/core/src/product/store/selectors/product.selectors.ts","ng://@spartacus/core/src/product/store/reducers/product-search.reducer.ts","ng://@spartacus/core/src/product/store/selectors/product-search.selectors.ts","ng://@spartacus/core/src/product/store/selectors/product-reviews.selectors.ts","ng://@spartacus/core/src/product/store/reducers/product-reviews.reducer.ts","ng://@spartacus/core/src/site-context/store/actions/languages.action.ts","ng://@spartacus/core/src/site-context/store/reducers/languages.reducer.ts","ng://@spartacus/core/src/site-context/store/actions/currencies.action.ts","ng://@spartacus/core/src/site-context/store/reducers/currencies.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/index.ts","ng://@spartacus/core/src/site-context/occ/occ-site.service.ts","ng://@spartacus/core/src/site-context/store/effects/languages.effect.ts","ng://@spartacus/core/src/site-context/store/effects/currencies.effect.ts","ng://@spartacus/core/src/site-context/store/effects/index.ts","ng://@spartacus/core/src/site-context/store/state.ts","ng://@spartacus/core/src/site-context/store/selectors/site-context.selector.ts","ng://@spartacus/core/src/site-context/store/selectors/languages.selectors.ts","ng://@spartacus/core/src/site-context/store/selectors/currencies.selectors.ts","ng://@spartacus/core/src/site-context/facade/language.service.ts","ng://@spartacus/core/src/site-context/facade/currency.service.ts","ng://@spartacus/core/src/site-context/occ/site-context-occ.module.ts","ng://@spartacus/core/src/site-context/store/site-context-store.module.ts","ng://@spartacus/core/src/state/utils/entity/entity.reducer.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.reducer.ts","ng://@spartacus/core/src/site-context/providers/context-service-map.ts","ng://@spartacus/core/src/site-context/config/default-site-context-config.ts","ng://@spartacus/core/src/site-context/config/site-context-config.ts","ng://@spartacus/core/src/site-context/providers/context-service-providers.ts","ng://@spartacus/core/src/site-context/facade/site-context-params.service.ts","ng://@spartacus/core/src/site-context/services/site-context-url-serializer.ts","ng://@spartacus/core/src/site-context/services/site-context-routes-handler.ts","ng://@spartacus/core/src/site-context/providers/site-context-params-providers.ts","ng://@spartacus/core/src/site-context/occ/site-context.interceptor.ts","ng://@spartacus/core/src/site-context/occ/index.ts","ng://@spartacus/core/src/site-context/site-context.module.ts","ng://@spartacus/core/src/product/store/reducers/index.ts","ng://@spartacus/core/src/product/store/effects/product-search.effect.ts","ng://@spartacus/core/src/product/store/effects/product.effect.ts","ng://@spartacus/core/src/product/store/effects/product-reviews.effect.ts","ng://@spartacus/core/src/product/store/effects/index.ts","ng://@spartacus/core/src/product/facade/product.service.ts","ng://@spartacus/core/src/product/facade/product-search.service.ts","ng://@spartacus/core/src/product/facade/product-review.service.ts","ng://@spartacus/core/src/product/store/product-store.module.ts","ng://@spartacus/core/src/cms/store/actions/page.action.ts","ng://@spartacus/core/src/cms/store/reducers/page.reducer.ts","ng://@spartacus/core/src/cms/store/cms-state.ts","ng://@spartacus/core/src/cms/store/actions/navigation-entry-item.action.ts","ng://@spartacus/core/src/cms/store/reducers/navigation-entry-item.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/index.ts","ng://@spartacus/core/src/cms/store/actions/component.action.ts","ng://@spartacus/core/src/cms/config/cms-config.ts","ng://@spartacus/core/src/cms/occ/occ-cms.service.ts","ng://@spartacus/core/src/cms/services/default-page.service.ts","ng://@spartacus/core/src/routing/models/page-context.model.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/translate-url.pipe.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url-translation.module.ts","ng://@spartacus/core/src/cms/store/effects/page.effect.ts","ng://@spartacus/core/src/cms/store/effects/component.effect.ts","ng://@spartacus/core/src/cms/store/effects/navigation-entry-item.effect.ts","ng://@spartacus/core/src/cms/store/effects/index.ts","ng://@spartacus/core/src/cms/store/selectors/feature.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/page.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/component.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/navigation-entry-item.selectors.ts","ng://@spartacus/core/src/cms/facade/cms.service.ts","ng://@spartacus/core/src/cms/page/page-title.resolver.ts","ng://@spartacus/core/src/cms/facade/page-title.service.ts","ng://@spartacus/core/src/cms/services/component-mapper.service.ts","ng://@spartacus/core/src/cms/occ/cms-occ.module.ts","ng://@spartacus/core/src/cms/store/cms-store.module.ts","ng://@spartacus/core/src/cms/page/content-page-title.resolver.ts","ng://@spartacus/core/src/cms/page/page.module.ts","ng://@spartacus/core/src/cms/cms.module.ts","ng://@spartacus/core/src/product/services/product-page-title.resolver.ts","ng://@spartacus/core/src/product/services/search-page-title.resolver.ts","ng://@spartacus/core/src/product/services/category-page-title.resolver.ts","ng://@spartacus/core/src/product/product.module.ts","ng://@spartacus/core/src/cart/store/effects/cart.effect.ts","ng://@spartacus/core/src/cart/store/effects/cart-entry.effect.ts","ng://@spartacus/core/src/cart/store/effects/index.ts","ng://@spartacus/core/src/cart/store/cart-store.module.ts","ng://@spartacus/core/src/cart/cart.module.ts","ng://@spartacus/core/src/config/server-config/server-config-from-meta-tag-factory.ts","ng://@spartacus/core/src/checkout/store/checkout-state.ts","ng://@spartacus/core/src/checkout/store/actions/checkout.action.ts","ng://@spartacus/core/src/checkout/store/actions/card-types.action.ts","ng://@spartacus/core/src/checkout/store/actions/address-verification.action.ts","ng://@spartacus/core/src/checkout/store/actions/index.ts","ng://@spartacus/core/src/checkout/store/reducers/checkout.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/address-verification.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/card-types.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/index.ts","ng://@spartacus/core/src/checkout/store/selectors/checkout.selectors.ts","ng://@spartacus/core/src/checkout/store/selectors/card-types.selectors.ts","ng://@spartacus/core/src/checkout/store/selectors/address-verification.selectors.ts","ng://@spartacus/core/src/global-message/store/global-message-state.ts","ng://@spartacus/core/src/global-message/store/actions/global-message.actions.ts","ng://@spartacus/core/src/global-message/store/selectors/feature.selector.ts","ng://@spartacus/core/src/global-message/store/selectors/global-message.selectors.ts","ng://@spartacus/core/src/global-message/store/reducers/global-message.reducer.ts","ng://@spartacus/core/src/global-message/store/reducers/index.ts","ng://@spartacus/core/src/global-message/store/global-message-store.module.ts","ng://@spartacus/core/src/global-message/facade/global-message.service.ts","ng://@spartacus/core/src/global-message/models/global-message.model.ts","ng://@spartacus/core/src/global-message/http-interceptors/http-error.interceptor.ts","ng://@spartacus/core/src/global-message/http-interceptors/index.ts","ng://@spartacus/core/src/global-message/global-message.module.ts","ng://@spartacus/core/src/user/occ/user.service.ts","ng://@spartacus/core/src/user/occ/order.service.ts","ng://@spartacus/core/src/user/occ/user-occ.module.ts","ng://@spartacus/core/src/user/store/actions/user-details.action.ts","ng://@spartacus/core/src/user/store/user-state.ts","ng://@spartacus/core/src/user/store/actions/user-addresses.action.ts","ng://@spartacus/core/src/user/store/actions/payment-methods.action.ts","ng://@spartacus/core/src/user/store/actions/user-register.action.ts","ng://@spartacus/core/src/user/store/actions/user-orders.action.ts","ng://@spartacus/core/src/user/store/actions/titles.action.ts","ng://@spartacus/core/src/user/store/actions/delivery-countries.action.ts","ng://@spartacus/core/src/user/store/actions/regions.action.ts","ng://@spartacus/core/src/user/store/actions/order-details.action.ts","ng://@spartacus/core/src/user/store/actions/billing-countries.action.ts","ng://@spartacus/core/src/user/store/actions/index.ts","ng://@spartacus/core/src/user/store/effects/user-details.effect.ts","ng://@spartacus/core/src/user/store/effects/user-addresses.effect.ts","ng://@spartacus/core/src/user/store/effects/payment-methods.effect.ts","ng://@spartacus/core/src/user/store/effects/user-register.effect.ts","ng://@spartacus/core/src/user/store/effects/user-orders.effect.ts","ng://@spartacus/core/src/user/store/effects/titles.effect.ts","ng://@spartacus/core/src/user/store/effects/delivery-countries.effect.ts","ng://@spartacus/core/src/user/store/effects/regions.effect.ts","ng://@spartacus/core/src/user/store/effects/order-details.effect.ts","ng://@spartacus/core/src/user/store/effects/billing-countries.effect.ts","ng://@spartacus/core/src/user/store/effects/index.ts","ng://@spartacus/core/src/user/store/reducers/billing-countries.reducer.ts","ng://@spartacus/core/src/user/store/reducers/delivery-countries.reducer.ts","ng://@spartacus/core/src/user/store/reducers/order-details.reducer.ts","ng://@spartacus/core/src/user/store/reducers/payment-methods.reducer.ts","ng://@spartacus/core/src/user/store/reducers/regions.reducer.ts","ng://@spartacus/core/src/user/store/reducers/titles.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-addresses.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-details.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-orders.reducer.ts","ng://@spartacus/core/src/user/store/reducers/index.ts","ng://@spartacus/core/src/user/store/selectors/feature.selector.ts","ng://@spartacus/core/src/user/store/selectors/user-details.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-addresses.selectors.ts","ng://@spartacus/core/src/user/store/selectors/payment-methods.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-orders.selectors.ts","ng://@spartacus/core/src/user/store/selectors/titles.selectors.ts","ng://@spartacus/core/src/user/store/selectors/delivery-countries.selectors.ts","ng://@spartacus/core/src/user/store/selectors/regions.selectors.ts","ng://@spartacus/core/src/user/store/selectors/order-details.selectors.ts","ng://@spartacus/core/src/user/store/selectors/billing-countries.selectors.ts","ng://@spartacus/core/src/user/facade/user.service.ts","ng://@spartacus/core/src/user/store/user-store.module.ts","ng://@spartacus/core/src/user/user.module.ts","ng://@spartacus/core/src/checkout/store/effects/checkout.effect.ts","ng://@spartacus/core/src/checkout/store/effects/card-types.effect.ts","ng://@spartacus/core/src/checkout/store/effects/address-verification.effect.ts","ng://@spartacus/core/src/checkout/store/effects/index.ts","ng://@spartacus/core/src/checkout/facade/checkout.service.ts","ng://@spartacus/core/src/checkout/store/checkout-store.module.ts","ng://@spartacus/core/src/checkout/services/checkout-page-title.resolver.ts","ng://@spartacus/core/src/checkout/checkout.module.ts","ng://@spartacus/core/src/smart-edit/services/smart-edit.service.ts","ng://@spartacus/core/src/smart-edit/http-interceptors/cms-ticket.interceptor.ts","ng://@spartacus/core/src/smart-edit/http-interceptors/index.ts","ng://@spartacus/core/src/smart-edit/smart-edit.module.ts","ng://@spartacus/core/src/store-finder/occ/store-finder.service.ts","ng://@spartacus/core/src/store-finder/occ/store-finder-occ.module.ts","ng://@spartacus/core/src/store-finder/config/store-finder-config.ts","ng://@spartacus/core/src/store-finder/store/store-finder-state.ts","ng://@spartacus/core/src/store-finder/store/actions/find-stores.action.ts","ng://@spartacus/core/src/store-finder/store/actions/view-all-stores.action.ts","ng://@spartacus/core/src/store-finder/store/selectors/feature.selector.ts","ng://@spartacus/core/src/store-finder/store/selectors/find-stores.selectors.ts","ng://@spartacus/core/src/store-finder/store/selectors/view-all-stores.selectors.ts","ng://@spartacus/core/src/store-finder/service/external-js-file-loader.service.ts","ng://@spartacus/core/src/store-finder/facade/store-data.service.ts","ng://@spartacus/core/src/store-finder/service/google-map-renderer.service.ts","ng://@spartacus/core/src/store-finder/store/effects/find-stores.effect.ts","ng://@spartacus/core/src/store-finder/store/effects/view-all-stores.effect.ts","ng://@spartacus/core/src/store-finder/store/effects/index.ts","ng://@spartacus/core/src/store-finder/store/reducers/index.ts","ng://@spartacus/core/src/store-finder/facade/store-finder.service.ts","ng://@spartacus/core/src/store-finder/store/store-finder-store.module.ts","ng://@spartacus/core/src/store-finder/config/default-store-finder-config.ts","ng://@spartacus/core/src/store-finder/store-finder.module.ts","ng://@spartacus/core/src/cx-api/cx-api.module.ts","ng://@spartacus/core/src/cx-api/cx-api.service.ts","ng://@spartacus/core/src/util/pipe/strip-html/strip-html.pipe.ts","ng://@spartacus/core/src/util/pipe/strip-html/strip-html.module.ts","ng://@spartacus/core/src/util/pipe/pipe.module.ts","ng://@spartacus/core/src/util/util.module.ts","ng://@spartacus/core/src/state/utils/entity/entity.selectors.ts","ng://@spartacus/core/src/state/utils/loader/loader.helpers.ts","ng://@spartacus/core/src/cms/config/default-cms-config.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__values","o","m","__read","ar","error","__spread","concat","LOADER_LOAD_ACTION","LOADER_FAIL_ACTION","LOADER_SUCCESS_ACTION","LOADER_RESET_ACTION","loadMeta","entityType","loader","load","failMeta","successMeta","success","resetMeta","LoaderLoadAction","type","meta","LoaderFailAction","LoaderSuccessAction","LoaderResetAction","CART_FEATURE","CART_DATA","CREATE_CART","CREATE_CART_FAIL","CREATE_CART_SUCCESS","LOAD_CART","LOAD_CART_FAIL","LOAD_CART_SUCCESS","MERGE_CART","MERGE_CART_SUCCESS","CreateCart","_super","payload","_this","tslib_1.__extends","CreateCartFail","CreateCartSuccess","LoadCart","LoadCartFail","LoadCartSuccess","MergeCart","MergeCartSuccess","ADD_ENTRY","ADD_ENTRY_SUCCESS","ADD_ENTRY_FAIL","REMOVE_ENTRY","REMOVE_ENTRY_SUCCESS","REMOVE_ENTRY_FAIL","UPDATE_ENTRY","UPDATE_ENTRY_SUCCESS","UPDATE_ENTRY_FAIL","AddEntry","AddEntrySuccess","AddEntryFail","RemoveEntry","RemoveEntrySuccess","RemoveEntryFail","UpdateEntry","UpdateEntrySuccess","UpdateEntryFail","loaderValueSelector","state","loaderLoadingSelector","loading","loaderErrorSelector","loaderSuccessSelector","getCartContentSelector","content","getRefreshSelector","refresh","getEntriesSelector","entries","getCartMergeCompleteSelector","cartMergeComplete","getCartsState","createFeatureSelector","getActiveCartState","createSelector","cartsState","active","getCartState","getCartContent","getRefresh","getLoaded","getCartMergeComplete","getEntriesMap","getEntrySelectorFactory","productCode","getEntries","entities","keys","map","code","ServerConfig","defaultServerConfig","server","occPrefix","isObject","item","isArray","deepMerge","sources","_i","source","shift","_a","_b","serverConfigValidator","config","baseUrl","undefined","ConfigValidatorToken","InjectionToken","provideConfigValidator","configValidator","provide","useValue","multi","validateConfig","configValidators","configValidators_1","tslib_1.__values","configValidators_1_1","warning","validate","console","warn","Config","ConfigChunk","provideConfig","provideConfigFactory","configFactory","deps","useFactory","configurationFactory","configChunks","production","ConfigModule","withConfig","ngModule","providers","withConfigFactory","forRoot","useExisting","NgModule","args","imports","CommonModule","declarations","CONTENT_PAGE","PRODUCT_PAGE","CATEGORY_PAGE","CATALOG_PAGE","GO","GO_BY_URL","BACK","FORWARD","SAVE_REDIRECT_URL","CLEAR_REDIRECT_URL","Go","GoByUrl","Back","Forward","SaveRedirectUrl","ClearRedirectUrl","ROUTING_FEATURE","initialState","redirectUrl","navigationId","url","queryParams","params","context","id","cmsRequired","getReducers","router","reducer","action","fromActions.SAVE_REDIRECT_URL","fromActions.CLEAR_REDIRECT_URL","fromNgrxRouter.ROUTER_NAVIGATION","fromNgrxRouter.ROUTER_ERROR","fromNgrxRouter.ROUTER_CANCEL","currentUrl","routerState","contextId","event","reducerToken","reducerProvider","getRouterFeatureState","getRouterState","getRedirectUrl","CustomSerializer","serialize","root","firstChild","routeConfig","canActivate","find","x","guardName","PageType","data","pageLabel","path","RouterEffects","actions$","location","navigate$","pipe","ofType","RouterActions.GO","tap","query","extras","navigate","navigateBuUrl$","RouterActions.GO_BY_URL","navigateByUrl","navigateBack$","RouterActions.BACK","back","navigateForward$","RouterActions.FORWARD","forward","Injectable","Actions","Router","Location","tslib_1.__decorate","Effect","dispatch","Observable","effects","ConfigurableRoutesConfig","RoutesConfigLoader","http","serverConfig","configurableRoutesConfig","_routesConfig","routesConfig","fetch","endpoint","fetchedRoutesConfig","extendStaticWith","get","retry","toPromise","catch","Error","mergedRoutesConfig","extendLanguagesTranslationsWithDefault","defaultTranslations","translations","default","forEach","languageCode","languageTranslations","HttpClient","ConfigurableRoutesService","injector","routesConfigLoader","currentLanguageCode","initCalled","allRoutesTranslations","init","translateRouterConfig","translatedRoutes","translateRoutes","currentRoutesTranslations","moveWildcardRouteToEnd","resetConfig","routes","firstWildcardRoute","route","filter","getNestedRoutesTranslations","nestedRouteNames","routesTranslations","getNestedRoutesTranslationsRecursive","nestedRoutesNames","accResult","routeName","remainingRouteNames","slice","translation","getRouteTranslation","childrenTranslations","getChildrenRoutesTranslations","routeTranslation","children","translatedRouteAliases","translateRoute","translatedChildrenRoutes_1","translateChildrenRoutes","translatedRouteAlias","isConfigurable","getConfigurable","translateRoutePath","translateRouteRedirectTo","getTranslatedPaths","translatedPath","translatedPaths","redirectTo","paths","Injector","UrlParsingService","getPrimarySegments","urlTree","parseUrl","_getPrimarySegmentsFromUrlTree","tree","segments","childrenSegments","PRIMARY_OUTLET","isParam","segment","startsWith","getParamName","RouteRecognizerService","urlParser","recognizeByDefaultUrl","defaultRoutesTranslations","urlSegments","getNestedRoutesRecursive","remainingUrlSegments","routeNames","routeNamesLength","pathsLength","j","pathSegments","extractParamsIfPathMatchesUrlPrefix","name","pathSegmentsLength","pathSegment","urlSegment","UrlTranslationService","configurableRoutesService","routeRecognizer","ROOT_URL","translate","options","validateOptions","generateUrl","recognizedRoute","urlDefined","Boolean","routeDefined","validateOptionsUrl","validateOptionsRoute","nestedRoutes","nestedRoute","standarizedNestedRoutes","standarizeNestedRoutes","splitRoutesNamesAndParams","nestedRoutesParams","nestedRoutesTranslations","nestedRoutesPaths","findPathsWithFillableParams","provideParamsValues","routTranslation","paramsMapping","unshift","reduce","nestedRoutesParamsMappings","paramsObject","provideParamsValuesForSingleRoute","paramName","mappedParamName","getMappedParamName","findPartialPathWithFillableParams","getParams","every","WindowRef","document","window","nativeWindow","sessionStorage","localStorage","providedIn","Inject","DOCUMENT","RoutingService","store","winRef","urlTranslator","select","fromStore.getRouterState","go","pathOrTranslateUrlOptions","translateUrlOptions","goByUrl","fromStore.GoByUrl","referrer","indexOf","origin","fromStore.Back","fromStore.Forward","fromStore.getRedirectUrl","clearRedirectUrl","fromStore.ClearRedirectUrl","saveRedirectUrl","fromStore.SaveRedirectUrl","fromStore.Go","Store","defaultStorefrontRoutesTranslations","home","cart","search","login","register","resetPassword","forgotPassword","checkout","orderConfirmation","product","category","categoryCode","brand","storeFinder","searchResults","allStores","listStores","storeDescription","termsAndConditions","contact","help","sale","orders","orderDetails","orderCode","addressBook","paymentManagement","pageNotFound","en","defaultConfigurableRoutesConfig","initConfigurableRoutes","service","ConfigurableRoutesModule","exports","APP_INITIALIZER","RoutingModule","RouterModule","scrollPositionRestoration","anchorScrolling","StoreModule","forFeature","EffectsModule","StoreRouterConnectingModule","stateKey","RouterStateSerializer","useClass","OccConfig","AuthConfig","defaultAuthConfig","authentication","client_id","client_secret","AUTH_FEATURE","CLIENT_TOKEN_DATA","LOAD_CLIENT_TOKEN","LOAD_CLIENT_TOKEN_FAIL","LOAD_CLIENT_TOKEN_SUCCESS","LoadClientToken","LoadClientTokenFail","LoadClientTokenSuccess","LOGIN","LOGOUT","Login","Logout","LOAD_USER_TOKEN","LOAD_USER_TOKEN_FAIL","LOAD_USER_TOKEN_SUCCESS","REFRESH_USER_TOKEN","REFRESH_USER_TOKEN_FAIL","REFRESH_USER_TOKEN_SUCCESS","LoadUserToken","LoadUserTokenFail","LoadUserTokenSuccess","RefreshUserToken","RefreshUserTokenSuccess","RefreshUserTokenFail","getAuthState","getClientTokenState","clientToken","getUserTokenSelector","token","getUserTokenState","userToken","getUserToken","AuthService","authorize","userId","password","refreshUserToken","refreshToken","refresh_token","authorizeWithToken","logout","getClientToken","isClientTokenLoaded","refreshClientToken","ClientErrorHandlingService","authService","handleExpiredClientToken","request","take","switchMap","handle","createNewRequestWithNewToken","clone","setHeaders","Authorization","token_type","access_token","UserErrorHandlingService","routingService","handleExpiredUserToken","handleExpiredToken","handleExpiredRefreshToken","oldToken","USE_CLIENT_TOKEN","InterceptorUtil","createHeader","headerName","interceptorParam","headers","append","JSON","stringify","HttpHeaders","set","removeHeader","updatedHeaders","delete","getInterceptorParam","rawValue","parse","OAUTH_ENDPOINT","AuthErrorInterceptor","userErrorHandlingService","clientErrorHandlingService","intercept","isClientTokenRequest","catchError","errResponse","HttpErrorResponse","status","isExpiredToken","of","throwError","isRequestMapping","resp","errors","ClientTokenInterceptor","baseReqString","site","baseSite","UserTokenInterceptor","subscribe","interceptors","HTTP_INTERCEPTORS","ClientAuthenticationTokenService","loadClientAuthenticationToken","getOAuthEndpoint","HttpParams","encodeURIComponent","Content-Type","post","json","UserAuthenticationTokenService","loadToken","encodeURI","services","initialLoaderState","loaderReducer","loadActionType","entity","newValue","initialState$1","fromAction.LOAD_USER_TOKEN","fromAction.REFRESH_USER_TOKEN","fromAction.LOAD_USER_TOKEN_SUCCESS","fromAction.REFRESH_USER_TOKEN_SUCCESS","fromAction.LOAD_USER_TOKEN_FAIL","fromAction.REFRESH_USER_TOKEN_FAIL","fromUserTokenReducer.reducer","clearAuthState","metaReducers","UserTokenEffects","userTokenService","loadUserToken$","fromActions.LOAD_USER_TOKEN","mergeMap","date","Date","setSeconds","getSeconds","expires_in","expiration_time","fromActions.LoadUserTokenSuccess","fromActions.LoadUserTokenFail","refreshUserToken$","fromActions.REFRESH_USER_TOKEN","fromActions.RefreshUserTokenSuccess","fromActions.RefreshUserTokenFail","ClientTokenEffect","clientAuthenticationTokenService","loadClientToken$","fromActions.LOAD_CLIENT_TOKEN","exhaustMap","fromActions.LoadClientTokenSuccess","fromActions.LoadClientTokenFail","NO_STORAGE","LOCAL_STORAGE","SESSION_STORAGE","StateConfig","getStorageSyncReducer","storageSync","StorageSyncType","storage","storageConfig","rehydrate","localStorageSync","META_REDUCER","metaReducersFactory","getStateSlice","acc","keyValue","INIT_ACTION","CX_KEY","makeStateKey","getTransferStateReducer","platformId","transferState","ssrTransfer","isPlatformBrowser","getBrowserTransferStateReducer","hasKey","transferedState","isPlatformServer","getServerTransferStateReducer","newState","stateMetaReducers","Optional","PLATFORM_ID","TransferState","defaultStateConfig","StateModule","META_REDUCERS","ɵ0","authStoreConfigFactory","AuthStoreModule","HttpClientModule","AuthModule","AuthGuard","_route","GUARD_NAME","NotAuthGuard","ANONYMOUS_USERID","CartDataService","_userId","_getDetails","_cart","val","hasCart","guid","CartService","cartData","getActive","fromSelector.getCartContent","fromSelector.getEntries","fromSelector.getCartMergeComplete","fromSelector.getLoaded","callback","setUserId","loadOrMerge","getDetails","isCreated","fromAction.MergeCart","cartId","fromAction.LoadCart","fromSelector.getRefresh","details","loadDetails","addEntry","quantity","fromAction.AddEntry","fromAction.CreateCart","removeEntry","entry","fromAction.RemoveEntry","entryNumber","updateEntry","fromAction.UpdateEntry","qty","getEntry","fromSelector.getEntrySelectorFactory","isEmpty","totalItems","CustomEncoder","encodeKey","encodeValue","decodeKey","decodeURIComponent","decodeValue","BASIC_PARAMS","DETAILS_PARAMS","OccCartService","getCartEndpoint","cartEndpoint","loadAllCarts","fromString","loadCart","cartsData","carts","createCart","oldCartId","toMergeCartGuid","toAdd","queryString","pickupStore","patch","createAddressOnCart","address","setDeliveryAddress","addressId","put","setDeliveryMode","deliveryModeId","getDeliveryMode","getSupportedDeliveryModes","getPaymentProviderSubInfo","createSubWithPaymentProvider","postUrl","parameters","Accept","httpParams","encoder","responseType","createPaymentDetails","setPaymentDetails","paymentDetailsId","defaultOccConfig","language","currency","OccModule","CartOccModule","initialState$2","fromAction.MERGE_CART","fromAction.MERGE_CART_SUCCESS","fromAction.LOAD_CART_SUCCESS","fromAction.CREATE_CART_SUCCESS","entryMap","fromAction.REMOVE_ENTRY_SUCCESS","fromAction.UPDATE_ENTRY_SUCCESS","fromAction.ADD_ENTRY_SUCCESS","cartReducer","clearCartState","OccProductService","getProductEndpoint","loadProduct","loadProductReviews","maxCount","postProductReview","review","URLSearchParams","headline","comment","rating","toString","alias","DEFAULT_SEARCH_CONFIG","pageSize","OccProductSearchService","fullQuery","searchConfig","currentPage","sortCode","queryProductSuggestions","term","ProductOccModule","PRODUCT_FEATURE","PRODUCT_DETAIL_ENTITY","ENDPOINT_COUNTRIES","OccMiscsService","getEndpoint","loadDeliveryCountries","loadBillingCountries","loadTitles","loadCardTypes","loadRegions","countryIsoCode","buildRegionsUrl","ProductImageConverterService","convertList","list","list_1","list_1_1","convertProduct","images","populate","source_1","source_1_1","image","isList","imageType","imageContainer","galleryIndex","format","ProductReferenceConverterService","productReferences","references","reference","referenceType","ProductConverterModule","SEARCH_PRODUCTS","SEARCH_PRODUCTS_FAIL","SEARCH_PRODUCTS_SUCCESS","GET_PRODUCT_SUGGESTIONS","GET_PRODUCT_SUGGESTIONS_SUCCESS","GET_PRODUCT_SUGGESTIONS_FAIL","CLEAN_PRODUCT_SEARCH","SearchProducts","auxiliary","SearchProductsFail","SearchProductsSuccess","GetProductSuggestions","GetProductSuggestionsSuccess","GetProductSuggestionsFail","CleanProductSearchState","ENTITY_REMOVE_ACTION","ENTITY_REMOVE_ALL_ACTION","entityMeta","entityId","entityRemoveMeta","entityRemove","entityRemoveAllMeta","EntityRemoveAction","EntityRemoveAllAction","ENTITY_LOAD_ACTION","ENTITY_FAIL_ACTION","ENTITY_SUCCESS_ACTION","ENTITY_RESET_ACTION","entityLoadMeta","entityFailMeta","entitySuccessMeta","entityResetMeta","EntityLoadAction","EntityFailAction","EntitySuccessAction","EntityResetAction","LOAD_PRODUCT","LOAD_PRODUCT_FAIL","LOAD_PRODUCT_SUCCESS","LoadProduct","LoadProductFail","LoadProductSuccess","LOAD_PRODUCT_REVIEWS","LOAD_PRODUCT_REVIEWS_FAIL","LOAD_PRODUCT_REVIEWS_SUCCESS","POST_PRODUCT_REVIEW","POST_PRODUCT_REVIEW_FAIL","POST_PRODUCT_REVIEW_SUCCESS","LoadProductReviews","LoadProductReviewsFail","LoadProductReviewsSuccess","PostProductReview","PostProductReviewFail","PostProductReviewSuccess","getProductsState","entityStateSelector","getProductState","getSelectedProductStateFactory","getSelectedProductLoadingFactory","productState","getSelectedProductSuccessFactory","getSelectedProductErrorFactory","getAllProductCodes","results","suggestions","auxResults","initialState$3","fromProductsSearch.SEARCH_PRODUCTS_SUCCESS","res","fromProductsSearch.GET_PRODUCT_SUGGESTIONS_SUCCESS","fromProductsSearch.CLEAN_PRODUCT_SEARCH","getSearchResults","getAuxSearchResults","getProductSuggestions","getProductsSearchState","fromProductSearch.getSearchResults","fromProductSearch.getAuxSearchResults","fromProductSearch.getProductSuggestions","getProductReviewsState","reviews","getSelectedProductReviewsFactory","reviewData","initialState$4","fromProductReviews.LOAD_PRODUCT_REVIEWS_SUCCESS","LOAD_LANGUAGES","LOAD_LANGUAGES_FAIL","LOAD_LANGUAGES_SUCCESS","SET_ACTIVE_LANGUAGE","LANGUAGE_CHANGE","LoadLanguages","LoadLanguagesFail","LoadLanguagesSuccess","SetActiveLanguage","LanguageChange","activeLanguage","initialState$5","fromLanguages.LOAD_LANGUAGES_SUCCESS","langEntities","isocode","fromLanguages.SET_ACTIVE_LANGUAGE","LOAD_CURRENCIES","LOAD_CURRENCIES_FAIL","LOAD_CURRENCIES_SUCCESS","SET_ACTIVE_CURRENCY","CURRENCY_CHANGE","LoadCurrencies","LoadCurrenciesFail","LoadCurrenciesSuccess","SetActiveCurrency","CurrencyChange","activeCurrency","initialState$6","fromCurrencies.LOAD_CURRENCIES_SUCCESS","currEntities","fromCurrencies.SET_ACTIVE_CURRENCY","languages","fromLanguages.reducer","currencies","fromCurrencies.reducer","OccSiteService","getBaseEndPoint","loadLanguages","loadCurrencies","LanguagesEffects","occSiteService","loadLanguages$","actions.LOAD_LANGUAGES","actions.LoadLanguagesSuccess","actions.LoadLanguagesFail","activateLanguage$","actions.SET_ACTIVE_LANGUAGE","setItem","actions.LanguageChange","CurrenciesEffects","loadCurrencies$","actions.LOAD_CURRENCIES","actions.LoadCurrenciesSuccess","actions.LoadCurrenciesFail","activateCurrency$","actions.SET_ACTIVE_CURRENCY","actions.CurrencyChange","SITE_CONTEXT_FEATURE","getSiteContextState","getLanguagesState","getLanguagesEntities","getActiveLanguage","getAllLanguages","getCurrenciesState","getCurrenciesEntities","getActiveCurrency","getAllCurrencies","LanguageService","getAll","fromStore.getAllLanguages","fromStore.LoadLanguages","fromStore.getActiveLanguage","setActive","fromStore.SetActiveLanguage","initialize","defaultLanguage","getItem","CurrencyService","fromStore.getAllCurrencies","fromStore.LoadCurrencies","fromStore.getActiveCurrency","fromStore.SetActiveCurrency","defaultCurrency","SiteContextOccModule","siteContextStoreConfigFactory","SiteContextStoreModule","initialEntityState","entityReducer","ids","partitionPayload","removed_1","newEntities","cur","entityUpdates","subAction","entityLoaderReducer","ContextServiceMap","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","serviceMapFactory","contextServiceMapProvider","defaultSiteContextConfigFactory","siteContext","persistence","defaultValue","values","urlEncodingParameters","SiteContextConfig","inititializeContext","langService","currService","contextServiceProviders","SiteContextParamsService","serviceMap","getContextParameters","contextConfig","getParamValues","param","getParamDefaultValue","getSiteContextService","getValue","unsubscribe","setValue","SiteContextUrlSerializer","siteContextParams","hasContextInRoutes","urlWithParams","urlExtractContextParameters","parsed","urlTreeIncludeContextParameters","split","paramId","segmentId","join","urlTreeExtractContextParameters","urlIncludeContextParameters","DefaultUrlSerializer","SiteContextRoutesHandler","serializer","subscription","Subscription","contextValues","isNavigating","routingParams","subscribeChanges","subscribeRouting","add","serialized","serializeUrl","replaceState","events","NavigationStart","NavigationEnd","NavigationError","NavigationCancel","setContextParamsFromRoute","ngOnDestroy","initSiteContextRoutesHandler","siteContextRoutesHandler","siteContextParamsProviders","UrlSerializer","SiteContextInterceptor","languageService","currencyService","activeLang","activeCurr","setParams","lang","curr","SiteContextModule","fromProductsSearch.reducer","fromProductReviews.reducer","clearProductsState","ProductsSearchEffects","occProductSearchService","productImageConverter","searchProducts$","productsSearchActions.SEARCH_PRODUCTS","queryText","products","productsSearchActions.SearchProductsSuccess","productsSearchActions.SearchProductsFail","getProductSuggestions$","productsSearchActions.GET_PRODUCT_SUGGESTIONS","productsSearchActions.GetProductSuggestionsSuccess","productsSearchActions.GetProductSuggestionsFail","ProductEffects","occProductService","productReferenceConverterService","loadProduct$","actions.LOAD_PRODUCT","groupBy","group","actions.LoadProductSuccess","actions.LoadProductFail","converters.ProductImageConverterService","converters.ProductReferenceConverterService","ProductReviewsEffects","loadProductReviews$","productReviewsActions.LOAD_PRODUCT_REVIEWS","productReviewsActions.LoadProductReviewsSuccess","_error","productReviewsActions.LoadProductReviewsFail","message","productReviewsActions.POST_PRODUCT_REVIEW","reviewResponse","productReviewsActions.PostProductReviewSuccess","productReviewsActions.PostProductReviewFail","ProductService","forceReload","fromStore.getSelectedProductStateFactory","fromStore.LoadProduct","isLoading","fromStore.getSelectedProductLoadingFactory","isSuccess","fromStore.getSelectedProductSuccessFactory","hasError","fromStore.getSelectedProductErrorFactory","reload","ProductSearchService","createUrlTree","preserveFragment","fromStore.SearchProducts","fromStore.getSearchResults","clearSearchResults","fromStore.CleanProductSearchState","fromStore.getAuxSearchResults","getSearchSuggestions","fromStore.getProductSuggestions","searchAuxiliary","getSuggestions","fromStore.GetProductSuggestions","ProductReviewService","getByProductCode","selector","fromStore.getSelectedProductReviewsFactory","fromStore.LoadProductReviews","fromStore.PostProductReview","productStoreConfigFactory","ProductStoreModule","metaReducers$2","LOAD_PAGEDATA","LOAD_PAGEDATA_FAIL","LOAD_PAGEDATA_SUCCESS","REFRESH_LATEST_PAGE","UPDATE_LATEST_PAGE_KEY","CLEAN_PAGE_STATE","LoadPageData","LoadPageDataFail","LoadPageDataSuccess","RefreshLatestPage","UpdateLatestPageKey","CleanPageState","count","latestPageKey","initialState$7","fromPageData.UPDATE_LATEST_PAGE_KEY","pageKey","fromPageData.LOAD_PAGEDATA_SUCCESS","page","existPage","samePage","_d","slots","_e","position","components","seen","fromPageData.REFRESH_LATEST_PAGE","_c","fromPageData.CLEAN_PAGE_STATE","CMS_FEATURE","NAVIGATION_DETAIL_ENTITY","COMPONENT_ENTITY","LOAD_NAVIGATION_ITEMS","LOAD_NAVIGATION_ITEMS_FAIL","LOAD_NAVIGATION_ITEMS_SUCCESS","LoadNavigationItems","nodeId","LoadNavigationItemsFail","LoadNavigationItemsSuccess","initialState$8","fromNavigationItem.LOAD_NAVIGATION_ITEMS_SUCCESS","newItem","compItems","component","uid","fromPage.reducer","navigation","fromNavigation.reducer","clearCmsState","LOAD_COMPONENT","LOAD_COMPONENT_FAIL","LOAD_COMPONENT_SUCCESS","GET_COMPONENET_FROM_PAGE","LoadComponent","LoadComponentFail","LoadComponentSuccess","GetComponentFromPage","cmp","CmsConfig","OccCmsService","loadPageData","pageContext","fields","httpStringParams","loadComponent","getRequestParams","loadListComponents","idList","sort","requestParams","DefaultPageService","getDefaultPageIdsBytype","defaultPageIdForType","PageContext","TranslateUrlPipe","transform","Pipe","UrlTranslationModule","PageEffects","occCmsService","defaultPageService","loadPage$","pageActions.LOAD_PAGEDATA","pageActions.REFRESH_LATEST_PAGE","pageActions.LoadPageDataSuccess","getPageData","componentActions.GetComponentFromPage","getComponents","pageActions.LoadPageDataFail","loadTime","now","uuid","typeCode","title","catalogUuid","getCatalogUuid","pageId","template","contentSlots","contentSlot","slot","slotId","slotUuid","_f","getPageKey","cmsItem","properties","smartedit","catalogUuid_1","smartEditProp","catalogVersionUuid","classes","substr","pageData","ComponentEffects","loadComponent$","componentActions.LOAD_COMPONENT","componentActions.LoadComponentSuccess","componentActions.LoadComponentFail","NavigationEntryItemEffects","loadNavigationItems$","navigationItemActions.LOAD_NAVIGATION_ITEMS","getIdListByItemType","items","componentIds","navigationItemActions.LoadNavigationItemsSuccess","navigationItemActions.LoadNavigationItemsFail","pageIds","mediaIds","itemList","superType","getCmsState","getPageEntitiesSelector","getLatestPageKeySelector","getPageState","getPageEntities","getLatestPageKey","getLatestPage","currentSlotSelectorFactory","getComponentEntitiesSelector","getComponentState","getComponentEntities","componentStateSelectorFactory","getNavigationEntryItemState","getSelectedNavigationEntryItemState","nodes","itemsSelectorFactory","itemState","CmsService","_launchInSmartEdit","isLaunchInSmartEdit","getCurrentPage","fromStore.getLatestPage","getComponentData","fromStore.componentStateSelectorFactory","withLatestFrom","componentState","fromStore.LoadComponent","getContentSlot","fromStore.currentSlotSelectorFactory","getNavigationEntryItems","navigationNodeUid","fromStore.itemsSelectorFactory","loadNavigationItems","rootUid","fromStore.LoadNavigationItems","refreshLatestPage","fromStore.RefreshLatestPage","refreshComponent","hasPage","tryTimes","fromStore.getPageEntities","found","defaultPageIds","len","fromStore.UpdateLatestPageKey","fromStore.LoadPageData","PageTitleResolver","getScore","score","pageType","pageTemplate","PageTitleService","resolvers","cms","getTitle","pageTitleResolver","getResolver","matchingResolvers","resolver","a","ComponentMapperService","componentFactoryResolver","platform","missingComponents","loadedWebComponents","getType","componentConfig","cmsComponents","getFactoryEntryByCode","from","getComponentTypeByCode","factoryEntry","getComponentFactoryByCode","isWebComponent","includes","initWebComponent","componentType","renderer","script","createElement","setAttribute","appendChild","onload","chainedOnload_1","ComponentFactoryResolver","CmsOccModule","cmsStoreConfigFactory","CmsStoreModule","metaReducers$3","ContentPageTitleResolver","CmsPageTitleModule","CmsModule","ProductPageTitleResolver","productService","SearchPageTitleResolver","productSearchService","combineLatest","pagination","totalResults","q","getSearchResultTitle","total","part","CategoryPageTitleResolver","hasProductListComponent","breadcrumbs","facetValueName","comp","pageTitleResolvers","ProductModule","CartEffects","occCartService","loadCart$","fromActions.LOAD_CART","loadCartParams","isMissingData","fromActions.LoadCartFail","fromActions.LoadCartSuccess","createCart$","fromActions.CREATE_CART","fromActions.CreateCartSuccess","fromActions.MergeCartSuccess","fromActions.CreateCartFail","mergeCart$","fromActions.MERGE_CART","currentCart","fromActions.CreateCart","CartEntryEffects","cartService","addEntry$","fromActions.ADD_ENTRY","fromActions.AddEntrySuccess","fromActions.AddEntryFail","removeEntry$","fromActions.REMOVE_ENTRY","fromActions.RemoveEntrySuccess","fromActions.RemoveEntryFail","updateEntry$","fromActions.UPDATE_ENTRY","fromActions.UpdateEntrySuccess","fromActions.UpdateEntryFail","CartStoreModule","metaReducers$1","CartModule","SERVER_BASE_URL_META_TAG_NAME","SERVER_BASE_URL_META_TAG_PLACEHOLDER","CHECKOUT_FEATURE","ADD_DELIVERY_ADDRESS","ADD_DELIVERY_ADDRESS_FAIL","ADD_DELIVERY_ADDRESS_SUCCESS","SET_DELIVERY_ADDRESS","SET_DELIVERY_ADDRESS_FAIL","SET_DELIVERY_ADDRESS_SUCCESS","LOAD_SUPPORTED_DELIVERY_MODES","LOAD_SUPPORTED_DELIVERY_MODES_FAIL","LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS","CLEAR_SUPPORTED_DELIVERY_MODES","SET_DELIVERY_MODE","SET_DELIVERY_MODE_FAIL","SET_DELIVERY_MODE_SUCCESS","CREATE_PAYMENT_DETAILS","CREATE_PAYMENT_DETAILS_FAIL","CREATE_PAYMENT_DETAILS_SUCCESS","SET_PAYMENT_DETAILS","SET_PAYMENT_DETAILS_FAIL","SET_PAYMENT_DETAILS_SUCCESS","PLACE_ORDER","PLACE_ORDER_FAIL","PLACE_ORDER_SUCCESS","CLEAR_CHECKOUT_STEP","CLEAR_CHECKOUT_DATA","AddDeliveryAddress","AddDeliveryAddressFail","AddDeliveryAddressSuccess","SetDeliveryAddress","SetDeliveryAddressFail","SetDeliveryAddressSuccess","LoadSupportedDeliveryModes","LoadSupportedDeliveryModesFail","LoadSupportedDeliveryModesSuccess","SetDeliveryMode","SetDeliveryModeFail","SetDeliveryModeSuccess","CreatePaymentDetails","CreatePaymentDetailsFail","CreatePaymentDetailsSuccess","SetPaymentDetails","SetPaymentDetailsFail","SetPaymentDetailsSuccess","PlaceOrder","PlaceOrderFail","PlaceOrderSuccess","ClearSupportedDeliveryModes","ClearCheckoutStep","ClearCheckoutData","LOAD_CARD_TYPES","LOAD_CARD_TYPES_FAIL","LOAD_CARD_TYPES_SUCCESS","LoadCardTypes","LoadCardTypesFail","LoadCardTypesSuccess","VERIFY_ADDRESS","VERIFY_ADDRESS_FAIL","VERIFY_ADDRESS_SUCCESS","CLEAR_ADDRESS_VERIFICATION_RESULTS","VerifyAddress","VerifyAddressFail","VerifyAddressSuccess","ClearAddressVerificationResults","CHECKOUT_CLEAR_MISCS_DATA","CheckoutClearMiscsData","deliveryMode","supported","selected","paymentDetails","initialState$9","fromAction.ADD_DELIVERY_ADDRESS_SUCCESS","fromAction.SET_DELIVERY_ADDRESS_SUCCESS","fromAction.LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS","supportedModes","deliveryModes","modes","mode","fromAction.SET_DELIVERY_MODE_SUCCESS","fromAction.CREATE_PAYMENT_DETAILS_SUCCESS","fromAction.SET_PAYMENT_DETAILS_SUCCESS","fromAction.CREATE_PAYMENT_DETAILS_FAIL","fromAction.PLACE_ORDER_SUCCESS","fromAction.CLEAR_CHECKOUT_DATA","fromAction.CLEAR_CHECKOUT_STEP","fromAction.CLEAR_SUPPORTED_DELIVERY_MODES","fromAction.CHECKOUT_CLEAR_MISCS_DATA","getDeliveryAddress","getPaymentDetails","getOrderDetails","initialState$a","fromAction.VERIFY_ADDRESS_SUCCESS","fromAction.VERIFY_ADDRESS_FAIL","fromAction.CLEAR_ADDRESS_VERIFICATION_RESULTS","getAddressVerificationResults","initialState$b","fromAction.LOAD_CARD_TYPES_SUCCESS","cardTypesEntities","getCardTypesEntites","steps","fromCheckout.reducer","cardTypes","fromCardTypes.reducer","addressVerification","fromAddressVerification.reducer","getCheckoutState","clearCheckoutState","fromAction.CheckoutClearMiscsData","fromAction.ClearSupportedDeliveryModes","fromAction.ClearCheckoutData","getCheckoutStepsState","fromFeature.getCheckoutState","fromReducer.getDeliveryAddress","fromReducer.getDeliveryMode","getSelectedCode","getSelectedDeliveryMode","fromReducer.getPaymentDetails","getCheckoutOrderDetails","fromReducer.getOrderDetails","getCardTypesState","fromReducer.getCardTypesEntites","getAllCardTypes","entites","getAddressVerificationResultsState","fromReducer.getAddressVerificationResults","GLOBAL_MESSAGE_FEATURE","ADD_MESSAGE","REMOVE_MESSAGE","REMOVE_MESSAGES_BY_TYPE","AddMessage","RemoveMessage","RemoveMessagesByType","getGlobalMessageState","getGlobalMessageEntities","initialState$c","fromAction.ADD_MESSAGE","text","msgs","fromAction.REMOVE_MESSAGE","msgType","msgIndex","index","messages","splice","fromAction.REMOVE_MESSAGES_BY_TYPE","fromGlobalMessage.reducer","GlobalMessageStoreModule","GlobalMessageService","remove","MSG_TYPE_CONFIRMATION","MSG_TYPE_ERROR","MSG_TYPE_INFO","HttpErrorInterceptor","globalMessageService","GlobalMessageType","getErrorMessage","errMsg","error_description","GlobalMessageModule","ADDRESSES_ENDPOINT","PAYMENT_DETAILS_ENDPOINT","OccUserService","loadUser","getUserEndpoint","verifyAddress","loadUserAddresses","addUserAddress","updateUserAddress","deleteUserAddress","loadUserPaymentMethods","deleteUserPaymentMethod","paymentMethodID","setDefaultUserPaymentMethod","billingAddress","titleCode","defaultPayment","registerUser","user","FULL_PARAMS","OccOrderService","getOrderEndpoint","orderEndpoint","placeOrder","getOrders","getOrder","orderUrl","UserOccModule","LOAD_USER_DETAILS","LOAD_USER_DETAILS_FAIL","LOAD_USER_DETAILS_SUCCESS","LoadUserDetails","LoadUserDetailsFail","LoadUserDetailsSuccess","USER_FEATURE","USER_PAYMENT_METHODS","USER_ORDERS","USER_ADDRESSES","LOAD_USER_ADDRESSES","LOAD_USER_ADDRESSES_FAIL","LOAD_USER_ADDRESSES_SUCCESS","ADD_USER_ADDRESS","ADD_USER_ADDRESS_FAIL","ADD_USER_ADDRESS_SUCCESS","UPDATE_USER_ADDRESS","UPDATE_USER_ADDRESS_FAIL","UPDATE_USER_ADDRESS_SUCCESS","DELETE_USER_ADDRESS","DELETE_USER_ADDRESS_FAIL","DELETE_USER_ADDRESS_SUCCESS","LoadUserAddresses","LoadUserAddressesFail","LoadUserAddressesSuccess","AddUserAddress","AddUserAddressFail","AddUserAddressSuccess","UpdateUserAddress","UpdateUserAddressFail","UpdateUserAddressSuccess","DeleteUserAddress","DeleteUserAddressFail","DeleteUserAddressSuccess","LOAD_USER_PAYMENT_METHODS","LOAD_USER_PAYMENT_METHODS_FAIL","LOAD_USER_PAYMENT_METHODS_SUCCESS","SET_DEFAULT_USER_PAYMENT_METHOD","SET_DEFAULT_USER_PAYMENT_METHOD_FAIL","SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS","DELETE_USER_PAYMENT_METHOD","DELETE_USER_PAYMENT_METHOD_FAIL","DELETE_USER_PAYMENT_METHOD_SUCCESS","LoadUserPaymentMethods","LoadUserPaymentMethodsFail","LoadUserPaymentMethodsSuccess","SetDefaultUserPaymentMethod","SetDefaultUserPaymentMethodFail","SetDefaultUserPaymentMethodSuccess","DeleteUserPaymentMethod","DeleteUserPaymentMethodFail","DeleteUserPaymentMethodSuccess","REGISTER_USER","REGISTER_USER_FAIL","REGISTER_USER_SUCCESS","RegisterUser","RegisterUserFail","RegisterUserSuccess","LOAD_USER_ORDERS","LOAD_USER_ORDERS_FAIL","LOAD_USER_ORDERS_SUCCESS","CLEAR_USER_ORDERS","LoadUserOrders","LoadUserOrdersFail","LoadUserOrdersSuccess","ClearUserOrders","LOAD_TITLES","LOAD_TITLES_FAIL","LOAD_TITLES_SUCCESS","LoadTitles","LoadTitlesFail","LoadTitlesSuccess","LOAD_DELIVERY_COUNTRIES","LOAD_DELIVERY_COUNTRIES_FAIL","LOAD_DELIVERY_COUNTRIES_SUCCESS","LoadDeliveryCountries","LoadDeliveryCountriesFail","LoadDeliveryCountriesSuccess","LOAD_REGIONS","LOAD_REGIONS_SUCCESS","LOAD_REGIONS_FAIL","LoadRegions","LoadRegionsFail","LoadRegionsSuccess","LOAD_ORDER_DETAILS","LOAD_ORDER_DETAILS_FAIL","LOAD_ORDER_DETAILS_SUCCESS","CLEAR_ORDER_DETAILS","LoadOrderDetails","LoadOrderDetailsFail","LoadOrderDetailsSuccess","ClearOrderDetails","LOAD_BILLING_COUNTRIES","LOAD_BILLING_COUNTRIES_FAIL","LOAD_BILLING_COUNTRIES_SUCCESS","LoadBillingCountries","LoadBillingCountriesFail","LoadBillingCountriesSuccess","CLEAR_MISCS_DATA","ClearMiscsData","UserDetailsEffects","occUserService","loadUserDetails$","fromUserDetailsAction.LOAD_USER_DETAILS","fromUserDetailsAction.LoadUserDetailsSuccess","fromUserDetailsAction.LoadUserDetailsFail","UserAddressesEffects","loadUserAddresses$","fromUserAddressesAction.LOAD_USER_ADDRESSES","addressesList","fromUserAddressesAction.LoadUserAddressesSuccess","addresses","fromUserAddressesAction.LoadUserAddressesFail","addUserAddress$","fromUserAddressesAction.ADD_USER_ADDRESS","fromUserAddressesAction.AddUserAddressSuccess","fromUserAddressesAction.AddUserAddressFail","updateUserAddress$","fromUserAddressesAction.UPDATE_USER_ADDRESS","fromUserAddressesAction.UpdateUserAddressSuccess","fromUserAddressesAction.UpdateUserAddressFail","deleteUserAddress$","fromUserAddressesAction.DELETE_USER_ADDRESS","fromUserAddressesAction.DeleteUserAddressSuccess","fromUserAddressesAction.DeleteUserAddressFail","UserPaymentMethodsEffects","loadUserPaymentMethods$","fromUserPaymentMethodsAction.LOAD_USER_PAYMENT_METHODS","paymentsList","fromUserPaymentMethodsAction.LoadUserPaymentMethodsSuccess","payments","fromUserPaymentMethodsAction.LoadUserPaymentMethodsFail","setDefaultUserPaymentMethod$","fromUserPaymentMethodsAction.SET_DEFAULT_USER_PAYMENT_METHOD","paymentMethodId","fromUserPaymentMethodsAction.SetDefaultUserPaymentMethodSuccess","fromUserPaymentMethodsAction.LoadUserPaymentMethods","fromUserPaymentMethodsAction.SetDefaultUserPaymentMethodFail","deleteUserPaymentMethod$","fromUserPaymentMethodsAction.DELETE_USER_PAYMENT_METHOD","fromUserPaymentMethodsAction.DeleteUserPaymentMethodSuccess","fromUserPaymentMethodsAction.DeleteUserPaymentMethodFail","UserRegisterEffects","userService","registerUser$","fromActions.REGISTER_USER","_result","fromActions.RegisterUserSuccess","fromActions.RegisterUserFail","UserOrdersEffect","occOrderService","loadUserOrders$","fromUserOrdersAction.LOAD_USER_ORDERS","fromUserOrdersAction.LoadUserOrdersSuccess","fromUserOrdersAction.LoadUserOrdersFail","resetUserOrders$","fromUserOrdersAction.CLEAR_USER_ORDERS","TitlesEffects","occMiscsService","loadTitles$","fromAction.LOAD_TITLES","fromAction.LoadTitlesSuccess","titles","fromAction.LoadTitlesFail","DeliveryCountriesEffects","loadDeliveryCountries$","fromAction.LOAD_DELIVERY_COUNTRIES","fromAction.LoadDeliveryCountriesSuccess","countries","fromAction.LoadDeliveryCountriesFail","RegionsEffects","loadRegions$","fromActions.LOAD_REGIONS","countryCode","fromActions.LoadRegionsSuccess","regions","fromActions.LoadRegionsFail","OrderDetailsEffect","loadOrderDetails$","fromOrderDetailsAction.LOAD_ORDER_DETAILS","order","consignments","element","orderEntry","unconsignedEntries","fromOrderDetailsAction.LoadOrderDetailsSuccess","fromOrderDetailsAction.LoadOrderDetailsFail","BillingCountriesEffect","loadBillingCountries$","fromAction.LOAD_BILLING_COUNTRIES","fromAction.LoadBillingCountriesSuccess","fromAction.LoadBillingCountriesFail","initialState$d","fromAction.LOAD_BILLING_COUNTRIES_SUCCESS","countryEntities","initialState$e","fromAction.LOAD_DELIVERY_COUNTRIES_SUCCESS","country","fromAction.CLEAR_MISCS_DATA","initialState$f","fromOrderDetailsAction.LOAD_ORDER_DETAILS_SUCCESS","fromOrderDetailsAction.CLEAR_ORDER_DETAILS","initialState$g","fromPaymentMethodsAction.LOAD_USER_PAYMENT_METHODS_SUCCESS","fromPaymentMethodsAction.LOAD_USER_PAYMENT_METHODS_FAIL","initialState$h","fromAction.LOAD_REGIONS_SUCCESS","fromAction.LOAD_REGIONS","initialState$i","fromAction.LOAD_TITLES_SUCCESS","titleEntities","initialState$j","fromActions.LOAD_USER_ADDRESSES_FAIL","fromActions.LOAD_USER_ADDRESSES_SUCCESS","initialState$k","fromUserDetailsAction.LOAD_USER_DETAILS_SUCCESS","sorts","initialState$l","fromUserOrdersAction.LOAD_USER_ORDERS_SUCCESS","fromUserOrdersAction.LOAD_USER_ORDERS_FAIL","account","fromUserDetailsReducer.reducer","fromAddressesReducer.reducer","billingCountries","fromBillingCountriesReducer.reducer","fromPaymentReducer.reducer","fromUserOrdersReducer.reducer","fromOrderDetailsReducer.reducer","fromDeliveryCountries.reducer","fromTitlesReducer.reducer","fromRegionsReducer.reducer","clearUserState","getUserState","getDetailsState","getAddressesLoaderState","getAddresses","getAddressesLoading","getPaymentMethodsState","getPaymentMethods","getPaymentMethodsLoading","getOrdersState","getOrdersLoaded","getTitlesState","getTitlesEntites","getAllTitles","getDeliveryCountriesState","getDeliveryCountriesEntites","getAllDeliveryCountries","countrySelectorFactory","getRegionsState","getAllRegions","getOrderState","getBillingCountriesState","getBillingCountriesEntites","getAllBillingCountries","UserService","fromStore.getDetails","fromStore.LoadUserDetails","userRegisterFormData","fromStore.RegisterUser","fromStore.getOrderDetails","loadOrderDetails","fromStore.LoadOrderDetails","clearOrderDetails","fromStore.ClearOrderDetails","getOrderHistoryList","fromStore.getOrdersState","orderListState","loadOrderList","getOrderHistoryListLoaded","fromStore.getOrdersLoaded","loadPaymentMethods","fromStore.LoadUserPaymentMethods","fromStore.getPaymentMethods","fromStore.getPaymentMethodsLoading","setPaymentMethodAsDefault","fromStore.SetDefaultUserPaymentMethod","deletePaymentMethod","fromStore.DeleteUserPaymentMethod","fromStore.LoadUserOrders","loadAddresses","fromStore.LoadUserAddresses","fromStore.AddUserAddress","setAddressAsDefault","fromStore.UpdateUserAddress","defaultAddress","fromStore.DeleteUserAddress","fromStore.getAddresses","fromStore.getAddressesLoading","getTitles","fromStore.getAllTitles","fromStore.LoadTitles","fromStore.LoadDeliveryCountries","getDeliveryCountries","fromStore.getAllDeliveryCountries","getCountry","fromStore.countrySelectorFactory","fromStore.LoadRegions","getRegions","fromStore.getAllRegions","fromStore.getAllBillingCountries","fromStore.LoadBillingCountries","clearOrderList","fromStore.ClearUserOrders","UserStoreModule","ReactiveFormsModule","metaReducers$5","UserModule","CheckoutEffects","addDeliveryAddress$","fromActions.ADD_DELIVERY_ADDRESS","fromUserActions.LoadUserAddresses","fromActions.SetDeliveryAddress","fromActions.AddDeliveryAddressFail","setDeliveryAddress$","fromActions.SET_DELIVERY_ADDRESS","fromActions.SetDeliveryAddressSuccess","fromActions.SetDeliveryAddressFail","loadSupportedDeliveryModes$","fromActions.LOAD_SUPPORTED_DELIVERY_MODES","fromActions.LoadSupportedDeliveryModesSuccess","fromActions.LoadSupportedDeliveryModesFail","setDeliveryMode$","fromActions.SET_DELIVERY_MODE","selectedModeId","fromActions.SetDeliveryModeSuccess","fromActions.SetDeliveryModeFail","createPaymentDetails$","fromActions.CREATE_PAYMENT_DETAILS","labelsMap","convertToMap","mappingLabels","getParamsForPaymentProvider","sub","response","extractPaymentDetailsFromHtml","fromPaymentProvider","fromActions.CreatePaymentDetailsFail","getPaymentSopResponseParams","fromUserActions.LoadUserPaymentMethods","fromActions.CreatePaymentDetailsSuccess","setPaymentDetails$","fromActions.SET_PAYMENT_DETAILS","fromActions.SetPaymentDetailsSuccess","fromActions.SetPaymentDetailsFail","placeOrder$","fromActions.PLACE_ORDER","fromActions.PlaceOrderSuccess","fromActions.PlaceOrderFail","DOMParser","domparser","sopResponseParams","cardType","expiryMonth","expiryYear","accountHolderName","cardNumber","cvn","firstName","lastName","line1","line2","town","postalCode","html","inputs","parseFromString","getElementsByTagName","input","getAttribute","reason_1","paramList","CardTypesEffects","loadCardTypes$","fromAction.LOAD_CARD_TYPES","fromAction.LoadCardTypesSuccess","fromAction.LoadCardTypesFail","AddressVerificationEffect","verifyAddress$","fromAction.VERIFY_ADDRESS","fromAction.VerifyAddressSuccess","fromAction.VerifyAddressFail","CheckoutService","checkoutStore","fromCheckoutStore.getSupportedDeliveryModes","fromCheckoutStore.getSelectedDeliveryMode","getSelectedDeliveryModeCode","fromCheckoutStore.getSelectedCode","getCardTypes","fromCheckoutStore.getAllCardTypes","fromCheckoutStore.getDeliveryAddress","fromCheckoutStore.getAddressVerificationResults","fromCheckoutStore.getPaymentDetails","fromCheckoutStore.getCheckoutOrderDetails","createAndSetAddress","actionAllowed","fromCheckoutStore.AddDeliveryAddress","loadSupportedDeliveryModes","fromCheckoutStore.LoadSupportedDeliveryModes","fromCheckoutStore.SetDeliveryMode","loadSupportedCardTypes","fromCheckoutStore.LoadCardTypes","fromCheckoutStore.CreatePaymentDetails","fromCheckoutStore.PlaceOrder","fromCheckoutStore.VerifyAddress","fromCheckoutStore.SetDeliveryAddress","fromCheckoutStore.SetPaymentDetails","clearAddressVerificationResults","fromCheckoutStore.ClearAddressVerificationResults","clearCheckoutData","fromCheckoutStore.ClearCheckoutData","clearCheckoutStep","stepNumber","fromCheckoutStore.ClearCheckoutStep","CheckoutStoreModule","metaReducers$4","CheckoutPageTitleResolver","CheckoutModule","SmartEditService","cmsService","getCmsTicket","addPageContract","window_1","renderComponent","componentId","parentId","reprocessPage","_cmsTicketId","takeWhile","launchInSmartEdit","cmsPage","previousContract_1","classList","attr","CmsTicketInterceptor","cmsTicketId","SmartEditModule","OccStoreFinderService","occModuleConfig","findStores","longitudeLatitude","callOccFindStores","storesCount","storeCountUrl","getStoresEndpoint","findStoreById","storeId","storeDetailsUrl","String","longitude","latitude","StoreFinderOccModule","StoreFinderConfig","STORE_FINDER_FEATURE","STORE_FINDER_DATA","ON_HOLD","FIND_STORES","FIND_STORES_FAIL","FIND_STORES_SUCCESS","FIND_STORE_BY_ID","FIND_STORE_BY_ID_FAIL","FIND_STORE_BY_ID_SUCCESS","OnHold","FindStores","FindStoresFail","FindStoresSuccess","FindStoreById","FindStoreByIdFail","FindStoreByIdSuccess","VIEW_ALL_STORES","VIEW_ALL_STORES_FAIL","VIEW_ALL_STORES_SUCCESS","ViewAllStores","ViewAllStoresFail","ViewAllStoresSuccess","getStoreFinderState","getFindStoresState","storesState","getFindStoresEntities","getStoresLoading","getViewAllStoresState","viewAllStores","getViewAllStoresEntities","getViewAllStoresLoading","ExternalJsFileLoader","src","parseParams","async","defer","addEventListener","head","keysArray","StoreDataService","weekDays","0","1","2","3","4","5","6","getStoreLatitude","geoPoint","getStoreLongitude","getStoreClosingTime","requestedDaySchedule","getSchedule","closed","closingHour","closingTime","formattedHour","closingMinute","minute","valueOf","setHours","setMinutes","getStoreOpeningTime","openingHour","openingTime","openingMinutes","isStoreOpen","openingDate","closingDate","weekday","getDay","openingHours","weekDayOpeningList","weekDayOpeningListItem","weekDay","GoogleMapRendererService","externalJsFileLoader","storeDataService","googleMap","renderMap","mapElement","locations","selectMarkerHandler","googleMaps","apiUrl","apiKey","drawMap","centerMap","latitute","panTo","lat","lng","setZoom","selectedMarkerScale","defineMapCenter","google","maps","LatLng","initMap","mapCenter","mapProp","center","zoom","scale","mapTypeId","MapTypeId","ROADMAP","Map","createMarkers","markers","marker","Marker","setMap","addListener","setAnimation","Animation","BOUNCE","FindStoresEffect","occStoreFinderService","findStores$","fromAction.FIND_STORES","geolocation","stores","fromAction.FindStoresSuccess","fromAction.FindStoresFail","findStoreById$","fromAction.FIND_STORE_BY_ID","fromAction.FindStoreByIdSuccess","fromAction.FindStoreByIdFail","ViewAllStoresEffect","viewAllStores$","fromAction.VIEW_ALL_STORES","fromAction.ViewAllStoresSuccess","fromAction.ViewAllStoresFail","StoreFinderService","geolocationWatchId","fromStore.getStoresLoading","fromStore.getFindStoresEntities","fromStore.getViewAllStoresLoading","fromStore.getViewAllStoresEntities","findStoresAction","fromStore.FindStores","clearWatchGeolocation","fromStore.ViewAllStores","viewStoreById","fromStore.FindStoreById","useMyLocation","fromStore.OnHold","navigator","watchPosition","pos","coords","callbackAction","clearWatch","StoreFinderStoreModule","defaultStoreFinderConfig","ɵ0$3","StoreFinderCoreModule","CxApiModule","CxApiService","auth","routing","productSearch","productReview","StripHtmlPipe","productClone","replace","StripHtmlModule","PipeModule","UtilModule","serverConfigFromMetaTagFactory","getMetaTagContent","metaTag","getTag","entitySelector","ofLoaderLoad","ofLoaderFail","ofLoaderSuccess","entityValueSelector","entityLoadingSelector","entityErrorSelector","entitySuccessSelector","codes","BUY","FROM","PRIMARY","GALLERY","BASIC","DEFAULT","FULL","All","Product","Order","ProductPage","CategoryPage","CMSTabParagraphComponent"],"mappings":"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BAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,oBAcPF,MAAQ,QACRC,QAAU,UACVC,KAAO,gBAcPC,IAAM,MACNC,QAAU,UACVC,MAAQ,2wLwOpzH0B,SAClChnE,GAEA,OAAAf,EAAAA,eACE4uD,GACA,SAAAhuD,GAAY,OAAkC,IAAjCzK,OAAO0K,KAAKD,GAAUtJ,OAAesJ,EAASG,GAAQ,y+CgDtCtB,CAC/CmmC,qBAAsB,CACpB8gC,YAAa,CAAC,kBACdC,aAAc,CAAC,cAAe,cAAe,aAE/Cj5B,cAAe,CACbk5B,yBAA0B,CAAEhmC,SAAU,mDlJkBI,83BWjBlB,SAACljC,GAAqB,OAAAA,EAAMqkC,sSC+BhB,SACtCiC,GAEA,OAAOtlC,EAAAA,eACLwrC,GAA8BlG,GAC9B,SAAAtmC,GAAS,OAAAD,GAAoBC","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Action } from '@ngrx/store';\n\nexport const LOADER_LOAD_ACTION = '[LOADER] LOAD';\nexport const LOADER_FAIL_ACTION = '[LOADER] FAIL';\nexport const LOADER_SUCCESS_ACTION = '[LOADER] SUCCESS';\nexport const LOADER_RESET_ACTION = '[LOADER] RESET';\n\nexport interface LoaderMeta {\n  entityType: string;\n  loader: {\n    load?: boolean;\n    error?: any;\n    success?: boolean;\n  };\n}\n\nexport interface LoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: LoaderMeta;\n}\n\nexport function loadMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      load: true\n    }\n  };\n}\n\nexport function failMeta(entityType: string, error?: any): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      error: error ? error : true\n    }\n  };\n}\n\nexport function successMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      success: true\n    }\n  };\n}\n\nexport function resetMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {}\n  };\n}\n\nexport class LoaderLoadAction implements LoaderAction {\n  type = LOADER_LOAD_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = loadMeta(entityType);\n  }\n}\n\nexport class LoaderFailAction implements LoaderAction {\n  type = LOADER_FAIL_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string, error?: any) {\n    this.meta = failMeta(entityType, error);\n  }\n}\n\nexport class LoaderSuccessAction implements LoaderAction {\n  type = LOADER_SUCCESS_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = successMeta(entityType);\n  }\n}\n\nexport class LoaderResetAction implements LoaderAction {\n  type = LOADER_RESET_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = resetMeta(entityType);\n  }\n}\n","import { OrderEntry } from '../../occ/occ-models/index';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\n\nexport const CART_FEATURE = 'cart';\nexport const CART_DATA = '[Cart] Cart Data';\n\nexport interface StateWithCart {\n  [CART_FEATURE]: CartsState;\n}\n\nexport interface CartsState {\n  active: LoaderState<CartState>;\n}\n\nexport interface CartState {\n  content: any;\n  entries: { [code: string]: OrderEntry };\n  refresh: boolean;\n  cartMergeComplete: boolean;\n}\n","import { Action } from '@ngrx/store';\nimport {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction\n} from '../../../state/utils/loader/loader.action';\nimport { CART_DATA } from '../cart-state';\n\nexport const CREATE_CART = '[Cart] Create Cart';\nexport const CREATE_CART_FAIL = '[Cart] Create Cart Fail';\nexport const CREATE_CART_SUCCESS = '[Cart] Create Cart Success';\n\nexport const LOAD_CART = '[Cart] Load Cart';\nexport const LOAD_CART_FAIL = '[Cart] Load Cart Fail';\nexport const LOAD_CART_SUCCESS = '[Cart] Load Cart Success';\n\nexport const MERGE_CART = '[Cart] Merge Cart';\nexport const MERGE_CART_SUCCESS = '[Cart] Merge Cart Success';\n\nexport class CreateCart extends LoaderLoadAction {\n  readonly type = CREATE_CART;\n  constructor(public payload: any) {\n    super(CART_DATA);\n  }\n}\n\nexport class CreateCartFail extends LoaderFailAction {\n  readonly type = CREATE_CART_FAIL;\n  constructor(public payload: any) {\n    super(CART_DATA, payload);\n  }\n}\n\nexport class CreateCartSuccess extends LoaderSuccessAction {\n  readonly type = CREATE_CART_SUCCESS;\n  constructor(public payload: any) {\n    super(CART_DATA);\n  }\n}\n\nexport class LoadCart extends LoaderLoadAction {\n  readonly type = LOAD_CART;\n  constructor(\n    public payload: { userId: string; cartId: string; details?: boolean }\n  ) {\n    super(CART_DATA);\n  }\n}\n\nexport class LoadCartFail extends LoaderFailAction {\n  readonly type = LOAD_CART_FAIL;\n  constructor(public payload: any) {\n    super(CART_DATA, payload);\n  }\n}\n\nexport class LoadCartSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_CART_SUCCESS;\n  constructor(public payload: any) {\n    super(CART_DATA);\n  }\n}\n\nexport class MergeCart implements Action {\n  readonly type = MERGE_CART;\n  constructor(public payload: any) {}\n}\n\nexport class MergeCartSuccess implements Action {\n  readonly type = MERGE_CART_SUCCESS;\n  constructor() {}\n}\n\nexport type CartAction =\n  | CreateCart\n  | CreateCartFail\n  | CreateCartSuccess\n  | LoadCart\n  | LoadCartFail\n  | LoadCartSuccess\n  | MergeCart\n  | MergeCartSuccess;\n","import {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction\n} from '../../../state/utils/loader/loader.action';\nimport { CART_DATA } from '../cart-state';\n\nexport const ADD_ENTRY = '[Cart-entry] Add Entry';\nexport const ADD_ENTRY_SUCCESS = '[Cart-entry] Add Entry Success';\nexport const ADD_ENTRY_FAIL = '[Cart-entry] Add Entry Fail';\n\nexport const REMOVE_ENTRY = '[Cart-entry] Remove Entry';\nexport const REMOVE_ENTRY_SUCCESS = '[Cart-entry] Remove Entry Success';\nexport const REMOVE_ENTRY_FAIL = '[Cart-entry] Remove Entry Fail';\n\nexport const UPDATE_ENTRY = '[Cart-entry] Update Entry';\nexport const UPDATE_ENTRY_SUCCESS = '[Cart-entry] Update Entry Success';\nexport const UPDATE_ENTRY_FAIL = '[Cart-entry] Update Entry Fail';\n\nexport class AddEntry extends LoaderLoadAction {\n  readonly type = ADD_ENTRY;\n  constructor(public payload: any) {\n    super(CART_DATA);\n  }\n}\n\nexport class AddEntrySuccess extends LoaderSuccessAction {\n  readonly type = ADD_ENTRY_SUCCESS;\n  constructor(public payload: any) {\n    super(CART_DATA);\n  }\n}\n\nexport class AddEntryFail extends LoaderFailAction {\n  readonly type = ADD_ENTRY_FAIL;\n  constructor(public payload: any) {\n    super(CART_DATA, payload);\n  }\n}\n\nexport class RemoveEntry extends LoaderLoadAction {\n  readonly type = REMOVE_ENTRY;\n  constructor(public payload: any) {\n    super(CART_DATA);\n  }\n}\n\nexport class RemoveEntrySuccess extends LoaderSuccessAction {\n  readonly type = REMOVE_ENTRY_SUCCESS;\n  constructor() {\n    super(CART_DATA);\n  }\n}\n\nexport class RemoveEntryFail extends LoaderFailAction {\n  readonly type = REMOVE_ENTRY_FAIL;\n  constructor(public payload: any) {\n    super(CART_DATA, payload);\n  }\n}\n\nexport class UpdateEntry extends LoaderLoadAction {\n  readonly type = UPDATE_ENTRY;\n  constructor(public payload: any) {\n    super(CART_DATA);\n  }\n}\n\nexport class UpdateEntrySuccess extends LoaderSuccessAction {\n  readonly type = UPDATE_ENTRY_SUCCESS;\n  constructor() {\n    super(CART_DATA);\n  }\n}\n\nexport class UpdateEntryFail extends LoaderFailAction {\n  readonly type = UPDATE_ENTRY_FAIL;\n  constructor(public payload: any) {\n    super(CART_DATA, payload);\n  }\n}\n\nexport type CartEntryAction =\n  | AddEntry\n  | AddEntrySuccess\n  | AddEntryFail\n  | RemoveEntry\n  | RemoveEntrySuccess\n  | RemoveEntryFail\n  | UpdateEntry\n  | UpdateEntrySuccess\n  | UpdateEntryFail;\n","import { LoaderState } from './loader-state';\n\nexport function loaderValueSelector<T>(state: LoaderState<T>): T {\n  return state.value;\n}\n\nexport function loaderLoadingSelector<T>(state: LoaderState<T>): boolean {\n  return state.loading;\n}\n\nexport function loaderErrorSelector<T>(state: LoaderState<T>): boolean {\n  return state.error;\n}\n\nexport function loaderSuccessSelector<T>(state: LoaderState<T>): boolean {\n  return state.success;\n}\n","import {\n  MemoizedSelector,\n  createSelector,\n  createFeatureSelector\n} from '@ngrx/store';\nimport { Cart, OrderEntry } from '../../../occ/occ-models/index';\nimport {\n  CartState,\n  CartsState,\n  StateWithCart,\n  CART_FEATURE\n} from '../cart-state';\nimport {\n  loaderSuccessSelector,\n  loaderValueSelector,\n  loaderLoadingSelector\n} from '../../../state/utils/loader/loader.selectors';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\n\nexport const getCartContentSelector = (state: CartState) => state.content;\nexport const getRefreshSelector = (state: CartState) => state.refresh;\nexport const getEntriesSelector = (state: CartState) => state.entries;\nexport const getCartMergeCompleteSelector = (state: CartState) =>\n  state.cartMergeComplete;\n\nexport const getCartsState: MemoizedSelector<\n  StateWithCart,\n  CartsState\n> = createFeatureSelector<CartsState>(CART_FEATURE);\n\nexport const getActiveCartState: MemoizedSelector<\n  StateWithCart,\n  LoaderState<CartState>\n> = createSelector(\n  getCartsState,\n  (cartsState: CartsState) => cartsState.active\n);\n\nexport const getCartState: MemoizedSelector<\n  StateWithCart,\n  CartState\n> = createSelector(\n  getActiveCartState,\n  state => loaderValueSelector(state)\n);\n\nexport const getCartContent: MemoizedSelector<\n  StateWithCart,\n  Cart\n> = createSelector(\n  getCartState,\n  getCartContentSelector\n);\n\nexport const getRefresh: MemoizedSelector<\n  StateWithCart,\n  boolean\n> = createSelector(\n  getCartState,\n  getRefreshSelector\n);\n\nexport const getLoaded: MemoizedSelector<any, boolean> = createSelector(\n  getActiveCartState,\n  state =>\n    loaderSuccessSelector(state) &&\n    !loaderLoadingSelector(state) &&\n    !loaderValueSelector(state).refresh\n);\n\nexport const getCartMergeComplete: MemoizedSelector<\n  StateWithCart,\n  boolean\n> = createSelector(\n  getCartState,\n  getCartMergeCompleteSelector\n);\n\nexport const getEntriesMap: MemoizedSelector<\n  any,\n  { [code: string]: OrderEntry }\n> = createSelector(\n  getCartState,\n  getEntriesSelector\n);\n\nexport const getEntrySelectorFactory = (\n  productCode\n): MemoizedSelector<any, OrderEntry> => {\n  return createSelector(\n    getEntriesMap,\n    entries => {\n      if (entries) {\n        return entries[productCode];\n      }\n    }\n  );\n};\n\nexport const getEntries: MemoizedSelector<any, OrderEntry[]> = createSelector(\n  getEntriesMap,\n  entities => {\n    return Object.keys(entities).map(code => entities[code]);\n  }\n);\n","export abstract class ServerConfig {\n  production?: boolean;\n  server?: {\n    baseUrl?: string;\n    occPrefix?: string;\n  };\n}\n\nexport const defaultServerConfig: ServerConfig = {\n  server: {\n    occPrefix: '/rest/v2/'\n  }\n};\n","function isObject(item) {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n\nexport function deepMerge(target = {}, ...sources) {\n  if (!sources.length) {\n    return target;\n  }\n  const source = sources.shift() || {};\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, { [key]: {} });\n        }\n        deepMerge(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return deepMerge(target, ...sources);\n}\n","import { ServerConfig } from './server-config';\n\nexport function serverConfigValidator(config: ServerConfig) {\n  if (config.server.baseUrl === undefined) {\n    return 'Please configure server.baseUrl before using storefront library!';\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\n\nexport const ConfigValidatorToken = new InjectionToken(\n  'ConfigurationValidator'\n);\n\nexport type ConfigValidator = (config: any) => string | void;\n\nexport function provideConfigValidator(\n  configValidator: ConfigValidator\n): Provider {\n  return {\n    provide: ConfigValidatorToken,\n    useValue: configValidator,\n    multi: true\n  };\n}\n\nexport function validateConfig(\n  config: any,\n  configValidators: ConfigValidator[]\n) {\n  for (const validate of configValidators) {\n    const warning = validate(config);\n    if (warning) {\n      console.warn(warning);\n    }\n  }\n}\n","import {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  Provider\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  defaultServerConfig,\n  ServerConfig\n} from './server-config/server-config';\nimport { deepMerge } from './utils/deep-merge';\nimport { serverConfigValidator } from './server-config/server-config-validator';\nimport {\n  ConfigValidator,\n  ConfigValidatorToken,\n  provideConfigValidator,\n  validateConfig\n} from './utils/config-validator';\n\nexport const Config = new InjectionToken('Configuration');\nexport const ConfigChunk = new InjectionToken('ConfigurationChunk');\n\nexport function provideConfig(config: any = {}): Provider {\n  return { provide: ConfigChunk, useValue: config, multi: true };\n}\n\nexport function provideConfigFactory(\n  configFactory: Function,\n  deps?: any[]\n): Provider {\n  return {\n    provide: ConfigChunk,\n    useFactory: configFactory,\n    multi: true,\n    deps: deps\n  };\n}\n\nexport function configurationFactory(\n  configChunks: any[],\n  configValidators: ConfigValidator[]\n) {\n  const config = deepMerge({}, ...configChunks);\n  if (!config.production) {\n    validateConfig(config, configValidators);\n  }\n  return config;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: []\n})\nexport class ConfigModule {\n  static withConfig(config: object): ModuleWithProviders {\n    return {\n      ngModule: ConfigModule,\n      providers: [provideConfig(config)]\n    };\n  }\n\n  static withConfigFactory(\n    configFactory: Function,\n    deps?: any[]\n  ): ModuleWithProviders {\n    return {\n      ngModule: ConfigModule,\n      providers: [provideConfigFactory(configFactory, deps)]\n    };\n  }\n\n  static forRoot(config: any = {}): ModuleWithProviders {\n    return {\n      ngModule: ConfigModule,\n      providers: [\n        { provide: ServerConfig, useExisting: Config },\n        provideConfig(defaultServerConfig),\n        provideConfig(config),\n        {\n          provide: Config,\n          useFactory: configurationFactory,\n          deps: [ConfigChunk, ConfigValidatorToken]\n        },\n        provideConfigValidator(serverConfigValidator)\n      ]\n    };\n  }\n}\n","/*\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\n/**\n *\n * An interface representing Country.\n */\nexport interface Country {\n  /**\n   * @member {string} [isocode]\n   */\n  isocode?: string;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n}\n\n/**\n *\n * An interface representing Region.\n */\nexport interface Region {\n  /**\n   * @member {string} [countryIso]\n   */\n  countryIso?: string;\n  /**\n   * @member {string} [isocode]\n   */\n  isocode?: string;\n  /**\n   * @member {string} [isocodeShort]\n   */\n  isocodeShort?: string;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n}\n\n/**\n *\n * An interface representing RegionList.\n */\nexport interface RegionList {\n  /**\n   * @member {Region[]} [regions]\n   */\n  regions?: Region[];\n}\n\n/**\n *\n * An interface representing Address.\n */\nexport interface Address {\n  /**\n   * @member {string} [companyName]\n   */\n  companyName?: string;\n  /**\n   * @member {Country} [country]\n   */\n  country?: Country;\n  /**\n   * @member {boolean} [defaultAddress]\n   */\n  defaultAddress?: boolean;\n  /**\n   * @member {string} [email]\n   */\n  email?: string;\n  /**\n   * @member {string} [firstName]\n   */\n  firstName?: string;\n  /**\n   * @member {string} [formattedAddress]\n   */\n  formattedAddress?: string;\n  /**\n   * @member {string} [id]\n   */\n  id?: string;\n  /**\n   * @member {string} [lastName]\n   */\n  lastName?: string;\n  /**\n   * @member {string} [line1]\n   */\n  line1?: string;\n  /**\n   * @member {string} [line2]\n   */\n  line2?: string;\n  /**\n   * @member {string} [phone]\n   */\n  phone?: string;\n  /**\n   * @member {string} [postalCode]\n   */\n  postalCode?: string;\n  /**\n   * @member {Region} [region]\n   */\n  region?: Region;\n  /**\n   * @member {boolean} [shippingAddress]\n   */\n  shippingAddress?: boolean;\n  /**\n   * @member {string} [title]\n   */\n  title?: string;\n  /**\n   * @member {string} [titleCode]\n   */\n  titleCode?: string;\n  /**\n   * @member {string} [town]\n   */\n  town?: string;\n  /**\n   * @member {boolean} [visibleInAddressBook]\n   */\n  visibleInAddressBook?: boolean;\n}\n\n/**\n *\n * An interface representing AddressList.\n */\nexport interface AddressList {\n  /**\n   * @member {Address[]} [addresses]\n   */\n  addresses?: Address[];\n}\n\n/**\n *\n * An interface representing ErrorModel.\n * Error message\n *\n */\nexport interface ErrorModel {\n  /**\n   * @member {string} [message] Descriptive, human readable error message.\n   */\n  message?: string;\n  /**\n   * @member {string} [reason] Additional classification specific for each\n   * error type e.g. 'noStock'.\n   */\n  reason?: string;\n  /**\n   * @member {string} [subject] Identifier of the related object e.g. '1'.\n   */\n  subject?: string;\n  /**\n   * @member {string} [subjectType] Type of the object related to the error\n   * e.g. 'entry'.\n   */\n  subjectType?: string;\n  /**\n   * @member {string} [type] Type of the error e.g. 'LowStockError'.\n   */\n  type?: string;\n}\n\n/**\n *\n * An interface representing ErrorList.\n * List of errors\n *\n */\nexport interface ErrorList {\n  /**\n   * @member {ErrorModel[]} [errors]\n   */\n  errors?: ErrorModel[];\n}\n\n/**\n *\n * An interface representing AddressValidation.\n */\nexport interface AddressValidation {\n  /**\n   * @member {string} [decision]\n   */\n  decision?: string;\n  /**\n   * @member {ErrorList} [errors]\n   */\n  errors?: ErrorList;\n  /**\n   * @member {Address[]} [suggestedAddresses]\n   */\n  suggestedAddresses?: Address[];\n}\n\n/**\n *\n * An interface representing Price.\n */\nexport interface Price {\n  /**\n   * @member {string} [currencyIso]\n   */\n  currencyIso?: string;\n  /**\n   * @member {string} [formattedValue]\n   */\n  formattedValue?: string;\n  /**\n   * @member {number} [maxQuantity]\n   */\n  maxQuantity?: number;\n  /**\n   * @member {number} [minQuantity]\n   */\n  minQuantity?: number;\n  /**\n   * @member {PriceType} [priceType] Possible values include: 'BUY', 'FROM'\n   */\n  priceType?: PriceType;\n  /**\n   * @member {number} [value]\n   */\n  value?: number;\n}\n\n/**\n *\n * An interface representing Stock.\n */\nexport interface Stock {\n  /**\n   * @member {number} [stockLevel]\n   */\n  stockLevel?: number;\n  /**\n   * @member {string} [stockLevelStatus]\n   */\n  stockLevelStatus?: string;\n}\n\n/**\n *\n * An interface representing Image.\n */\nexport interface Image {\n  /**\n   * @member {string} [altText]\n   */\n  altText?: string;\n  /**\n   * @member {string} [format]\n   */\n  format?: string;\n  /**\n   * @member {number} [galleryIndex]\n   */\n  galleryIndex?: number;\n  /**\n   * @member {ImageType} [imageType] Possible values include: 'PRIMARY',\n   * 'GALLERY'\n   */\n  imageType?: ImageType;\n  /**\n   * @member {string} [url]\n   */\n  url?: string;\n}\n\n/**\n *\n * An interface representing VariantOptionQualifier.\n */\nexport interface VariantOptionQualifier {\n  /**\n   * @member {Image} [image]\n   */\n  image?: Image;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {string} [qualifier]\n   */\n  qualifier?: string;\n  /**\n   * @member {string} [value]\n   */\n  value?: string;\n}\n\n/**\n *\n * An interface representing VariantOption.\n */\nexport interface VariantOption {\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {Price} [priceData]\n   */\n  priceData?: Price;\n  /**\n   * @member {Stock} [stock]\n   */\n  stock?: Stock;\n  /**\n   * @member {string} [url]\n   */\n  url?: string;\n  /**\n   * @member {VariantOptionQualifier[]} [variantOptionQualifiers]\n   */\n  variantOptionQualifiers?: VariantOptionQualifier[];\n}\n\n/**\n *\n * An interface representing BaseOption.\n */\nexport interface BaseOption {\n  /**\n   * @member {VariantOption[]} [options]\n   */\n  options?: VariantOption[];\n  /**\n   * @member {VariantOption} [selected]\n   */\n  selected?: VariantOption;\n  /**\n   * @member {string} [variantType]\n   */\n  variantType?: string;\n}\n\n/**\n *\n * An interface representing SearchQuery.\n */\nexport interface SearchQuery {\n  /**\n   * @member {string} [value]\n   */\n  value?: string;\n}\n\n/**\n *\n * An interface representing SearchState.\n */\nexport interface SearchState {\n  /**\n   * @member {SearchQuery} [query]\n   */\n  query?: SearchQuery;\n  /**\n   * @member {string} [url]\n   */\n  url?: string;\n}\n\n/**\n *\n * An interface representing Breadcrumb.\n */\nexport interface Breadcrumb {\n  /**\n   * @member {string} [facetCode]\n   */\n  facetCode?: string;\n  /**\n   * @member {string} [facetName]\n   */\n  facetName?: string;\n  /**\n   * @member {string} [facetValueCode]\n   */\n  facetValueCode?: string;\n  /**\n   * @member {string} [facetValueName]\n   */\n  facetValueName?: string;\n  /**\n   * @member {SearchState} [removeQuery]\n   */\n  removeQuery?: SearchState;\n  /**\n   * @member {SearchState} [truncateQuery]\n   */\n  truncateQuery?: SearchState;\n}\n\n/**\n *\n * An interface representing Component.\n */\nexport interface Component {\n  /**\n   * @member {Date} [modifiedtime]\n   */\n  modifiedtime?: Date;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {any} [otherProperties]\n   */\n  otherProperties?: any;\n  /**\n   * @member {string} [typeCode]\n   */\n  typeCode?: string;\n  /**\n   * @member {string} [uid]\n   */\n  uid?: string;\n}\n\n/**\n *\n * An interface representing ComponentList.\n */\nexport interface ComponentList {\n  /**\n   * @member {Component[]} [component]\n   */\n  component?: Component[];\n}\n\n/**\n *\n * An interface representing ContentSlot.\n */\nexport interface ContentSlot {\n  /**\n   * @member {ComponentList} [components]\n   */\n  components?: ComponentList;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {string} [position]\n   */\n  position?: string;\n  /**\n   * @member {string} [slotId]\n   */\n  slotId?: string;\n  /**\n   * @member {boolean} [slotShared]\n   */\n  slotShared?: boolean;\n  /**\n   * @member {string} [slotStatus]\n   */\n  slotStatus?: string;\n}\n\n/**\n *\n * An interface representing ContentSlotList.\n */\nexport interface ContentSlotList {\n  /**\n   * @member {ContentSlot[]} [contentSlot]\n   */\n  contentSlot?: ContentSlot[];\n}\n\n/**\n *\n * An interface representing CMSPage.\n */\nexport interface CMSPage {\n  /**\n   * @member {ContentSlotList} [contentSlots]\n   */\n  contentSlots?: ContentSlotList;\n  /**\n   * @member {boolean} [defaultPage]\n   */\n  defaultPage?: boolean;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {string} [template]\n   */\n  template?: string;\n  /**\n   * @member {string} [title]\n   */\n  title?: string;\n  /**\n   * @member {string} [typeCode]\n   */\n  typeCode?: string;\n  /**\n   * @member {string} [uid]\n   */\n  uid?: string;\n}\n\n/**\n *\n * An interface representing CardType.\n */\nexport interface CardType {\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n}\n\n/**\n *\n * An interface representing CardTypeList.\n */\nexport interface CardTypeList {\n  /**\n   * @member {CardType[]} [cardTypes]\n   */\n  cardTypes?: CardType[];\n}\n\n/**\n *\n * An interface representing PromotionOrderEntryConsumed.\n */\nexport interface PromotionOrderEntryConsumed {\n  /**\n   * @member {number} [adjustedUnitPrice]\n   */\n  adjustedUnitPrice?: number;\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {number} [orderEntryNumber]\n   */\n  orderEntryNumber?: number;\n  /**\n   * @member {number} [quantity]\n   */\n  quantity?: number;\n}\n\n/**\n *\n * An interface representing PromotionRestriction.\n */\nexport interface PromotionRestriction {\n  /**\n   * @member {string} [description]\n   */\n  description?: string;\n  /**\n   * @member {string} [restrictionType]\n   */\n  restrictionType?: string;\n}\n\n/**\n *\n * An interface representing Promotion.\n */\nexport interface Promotion {\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {string[]} [couldFireMessages]\n   */\n  couldFireMessages?: string[];\n  /**\n   * @member {string} [description]\n   */\n  description?: string;\n  /**\n   * @member {boolean} [enabled]\n   */\n  enabled?: boolean;\n  /**\n   * @member {Date} [endDate]\n   */\n  endDate?: Date;\n  /**\n   * @member {string[]} [firedMessages]\n   */\n  firedMessages?: string[];\n  /**\n   * @member {number} [priority]\n   */\n  priority?: number;\n  /**\n   * @member {Image} [productBanner]\n   */\n  productBanner?: Image;\n  /**\n   * @member {string} [promotionGroup]\n   */\n  promotionGroup?: string;\n  /**\n   * @member {string} [promotionType]\n   */\n  promotionType?: string;\n  /**\n   * @member {PromotionRestriction[]} [restrictions]\n   */\n  restrictions?: PromotionRestriction[];\n  /**\n   * @member {Date} [startDate]\n   */\n  startDate?: Date;\n  /**\n   * @member {string} [title]\n   */\n  title?: string;\n}\n\n/**\n *\n * An interface representing PromotionResult.\n */\nexport interface PromotionResult {\n  /**\n   * @member {PromotionOrderEntryConsumed[]} [consumedEntries]\n   */\n  consumedEntries?: PromotionOrderEntryConsumed[];\n  /**\n   * @member {string} [description]\n   */\n  description?: string;\n  /**\n   * @member {Promotion} [promotion]\n   */\n  promotion?: Promotion;\n}\n\n/**\n *\n * An interface representing Currency.\n */\nexport interface Currency {\n  /**\n   * @member {boolean} [active]\n   */\n  active?: boolean;\n  /**\n   * @member {string} [isocode]\n   */\n  isocode?: string;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {string} [symbol]\n   */\n  symbol?: string;\n}\n\n/**\n *\n * An interface representing Voucher.\n */\nexport interface Voucher {\n  /**\n   * @member {Price} [appliedValue]\n   */\n  appliedValue?: Price;\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {Currency} [currency]\n   */\n  currency?: Currency;\n  /**\n   * @member {string} [description]\n   */\n  description?: string;\n  /**\n   * @member {boolean} [freeShipping]\n   */\n  freeShipping?: boolean;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {number} [value]\n   */\n  value?: number;\n  /**\n   * @member {string} [valueFormatted]\n   */\n  valueFormatted?: string;\n  /**\n   * @member {string} [valueString]\n   */\n  valueString?: string;\n  /**\n   * @member {string} [voucherCode]\n   */\n  voucherCode?: string;\n}\n\n/**\n *\n * An interface representing DeliveryMode.\n */\nexport interface DeliveryMode {\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {Price} [deliveryCost]\n   */\n  deliveryCost?: Price;\n  /**\n   * @member {string} [description]\n   */\n  description?: string;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n}\n\n/**\n *\n * An interface representing GeoPoint.\n */\nexport interface GeoPoint {\n  /**\n   * @member {number} [latitude]\n   */\n  latitude?: number;\n  /**\n   * @member {number} [longitude]\n   */\n  longitude?: number;\n}\n\n/**\n *\n * An interface representing Time.\n */\nexport interface Time {\n  /**\n   * @member {string} [formattedHour]\n   */\n  formattedHour?: string;\n  /**\n   * @member {Uint8Array} [hour]\n   */\n  hour?: Uint8Array;\n  /**\n   * @member {Uint8Array} [minute]\n   */\n  minute?: Uint8Array;\n}\n\n/**\n *\n * An interface representing SpecialOpeningDay.\n */\nexport interface SpecialOpeningDay {\n  /**\n   * @member {boolean} [closed]\n   */\n  closed?: boolean;\n  /**\n   * @member {Time} [closingTime]\n   */\n  closingTime?: Time;\n  /**\n   * @member {string} [comment]\n   */\n  comment?: string;\n  /**\n   * @member {Date} [date]\n   */\n  date?: Date;\n  /**\n   * @member {string} [formattedDate]\n   */\n  formattedDate?: string;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {Time} [openingTime]\n   */\n  openingTime?: Time;\n}\n\n/**\n *\n * An interface representing WeekdayOpeningDay.\n */\nexport interface WeekdayOpeningDay {\n  /**\n   * @member {boolean} [closed]\n   */\n  closed?: boolean;\n  /**\n   * @member {Time} [closingTime]\n   */\n  closingTime?: Time;\n  /**\n   * @member {Time} [openingTime]\n   */\n  openingTime?: Time;\n  /**\n   * @member {string} [weekDay]\n   */\n  weekDay?: string;\n}\n\n/**\n *\n * An interface representing OpeningSchedule.\n */\nexport interface OpeningSchedule {\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {SpecialOpeningDay[]} [specialDayOpeningList]\n   */\n  specialDayOpeningList?: SpecialOpeningDay[];\n  /**\n   * @member {WeekdayOpeningDay[]} [weekDayOpeningList]\n   */\n  weekDayOpeningList?: WeekdayOpeningDay[];\n}\n\n/**\n *\n * An interface representing PointOfService.\n */\nexport interface PointOfService {\n  /**\n   * @member {Address} [address]\n   */\n  address?: Address;\n  /**\n   * @member {string} [description]\n   */\n  description?: string;\n  /**\n   * @member {string} [displayName]\n   */\n  displayName?: string;\n  /**\n   * @member {number} [distanceKm]\n   */\n  distanceKm?: number;\n  /**\n   * @member {{ [propertyName: string]: string }} [features]\n   */\n  features?: { [propertyName: string]: string };\n  /**\n   * @member {string} [formattedDistance]\n   */\n  formattedDistance?: string;\n  /**\n   * @member {GeoPoint} [geoPoint]\n   */\n  geoPoint?: GeoPoint;\n  /**\n   * @member {Image} [mapIcon]\n   */\n  mapIcon?: Image;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {OpeningSchedule} [openingHours]\n   */\n  openingHours?: OpeningSchedule;\n  /**\n   * @member {string} [storeContent]\n   */\n  storeContent?: string;\n  /**\n   * @member {Image[]} [storeImages]\n   */\n  storeImages?: Image[];\n  /**\n   * @member {string} [url]\n   */\n  url?: string;\n}\n\n/**\n *\n * An interface representing Category.\n */\nexport interface Category {\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {Image} [image]\n   */\n  image?: Image;\n  /**\n   * @member {string} [url]\n   */\n  url?: string;\n}\n\n/**\n *\n * An interface representing FeatureUnit.\n */\nexport interface FeatureUnit {\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {string} [symbol]\n   */\n  symbol?: string;\n  /**\n   * @member {string} [unitType]\n   */\n  unitType?: string;\n}\n\n/**\n *\n * An interface representing FeatureValue.\n */\nexport interface FeatureValue {\n  /**\n   * @member {string} [value]\n   */\n  value?: string;\n}\n\n/**\n *\n * An interface representing Feature.\n */\nexport interface Feature {\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {boolean} [comparable]\n   */\n  comparable?: boolean;\n  /**\n   * @member {string} [description]\n   */\n  description?: string;\n  /**\n   * @member {FeatureUnit} [featureUnit]\n   */\n  featureUnit?: FeatureUnit;\n  /**\n   * @member {FeatureValue[]} [featureValues]\n   */\n  featureValues?: FeatureValue[];\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {boolean} [range]\n   */\n  range?: boolean;\n  /**\n   * @member {string} [type]\n   */\n  type?: string;\n}\n\n/**\n *\n * An interface representing Classification.\n */\nexport interface Classification {\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {Feature[]} [features]\n   */\n  features?: Feature[];\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n}\n\n/**\n *\n * An interface representing FutureStock.\n */\nexport interface FutureStock {\n  /**\n   * @member {Date} [date]\n   */\n  date?: Date;\n  /**\n   * @member {string} [formattedDate]\n   */\n  formattedDate?: string;\n  /**\n   * @member {Stock} [stock]\n   */\n  stock?: Stock;\n}\n\n/**\n *\n * An interface representing PriceRange.\n */\nexport interface PriceRange {\n  /**\n   * @member {Price} [maxPrice]\n   */\n  maxPrice?: Price;\n  /**\n   * @member {Price} [minPrice]\n   */\n  minPrice?: Price;\n}\n\n/**\n *\n * An interface representing ProductReference.\n */\nexport interface ProductReference {\n  /**\n   * @member {string} [description]\n   */\n  description?: string;\n  /**\n   * @member {boolean} [preselected]\n   */\n  preselected?: boolean;\n  /**\n   * @member {number} [quantity]\n   */\n  quantity?: number;\n  /**\n   * @member {string} [referenceType]\n   */\n  referenceType?: string;\n  /**\n   * @member {Product} [target]\n   */\n  target?: Product;\n}\n\n/**\n *\n * An interface representing Language.\n */\nexport interface Language {\n  /**\n   * @member {boolean} [active]\n   */\n  active?: boolean;\n  /**\n   * @member {string} [isocode]\n   */\n  isocode?: string;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {string} [nativeName]\n   */\n  nativeName?: string;\n}\n\n/**\n *\n * An interface representing User.\n */\nexport interface User {\n  /**\n   * @member {Currency} [currency]\n   */\n  currency?: Currency;\n  /**\n   * @member {string} [customerId]\n   */\n  customerId?: string;\n  /**\n   * @member {Date} [deactivationDate]\n   */\n  deactivationDate?: Date;\n  /**\n   * @member {Address} [defaultAddress]\n   */\n  defaultAddress?: Address;\n  /**\n   * @member {string} [displayUid]\n   */\n  displayUid?: string;\n  /**\n   * @member {string} [firstName]\n   */\n  firstName?: string;\n  /**\n   * @member {Language} [language]\n   */\n  language?: Language;\n  /**\n   * @member {string} [lastName]\n   */\n  lastName?: string;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {string} [title]\n   */\n  title?: string;\n  /**\n   * @member {string} [titleCode]\n   */\n  titleCode?: string;\n  /**\n   * @member {string} [uid]\n   */\n  uid?: string;\n}\n\n/**\n *\n * An interface representing Review.\n */\nexport interface Review {\n  /**\n   * @member {string} [alias]\n   */\n  alias?: string;\n  /**\n   * @member {string} [comment]\n   */\n  comment?: string;\n  /**\n   * @member {Date} [date]\n   */\n  date?: Date;\n  /**\n   * @member {string} [headline]\n   */\n  headline?: string;\n  /**\n   * @member {string} [id]\n   */\n  id?: string;\n  /**\n   * @member {User} [principal]\n   */\n  principal?: User;\n  /**\n   * @member {number} [rating]\n   */\n  rating?: number;\n}\n\n/**\n *\n * An interface representing VariantCategory.\n */\nexport interface VariantCategory {\n  /**\n   * @member {boolean} [hasImage]\n   */\n  hasImage?: boolean;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {number} [priority]\n   */\n  priority?: number;\n}\n\n/**\n *\n * An interface representing VariantValueCategory.\n */\nexport interface VariantValueCategory {\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {number} [sequence]\n   */\n  sequence?: number;\n  /**\n   * @member {VariantCategory[]} [superCategories]\n   */\n  superCategories?: VariantCategory[];\n}\n\n/**\n *\n * An interface representing VariantMatrixElement.\n */\nexport interface VariantMatrixElement {\n  /**\n   * @member {VariantMatrixElement[]} [elements]\n   */\n  elements?: VariantMatrixElement[];\n  /**\n   * @member {boolean} [isLeaf]\n   */\n  isLeaf?: boolean;\n  /**\n   * @member {VariantCategory} [parentVariantCategory]\n   */\n  parentVariantCategory?: VariantCategory;\n  /**\n   * @member {VariantOption} [variantOption]\n   */\n  variantOption?: VariantOption;\n  /**\n   * @member {VariantValueCategory} [variantValueCategory]\n   */\n  variantValueCategory?: VariantValueCategory;\n}\n\n/**\n *\n * An interface representing Product.\n */\nexport interface Product {\n  /**\n   * @member {boolean} [availableForPickup]\n   */\n  availableForPickup?: boolean;\n  /**\n   * @member {number} [averageRating]\n   */\n  averageRating?: number;\n  /**\n   * @member {BaseOption[]} [baseOptions]\n   */\n  baseOptions?: BaseOption[];\n  /**\n   * @member {string} [baseProduct]\n   */\n  baseProduct?: string;\n  /**\n   * @member {Category[]} [categories]\n   */\n  categories?: Category[];\n  /**\n   * @member {Classification[]} [classifications]\n   */\n  classifications?: Classification[];\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {string} [description]\n   */\n  description?: string;\n  /**\n   * @member {FutureStock[]} [futureStocks]\n   */\n  futureStocks?: FutureStock[];\n  /**\n   * @member {Image[]} [images]\n   */\n  images?: Image[];\n  /**\n   * @member {string} [manufacturer]\n   */\n  manufacturer?: string;\n  /**\n   * @member {boolean} [multidimensional]\n   */\n  multidimensional?: boolean;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {number} [numberOfReviews]\n   */\n  numberOfReviews?: number;\n  /**\n   * @member {Promotion[]} [potentialPromotions]\n   */\n  potentialPromotions?: Promotion[];\n  /**\n   * @member {Price} [price]\n   */\n  price?: Price;\n  /**\n   * @member {PriceRange} [priceRange]\n   */\n  priceRange?: PriceRange;\n  /**\n   * @member {ProductReference[]} [productReferences]\n   */\n  productReferences?: ProductReference[];\n  /**\n   * @member {boolean} [purchasable]\n   */\n  purchasable?: boolean;\n  /**\n   * @member {Review[]} [reviews]\n   */\n  reviews?: Review[];\n  /**\n   * @member {Stock} [stock]\n   */\n  stock?: Stock;\n  /**\n   * @member {string} [summary]\n   */\n  summary?: string;\n  /**\n   * @member {string} [url]\n   */\n  url?: string;\n  /**\n   * @member {VariantMatrixElement[]} [variantMatrix]\n   */\n  variantMatrix?: VariantMatrixElement[];\n  /**\n   * @member {VariantOption[]} [variantOptions]\n   */\n  variantOptions?: VariantOption[];\n  /**\n   * @member {string} [variantType]\n   */\n  variantType?: string;\n  /**\n   * @member {Price[]} [volumePrices]\n   */\n  volumePrices?: Price[];\n  /**\n   * @member {boolean} [volumePricesFlag]\n   */\n  volumePricesFlag?: boolean;\n}\n\n/**\n *\n * An interface representing OrderEntry.\n */\nexport interface OrderEntry {\n  /**\n   * @member {Price} [basePrice]\n   */\n  basePrice?: Price;\n  /**\n   * @member {DeliveryMode} [deliveryMode]\n   */\n  deliveryMode?: DeliveryMode;\n  /**\n   * @member {PointOfService} [deliveryPointOfService]\n   */\n  deliveryPointOfService?: PointOfService;\n  /**\n   * @member {number} [entryNumber]\n   */\n  entryNumber?: number;\n  /**\n   * @member {Product} [product]\n   */\n  product?: Product;\n  /**\n   * @member {number} [quantity]\n   */\n  quantity?: number;\n  /**\n   * @member {Price} [totalPrice]\n   */\n  totalPrice?: Price;\n  /**\n   * @member {boolean} [updateable]\n   */\n  updateable?: boolean;\n}\n\n/**\n *\n * An interface representing DeliveryOrderEntryGroup.\n */\nexport interface DeliveryOrderEntryGroup {\n  /**\n   * @member {Address} [deliveryAddress]\n   */\n  deliveryAddress?: Address;\n  /**\n   * @member {OrderEntry[]} [entries]\n   */\n  entries?: OrderEntry[];\n  /**\n   * @member {number} [quantity]\n   */\n  quantity?: number;\n  /**\n   * @member {Price} [totalPriceWithTax]\n   */\n  totalPriceWithTax?: Price;\n}\n\n/**\n *\n * An interface representing PaymentDetails.\n */\nexport interface PaymentDetails {\n  /**\n   * @member {string} [accountHolderName]\n   */\n  accountHolderName?: string;\n  /**\n   * @member {Address} [billingAddress]\n   */\n  billingAddress?: Address;\n  /**\n   * @member {string} [cardNumber]\n   */\n  cardNumber?: string;\n  /**\n   * @member {CardType} [cardType]\n   */\n  cardType?: CardType;\n  /**\n   * @member {string} [cvn]\n   */\n  cvn?: string;\n  /**\n   * @member {boolean} [defaultPayment]\n   */\n  defaultPayment?: boolean;\n  /**\n   * @member {string} [expiryMonth]\n   */\n  expiryMonth?: string;\n  /**\n   * @member {string} [expiryYear]\n   */\n  expiryYear?: string;\n  /**\n   * @member {string} [id]\n   */\n  id?: string;\n  /**\n   * @member {string} [issueNumber]\n   */\n  issueNumber?: string;\n  /**\n   * @member {boolean} [saved]\n   */\n  saved?: boolean;\n  /**\n   * @member {string} [startMonth]\n   */\n  startMonth?: string;\n  /**\n   * @member {string} [startYear]\n   */\n  startYear?: string;\n  /**\n   * @member {string} [subscriptionId]\n   */\n  subscriptionId?: string;\n}\n\n/**\n *\n * An interface representing PickupOrderEntryGroup.\n */\nexport interface PickupOrderEntryGroup {\n  /**\n   * @member {PointOfService} [deliveryPointOfService]\n   */\n  deliveryPointOfService?: PointOfService;\n  /**\n   * @member {number} [distance]\n   */\n  distance?: number;\n  /**\n   * @member {OrderEntry[]} [entries]\n   */\n  entries?: OrderEntry[];\n  /**\n   * @member {number} [quantity]\n   */\n  quantity?: number;\n  /**\n   * @member {Price} [totalPriceWithTax]\n   */\n  totalPriceWithTax?: Price;\n}\n\n/**\n *\n * An interface representing Principal.\n */\nexport interface Principal {\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {string} [uid]\n   */\n  uid?: string;\n}\n\n/**\n *\n * An interface representing Cart.\n */\nexport interface Cart {\n  /**\n   * @member {PromotionResult[]} [appliedOrderPromotions]\n   */\n  appliedOrderPromotions?: PromotionResult[];\n  /**\n   * @member {PromotionResult[]} [appliedProductPromotions]\n   */\n  appliedProductPromotions?: PromotionResult[];\n  /**\n   * @member {Voucher[]} [appliedVouchers]\n   */\n  appliedVouchers?: Voucher[];\n  /**\n   * @member {boolean} [calculated]\n   */\n  calculated?: boolean;\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {Address} [deliveryAddress]\n   */\n  deliveryAddress?: Address;\n  /**\n   * @member {Price} [deliveryCost]\n   */\n  deliveryCost?: Price;\n  /**\n   * @member {number} [deliveryItemsQuantity]\n   */\n  deliveryItemsQuantity?: number;\n  /**\n   * @member {DeliveryMode} [deliveryMode]\n   */\n  deliveryMode?: DeliveryMode;\n  /**\n   * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\n   */\n  deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n  /**\n   * @member {string} [description]\n   */\n  description?: string;\n  /**\n   * @member {OrderEntry[]} [entries]\n   */\n  entries?: OrderEntry[];\n  /**\n   * @member {Date} [expirationTime]\n   */\n  expirationTime?: Date;\n  /**\n   * @member {string} [guid]\n   */\n  guid?: string;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {boolean} [net]\n   */\n  net?: boolean;\n  /**\n   * @member {Price} [orderDiscounts]\n   */\n  orderDiscounts?: Price;\n  /**\n   * @member {PaymentDetails} [paymentInfo]\n   */\n  paymentInfo?: PaymentDetails;\n  /**\n   * @member {number} [pickupItemsQuantity]\n   */\n  pickupItemsQuantity?: number;\n  /**\n   * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\n   */\n  pickupOrderGroups?: PickupOrderEntryGroup[];\n  /**\n   * @member {PromotionResult[]} [potentialOrderPromotions]\n   */\n  potentialOrderPromotions?: PromotionResult[];\n  /**\n   * @member {PromotionResult[]} [potentialProductPromotions]\n   */\n  potentialProductPromotions?: PromotionResult[];\n  /**\n   * @member {Price} [productDiscounts]\n   */\n  productDiscounts?: Price;\n  /**\n   * @member {Date} [saveTime]\n   */\n  saveTime?: Date;\n  /**\n   * @member {Principal} [savedBy]\n   */\n  savedBy?: Principal;\n  /**\n   * @member {string} [site]\n   */\n  site?: string;\n  /**\n   * @member {string} [store]\n   */\n  store?: string;\n  /**\n   * @member {Price} [subTotal]\n   */\n  subTotal?: Price;\n  /**\n   * @member {Price} [totalDiscounts]\n   */\n  totalDiscounts?: Price;\n  /**\n   * @member {number} [totalItems]\n   */\n  totalItems?: number;\n  /**\n   * @member {Price} [totalPrice]\n   */\n  totalPrice?: Price;\n  /**\n   * @member {Price} [totalPriceWithTax]\n   */\n  totalPriceWithTax?: Price;\n  /**\n   * @member {Price} [totalTax]\n   */\n  totalTax?: Price;\n  /**\n   * @member {number} [totalUnitCount]\n   */\n  totalUnitCount?: number;\n  /**\n   * @member {Principal} [user]\n   */\n  user?: Principal;\n}\n\n/**\n *\n * An interface representing CartList.\n */\nexport interface CartList {\n  /**\n   * @member {Cart[]} [carts]\n   */\n  carts?: Cart[];\n}\n\n/**\n *\n * An interface representing CartModification.\n */\nexport interface CartModification {\n  /**\n   * @member {boolean} [deliveryModeChanged]\n   */\n  deliveryModeChanged?: boolean;\n  /**\n   * @member {OrderEntry} [entry]\n   */\n  entry?: OrderEntry;\n  /**\n   * @member {number} [quantity]\n   */\n  quantity?: number;\n  /**\n   * @member {number} [quantityAdded]\n   */\n  quantityAdded?: number;\n  /**\n   * @member {string} [statusCode]\n   */\n  statusCode?: string;\n  /**\n   * @member {string} [statusMessage]\n   */\n  statusMessage?: string;\n}\n\n/**\n *\n * An interface representing CategoryHierarchy.\n */\nexport interface CategoryHierarchy {\n  /**\n   * @member {string} [id]\n   */\n  id?: string;\n  /**\n   * @member {Date} [lastModified]\n   */\n  lastModified?: Date;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {CategoryHierarchy[]} [subcategories]\n   */\n  subcategories?: CategoryHierarchy[];\n  /**\n   * @member {string} [url]\n   */\n  url?: string;\n}\n\n/**\n *\n * An interface representing CatalogVersion.\n */\nexport interface CatalogVersion {\n  /**\n   * @member {CategoryHierarchy[]} [categories]\n   */\n  categories?: CategoryHierarchy[];\n  /**\n   * @member {string} [id]\n   */\n  id?: string;\n  /**\n   * @member {Date} [lastModified]\n   */\n  lastModified?: Date;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {string} [url]\n   */\n  url?: string;\n}\n\n/**\n *\n * An interface representing Catalog.\n */\nexport interface Catalog {\n  /**\n   * @member {CatalogVersion[]} [catalogVersions]\n   */\n  catalogVersions?: CatalogVersion[];\n  /**\n   * @member {string} [id]\n   */\n  id?: string;\n  /**\n   * @member {Date} [lastModified]\n   */\n  lastModified?: Date;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {string} [url]\n   */\n  url?: string;\n}\n\n/**\n *\n * An interface representing CatalogList.\n */\nexport interface CatalogList {\n  /**\n   * @member {Catalog[]} [catalogs]\n   */\n  catalogs?: Catalog[];\n}\n\n/**\n *\n * An interface representing ComponentIDList.\n */\nexport interface ComponentIDList {\n  /**\n   * @member {string[]} [idList]\n   */\n  idList?: string[];\n}\n\n/**\n *\n * An interface representing ConsignmentEntry.\n */\nexport interface ConsignmentEntry {\n  /**\n   * @member {OrderEntry} [orderEntry]\n   */\n  orderEntry?: OrderEntry;\n  /**\n   * @member {number} [quantity]\n   */\n  quantity?: number;\n  /**\n   * @member {number} [shippedQuantity]\n   */\n  shippedQuantity?: number;\n}\n\n/**\n *\n * An interface representing Consignment.\n */\nexport interface Consignment {\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {PointOfService} [deliveryPointOfService]\n   */\n  deliveryPointOfService?: PointOfService;\n  /**\n   * @member {ConsignmentEntry[]} [entries]\n   */\n  entries?: ConsignmentEntry[];\n  /**\n   * @member {Address} [shippingAddress]\n   */\n  shippingAddress?: Address;\n  /**\n   * @member {string} [status]\n   */\n  status?: string;\n  /**\n   * @member {Date} [statusDate]\n   */\n  statusDate?: Date;\n  /**\n   * @member {string} [trackingID]\n   */\n  trackingID?: string;\n}\n\n/**\n *\n * An interface representing CountryList.\n */\nexport interface CountryList {\n  /**\n   * @member {Country[]} [countries]\n   */\n  countries?: Country[];\n}\n\n/**\n *\n * An interface representing CurrencyList.\n */\nexport interface CurrencyList {\n  /**\n   * @member {Currency[]} [currencies]\n   */\n  currencies?: Currency[];\n}\n\n/**\n *\n * An interface representing DeliveryModeList.\n */\nexport interface DeliveryModeList {\n  /**\n   * @member {DeliveryMode[]} [deliveryModes]\n   */\n  deliveryModes?: DeliveryMode[];\n}\n\n/**\n *\n * An interface representing FacetValue.\n */\nexport interface FacetValue {\n  /**\n   * @member {number} [count]\n   */\n  count?: number;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {SearchState} [query]\n   */\n  query?: SearchState;\n  /**\n   * @member {boolean} [selected]\n   */\n  selected?: boolean;\n}\n\n/**\n *\n * An interface representing Facet.\n */\nexport interface Facet {\n  /**\n   * @member {boolean} [category]\n   */\n  category?: boolean;\n  /**\n   * @member {boolean} [multiSelect]\n   */\n  multiSelect?: boolean;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {number} [priority]\n   */\n  priority?: number;\n  /**\n   * @member {FacetValue[]} [topValues]\n   */\n  topValues?: FacetValue[];\n  /**\n   * @member {FacetValue[]} [values]\n   */\n  values?: FacetValue[];\n  /**\n   * @member {boolean} [visible]\n   */\n  visible?: boolean;\n}\n\n/**\n *\n * An interface representing LanguageList.\n */\nexport interface LanguageList {\n  /**\n   * @member {Language[]} [languages]\n   */\n  languages?: Language[];\n}\n\n/**\n *\n * An interface representing Pagination.\n * Pagination info\n *\n */\nexport interface Pagination {\n  /**\n   * @member {number} [count] Number of elements on this page\n   */\n  count?: number;\n  /**\n   * @member {number} [page] Current page number\n   */\n  page?: number;\n  /**\n   * @member {number} [totalCount] Total number of elements\n   */\n  totalCount?: number;\n  /**\n   * @member {number} [totalPages] Total number of pages\n   */\n  totalPages?: number;\n}\n\n/**\n *\n * An interface representing Sort.\n * Sort option\n *\n */\nexport interface Sort {\n  /**\n   * @member {boolean} [asc]\n   */\n  asc?: boolean;\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n}\n\n/**\n *\n * An interface representing ListAdaptedComponents.\n */\nexport interface ListAdaptedComponents {\n  /**\n   * @member {any[]} [components]\n   */\n  components?: any[];\n  /**\n   * @member {Pagination} [pagination]\n   */\n  pagination?: Pagination;\n  /**\n   * @member {Sort[]} [sorts]\n   */\n  sorts?: Sort[];\n}\n\n/**\n *\n * An interface representing MemberList.\n */\nexport interface MemberList {\n  /**\n   * @member {Principal[]} [members]\n   */\n  members?: Principal[];\n}\n\n/**\n *\n * An interface representing OrderEntryList.\n */\nexport interface OrderEntryList {\n  /**\n   * @member {OrderEntry[]} [orderEntries]\n   */\n  orderEntries?: OrderEntry[];\n}\n\n/**\n *\n * An interface representing OrderHistory.\n */\nexport interface OrderHistory {\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {string} [guid]\n   */\n  guid?: string;\n  /**\n   * @member {Date} [placed]\n   */\n  placed?: Date;\n  /**\n   * @member {string} [status]\n   */\n  status?: string;\n  /**\n   * @member {string} [statusDisplay]\n   */\n  statusDisplay?: string;\n  /**\n   * @member {Price} [total]\n   */\n  total?: Price;\n}\n\n/**\n *\n * An interface representing PaginationModel.\n */\nexport interface PaginationModel {\n  /**\n   * @member {number} [currentPage]\n   */\n  currentPage?: number;\n  /**\n   * @member {number} [pageSize]\n   */\n  pageSize?: number;\n  /**\n   * @member {string} [sort]\n   */\n  sort?: string;\n  /**\n   * @member {number} [totalPages]\n   */\n  totalPages?: number;\n  /**\n   * @member {number} [totalResults]\n   */\n  totalResults?: number;\n}\n\n/**\n *\n * An interface representing SortModel.\n */\nexport interface SortModel {\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {boolean} [selected]\n   */\n  selected?: boolean;\n}\n\n/**\n *\n * An interface representing OrderHistoryList.\n */\nexport interface OrderHistoryList {\n  /**\n   * @member {OrderHistory[]} [orders]\n   */\n  orders?: OrderHistory[];\n  /**\n   * @member {PaginationModel} [pagination]\n   */\n  pagination?: PaginationModel;\n  /**\n   * @member {SortModel[]} [sorts]\n   */\n  sorts?: SortModel[];\n}\n\n/**\n *\n * An interface representing OrderStatusUpdateElement.\n */\nexport interface OrderStatusUpdateElement {\n  /**\n   * @member {string} [baseSiteId]\n   */\n  baseSiteId?: string;\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {string} [status]\n   */\n  status?: string;\n}\n\n/**\n *\n * An interface representing OrderStatusUpdateElementList.\n */\nexport interface OrderStatusUpdateElementList {\n  /**\n   * @member {OrderStatusUpdateElement[]} [orderStatusUpdateElements]\n   */\n  orderStatusUpdateElements?: OrderStatusUpdateElement[];\n}\n\n/**\n *\n * An interface representing Order.\n */\nexport interface Order {\n  /**\n   * @member {PromotionResult[]} [appliedOrderPromotions]\n   */\n  appliedOrderPromotions?: PromotionResult[];\n  /**\n   * @member {PromotionResult[]} [appliedProductPromotions]\n   */\n  appliedProductPromotions?: PromotionResult[];\n  /**\n   * @member {Voucher[]} [appliedVouchers]\n   */\n  appliedVouchers?: Voucher[];\n  /**\n   * @member {boolean} [calculated]\n   */\n  calculated?: boolean;\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {Consignment[]} [consignments]\n   */\n  consignments?: Consignment[];\n  /**\n   * @member {Date} [created]\n   */\n  created?: Date;\n  /**\n   * @member {Address} [deliveryAddress]\n   */\n  deliveryAddress?: Address;\n  /**\n   * @member {Price} [deliveryCost]\n   */\n  deliveryCost?: Price;\n  /**\n   * @member {number} [deliveryItemsQuantity]\n   */\n  deliveryItemsQuantity?: number;\n  /**\n   * @member {DeliveryMode} [deliveryMode]\n   */\n  deliveryMode?: DeliveryMode;\n  /**\n   * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\n   */\n  deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n  /**\n   * @member {string} [deliveryStatus]\n   */\n  deliveryStatus?: string;\n  /**\n   * @member {string} [deliveryStatusDisplay]\n   */\n  deliveryStatusDisplay?: string;\n  /**\n   * @member {OrderEntry[]} [entries]\n   */\n  entries?: OrderEntry[];\n  /**\n   * @member {boolean} [guestCustomer]\n   */\n  guestCustomer?: boolean;\n  /**\n   * @member {string} [guid]\n   */\n  guid?: string;\n  /**\n   * @member {boolean} [net]\n   */\n  net?: boolean;\n  /**\n   * @member {Price} [orderDiscounts]\n   */\n  orderDiscounts?: Price;\n  /**\n   * @member {PaymentDetails} [paymentInfo]\n   */\n  paymentInfo?: PaymentDetails;\n  /**\n   * @member {number} [pickupItemsQuantity]\n   */\n  pickupItemsQuantity?: number;\n  /**\n   * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\n   */\n  pickupOrderGroups?: PickupOrderEntryGroup[];\n  /**\n   * @member {Price} [productDiscounts]\n   */\n  productDiscounts?: Price;\n  /**\n   * @member {string} [site]\n   */\n  site?: string;\n  /**\n   * @member {string} [status]\n   */\n  status?: string;\n  /**\n   * @member {string} [statusDisplay]\n   */\n  statusDisplay?: string;\n  /**\n   * @member {string} [store]\n   */\n  store?: string;\n  /**\n   * @member {Price} [subTotal]\n   */\n  subTotal?: Price;\n  /**\n   * @member {Price} [totalDiscounts]\n   */\n  totalDiscounts?: Price;\n  /**\n   * @member {number} [totalItems]\n   */\n  totalItems?: number;\n  /**\n   * @member {Price} [totalPrice]\n   */\n  totalPrice?: Price;\n  /**\n   * @member {Price} [totalPriceWithTax]\n   */\n  totalPriceWithTax?: Price;\n  /**\n   * @member {Price} [totalTax]\n   */\n  totalTax?: Price;\n  /**\n   * @member {OrderEntry[]} [unconsignedEntries]\n   */\n  unconsignedEntries?: OrderEntry[];\n  /**\n   * @member {Principal} [user]\n   */\n  user?: Principal;\n}\n\n/**\n *\n * An interface representing PaymentDetailsList.\n */\nexport interface PaymentDetailsList {\n  /**\n   * @member {PaymentDetails[]} [payments]\n   */\n  payments?: PaymentDetails[];\n}\n\n/**\n *\n * An interface representing PointOfServiceStock.\n */\nexport interface PointOfServiceStock {\n  /**\n   * @member {Address} [address]\n   */\n  address?: Address;\n  /**\n   * @member {string} [description]\n   */\n  description?: string;\n  /**\n   * @member {string} [displayName]\n   */\n  displayName?: string;\n  /**\n   * @member {number} [distanceKm]\n   */\n  distanceKm?: number;\n  /**\n   * @member {{ [propertyName: string]: string }} [features]\n   */\n  features?: { [propertyName: string]: string };\n  /**\n   * @member {string} [formattedDistance]\n   */\n  formattedDistance?: string;\n  /**\n   * @member {GeoPoint} [geoPoint]\n   */\n  geoPoint?: GeoPoint;\n  /**\n   * @member {Image} [mapIcon]\n   */\n  mapIcon?: Image;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {OpeningSchedule} [openingHours]\n   */\n  openingHours?: OpeningSchedule;\n  /**\n   * @member {Stock} [stockInfo]\n   */\n  stockInfo?: Stock;\n  /**\n   * @member {string} [storeContent]\n   */\n  storeContent?: string;\n  /**\n   * @member {Image[]} [storeImages]\n   */\n  storeImages?: Image[];\n  /**\n   * @member {string} [url]\n   */\n  url?: string;\n}\n\n/**\n *\n * An interface representing ProductExpressUpdateElement.\n */\nexport interface ProductExpressUpdateElement {\n  /**\n   * @member {string} [catalogId]\n   */\n  catalogId?: string;\n  /**\n   * @member {string} [catalogVersion]\n   */\n  catalogVersion?: string;\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n}\n\n/**\n *\n * An interface representing ProductExpressUpdateElementList.\n */\nexport interface ProductExpressUpdateElementList {\n  /**\n   * @member {ProductExpressUpdateElement[]} [productExpressUpdateElements]\n   */\n  productExpressUpdateElements?: ProductExpressUpdateElement[];\n}\n\n/**\n *\n * An interface representing ProductList.\n */\nexport interface ProductList {\n  /**\n   * @member {string} [catalog]\n   */\n  catalog?: string;\n  /**\n   * @member {number} [currentPage]\n   */\n  currentPage?: number;\n  /**\n   * @member {Product[]} [products]\n   */\n  products?: Product[];\n  /**\n   * @member {number} [totalPageCount]\n   */\n  totalPageCount?: number;\n  /**\n   * @member {number} [totalProductCount]\n   */\n  totalProductCount?: number;\n  /**\n   * @member {string} [version]\n   */\n  version?: string;\n}\n\n/**\n *\n * An interface representing ProductReferenceList.\n */\nexport interface ProductReferenceList {\n  /**\n   * @member {ProductReference[]} [references]\n   */\n  references?: ProductReference[];\n}\n\n/**\n *\n * An interface representing SpellingSuggestion.\n */\nexport interface SpellingSuggestion {\n  /**\n   * @member {string} [query]\n   */\n  query?: string;\n  /**\n   * @member {string} [suggestion]\n   */\n  suggestion?: string;\n}\n\n/**\n *\n * An interface representing ProductSearchPage.\n */\nexport interface ProductSearchPage {\n  /**\n   * @member {Breadcrumb[]} [breadcrumbs]\n   */\n  breadcrumbs?: Breadcrumb[];\n  /**\n   * @member {string} [categoryCode]\n   */\n  categoryCode?: string;\n  /**\n   * @member {SearchState} [currentQuery]\n   */\n  currentQuery?: SearchState;\n  /**\n   * @member {Facet[]} [facets]\n   */\n  facets?: Facet[];\n  /**\n   * @member {string} [freeTextSearch]\n   */\n  freeTextSearch?: string;\n  /**\n   * @member {string} [keywordRedirectUrl]\n   */\n  keywordRedirectUrl?: string;\n  /**\n   * @member {PaginationModel} [pagination]\n   */\n  pagination?: PaginationModel;\n  /**\n   * @member {Product[]} [products]\n   */\n  products?: Product[];\n  /**\n   * @member {SortModel[]} [sorts]\n   */\n  sorts?: SortModel[];\n  /**\n   * @member {SpellingSuggestion} [spellingSuggestion]\n   */\n  spellingSuggestion?: SpellingSuggestion;\n}\n\n/**\n *\n * An interface representing PromotionList.\n */\nexport interface PromotionList {\n  /**\n   * @member {Promotion[]} [promotions]\n   */\n  promotions?: Promotion[];\n}\n\n/**\n *\n * An interface representing PromotionResultList.\n */\nexport interface PromotionResultList {\n  /**\n   * @member {PromotionResult[]} [promotions]\n   */\n  promotions?: PromotionResult[];\n}\n\n/**\n *\n * An interface representing ReviewList.\n */\nexport interface ReviewList {\n  /**\n   * @member {Review[]} [reviews]\n   */\n  reviews?: Review[];\n}\n\n/**\n *\n * An interface representing SaveCartResult.\n */\nexport interface SaveCartResult {\n  /**\n   * @member {Cart} [savedCartData]\n   */\n  savedCartData?: Cart;\n}\n\n/**\n *\n * An interface representing StoreFinderSearchPage.\n */\nexport interface StoreFinderSearchPage {\n  /**\n   * @member {number} [boundEastLongitude]\n   */\n  boundEastLongitude?: number;\n  /**\n   * @member {number} [boundNorthLatitude]\n   */\n  boundNorthLatitude?: number;\n  /**\n   * @member {number} [boundSouthLatitude]\n   */\n  boundSouthLatitude?: number;\n  /**\n   * @member {number} [boundWestLongitude]\n   */\n  boundWestLongitude?: number;\n  /**\n   * @member {string} [locationText]\n   */\n  locationText?: string;\n  /**\n   * @member {PaginationModel} [pagination]\n   */\n  pagination?: PaginationModel;\n  /**\n   * @member {SortModel[]} [sorts]\n   */\n  sorts?: SortModel[];\n  /**\n   * @member {number} [sourceLatitude]\n   */\n  sourceLatitude?: number;\n  /**\n   * @member {number} [sourceLongitude]\n   */\n  sourceLongitude?: number;\n  /**\n   * @member {PointOfService[]} [stores]\n   */\n  stores?: PointOfService[];\n}\n\n/**\n *\n * An interface representing StoreFinderStockSearchPage.\n */\nexport interface StoreFinderStockSearchPage {\n  /**\n   * @member {number} [boundEastLongitude]\n   */\n  boundEastLongitude?: number;\n  /**\n   * @member {number} [boundNorthLatitude]\n   */\n  boundNorthLatitude?: number;\n  /**\n   * @member {number} [boundSouthLatitude]\n   */\n  boundSouthLatitude?: number;\n  /**\n   * @member {number} [boundWestLongitude]\n   */\n  boundWestLongitude?: number;\n  /**\n   * @member {string} [locationText]\n   */\n  locationText?: string;\n  /**\n   * @member {PaginationModel} [pagination]\n   */\n  pagination?: PaginationModel;\n  /**\n   * @member {Product} [product]\n   */\n  product?: Product;\n  /**\n   * @member {SortModel[]} [sorts]\n   */\n  sorts?: SortModel[];\n  /**\n   * @member {number} [sourceLatitude]\n   */\n  sourceLatitude?: number;\n  /**\n   * @member {number} [sourceLongitude]\n   */\n  sourceLongitude?: number;\n  /**\n   * @member {PointOfServiceStock[]} [stores]\n   */\n  stores?: PointOfServiceStock[];\n}\n\n/**\n *\n * An interface representing Suggestion.\n */\nexport interface Suggestion {\n  /**\n   * @member {string} [value]\n   */\n  value?: string;\n}\n\n/**\n *\n * An interface representing SuggestionList.\n */\nexport interface SuggestionList {\n  /**\n   * @member {Suggestion[]} [suggestions]\n   */\n  suggestions?: Suggestion[];\n}\n\n/**\n *\n * An interface representing Title.\n */\nexport interface Title {\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n}\n\n/**\n *\n * An interface representing TitleList.\n */\nexport interface TitleList {\n  /**\n   * @member {Title[]} [titles]\n   */\n  titles?: Title[];\n}\n\n/**\n *\n * An interface representing UserGroup.\n */\nexport interface UserGroup {\n  /**\n   * @member {Principal[]} [members]\n   */\n  members?: Principal[];\n  /**\n   * @member {number} [membersCount]\n   */\n  membersCount?: number;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {UserGroup[]} [subGroups]\n   */\n  subGroups?: UserGroup[];\n  /**\n   * @member {string} [uid]\n   */\n  uid?: string;\n}\n\n/**\n *\n * An interface representing UserGroupList.\n */\nexport interface UserGroupList {\n  /**\n   * @member {number} [currentPage]\n   */\n  currentPage?: number;\n  /**\n   * @member {number} [numberOfPages]\n   */\n  numberOfPages?: number;\n  /**\n   * @member {number} [pageSize]\n   */\n  pageSize?: number;\n  /**\n   * @member {number} [totalNumber]\n   */\n  totalNumber?: number;\n  /**\n   * @member {UserGroup[]} [userGroups]\n   */\n  userGroups?: UserGroup[];\n}\n\n/**\n *\n * An interface representing UserSignUp.\n */\nexport interface UserSignUp {\n  /**\n   * @member {string} [firstName]\n   */\n  firstName?: string;\n  /**\n   * @member {string} [lastName]\n   */\n  lastName?: string;\n  /**\n   * @member {string} [password]\n   */\n  password?: string;\n  /**\n   * @member {string} [titleCode]\n   */\n  titleCode?: string;\n  /**\n   * @member {string} [uid]\n   */\n  uid?: string;\n}\n\n/**\n *\n * An interface representing VoucherList.\n */\nexport interface VoucherList {\n  /**\n   * @member {Voucher[]} [vouchers]\n   */\n  vouchers?: Voucher[];\n}\n\n/**\n * Defines values for PriceType.\n * Possible values include: 'BUY', 'FROM'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: PriceType = <PriceType>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum PriceType {\n  BUY = 'BUY',\n  FROM = 'FROM'\n}\n\n/**\n * Defines values for ImageType.\n * Possible values include: 'PRIMARY', 'GALLERY'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: ImageType = <ImageType>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum ImageType {\n  PRIMARY = 'PRIMARY',\n  GALLERY = 'GALLERY'\n}\n\n/**\n * Defines values for Fields.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields = <Fields>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields1.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields1 = <Fields1>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields1 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields2.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields2 = <Fields2>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields2 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields3.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields3 = <Fields3>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields3 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields4.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields4 = <Fields4>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields4 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields5.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields5 = <Fields5>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields5 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields6.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields6 = <Fields6>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields6 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for PageType.\n * Possible values include: 'ContentPage', 'ProductPage', 'CategoryPage',\n * 'CatalogPage'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: PageType = <PageType>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum PageType {\n  CONTENT_PAGE = 'ContentPage',\n  PRODUCT_PAGE = 'ProductPage',\n  CATEGORY_PAGE = 'CategoryPage',\n  CATALOG_PAGE = 'CatalogPage'\n}\n\n/**\n * Defines values for Fields7.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields7 = <Fields7>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields7 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields8.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields8 = <Fields8>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields8 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields9.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields9 = <Fields9>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields9 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields10.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields10 = <Fields10>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields10 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields11.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields11 = <Fields11>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields11 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields12.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields12 = <Fields12>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields12 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields13.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields13 = <Fields13>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields13 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields14.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields14 = <Fields14>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields14 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields15.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields15 = <Fields15>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields15 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields16.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields16 = <Fields16>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields16 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for SortEnum.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: SortEnum = <SortEnum>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum SortEnum {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields17.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields17 = <Fields17>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields17 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields18.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields18 = <Fields18>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields18 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields19.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields19 = <Fields19>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields19 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields20.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields20 = <Fields20>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields20 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields21.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields21 = <Fields21>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields21 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields22.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields22 = <Fields22>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields22 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields23.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields23 = <Fields23>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields23 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields24.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields24 = <Fields24>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields24 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields25.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields25 = <Fields25>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields25 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields26.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields26 = <Fields26>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields26 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields27.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields27 = <Fields27>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields27 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields28.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields28 = <Fields28>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields28 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields29.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields29 = <Fields29>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields29 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields30.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields30 = <Fields30>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields30 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields31.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields31 = <Fields31>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields31 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields32.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields32 = <Fields32>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields32 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields33.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields33 = <Fields33>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields33 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields34.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields34 = <Fields34>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields34 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields35.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields35 = <Fields35>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields35 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields36.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields36 = <Fields36>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields36 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields37.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields37 = <Fields37>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields37 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields38.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields38 = <Fields38>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields38 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields39.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields39 = <Fields39>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields39 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields40.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields40 = <Fields40>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields40 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields41.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields41 = <Fields41>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields41 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields42.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields42 = <Fields42>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields42 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields43.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields43 = <Fields43>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields43 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields44.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields44 = <Fields44>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields44 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields45.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields45 = <Fields45>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields45 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields46.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields46 = <Fields46>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields46 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields47.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields47 = <Fields47>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields47 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields48.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields48 = <Fields48>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields48 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields49.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields49 = <Fields49>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields49 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields50.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields50 = <Fields50>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields50 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields51.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields51 = <Fields51>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields51 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields52.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields52 = <Fields52>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields52 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields53.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields53 = <Fields53>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields53 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields54.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields54 = <Fields54>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields54 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields55.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields55 = <Fields55>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields55 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields56.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields56 = <Fields56>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields56 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields57.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields57 = <Fields57>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields57 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields58.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields58 = <Fields58>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields58 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields59.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields59 = <Fields59>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields59 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields60.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields60 = <Fields60>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields60 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Fields61.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields61 = <Fields61>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields61 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL'\n}\n\n/**\n * Defines values for Type.\n * Possible values include: 'all', 'product', 'order'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Type = <Type>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Type {\n  All = 'all',\n  Product = 'product',\n  Order = 'order'\n}\n","import { Action } from '@ngrx/store';\nimport { NavigationExtras } from '@angular/router';\n\nexport const GO = '[Router] Go';\nexport const GO_BY_URL = '[Router] Go By Url';\nexport const BACK = '[Router] Back';\nexport const FORWARD = '[Router] Forward';\nexport const SAVE_REDIRECT_URL = '[Router] Save Redirect Url';\nexport const CLEAR_REDIRECT_URL = '[Router] Clear Redirect Url';\n\nexport class Go implements Action {\n  readonly type = GO;\n  constructor(\n    public payload: {\n      path: string[];\n      query?: object;\n      extras?: NavigationExtras;\n    }\n  ) {}\n}\n\nexport class GoByUrl implements Action {\n  readonly type = GO_BY_URL;\n  constructor(public payload: string) {}\n}\n\nexport class Back implements Action {\n  readonly type = BACK;\n}\n\nexport class Forward implements Action {\n  readonly type = FORWARD;\n}\n\nexport class SaveRedirectUrl implements Action {\n  readonly type = SAVE_REDIRECT_URL;\n  constructor(public payload: string) {}\n}\n\nexport class ClearRedirectUrl implements Action {\n  readonly type = CLEAR_REDIRECT_URL;\n}\n\nexport type Actions =\n  | Go\n  | GoByUrl\n  | Back\n  | Forward\n  | SaveRedirectUrl\n  | ClearRedirectUrl;\n","export const ROUTING_FEATURE = 'router';\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  Params\n} from '@angular/router';\nimport {\n  createSelector,\n  createFeatureSelector,\n  ActionReducerMap,\n  MemoizedSelector\n} from '@ngrx/store';\nimport { PageContext } from '../../models/page-context.model';\nimport { PageType } from '../../../occ/occ-models/index';\nimport * as fromNgrxRouter from '@ngrx/router-store';\nimport * as fromActions from '../actions';\nimport { ROUTING_FEATURE } from '../../state';\n\nexport interface RouterState\n  extends fromNgrxRouter.RouterReducerState<ActivatedRouterStateSnapshot> {\n  redirectUrl: string;\n}\n\nexport const initialState: RouterState = {\n  redirectUrl: '',\n  navigationId: 0,\n  state: {\n    url: '',\n    queryParams: {},\n    params: {},\n    context: {\n      id: ''\n    },\n    cmsRequired: false\n  }\n};\n\nexport interface ActivatedRouterStateSnapshot {\n  url: string;\n  queryParams: Params;\n  params: Params;\n  context: PageContext;\n  cmsRequired: boolean;\n}\n\nexport interface State {\n  router: RouterState;\n}\n\nexport function getReducers(): ActionReducerMap<State> {\n  return {\n    router: reducer\n  };\n}\n\nexport function reducer(\n  state: RouterState = initialState,\n  action: any\n): RouterState {\n  switch (action.type) {\n    case fromActions.SAVE_REDIRECT_URL: {\n      return {\n        ...state,\n        redirectUrl: action.payload\n      };\n    }\n    case fromActions.CLEAR_REDIRECT_URL: {\n      return {\n        ...state,\n        redirectUrl: ''\n      };\n    }\n    case fromNgrxRouter.ROUTER_NAVIGATION:\n    case fromNgrxRouter.ROUTER_ERROR:\n    case fromNgrxRouter.ROUTER_CANCEL: {\n      const currentUrl = action.payload.routerState\n        ? action.payload.routerState.url\n        : '';\n      const contextId = action.payload.routerState\n        ? action.payload.routerState.context.id\n        : '';\n      let redirectUrl;\n      if (\n        contextId === 'login' ||\n        contextId === 'register' ||\n        currentUrl === state.redirectUrl\n      ) {\n        redirectUrl = state.redirectUrl;\n      } else {\n        redirectUrl = '';\n      }\n\n      return {\n        redirectUrl: redirectUrl,\n        state: action.payload.routerState,\n        navigationId: action.payload.event.id\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\nexport const reducerToken: InjectionToken<\n  ActionReducerMap<State>\n> = new InjectionToken<ActionReducerMap<State>>('RouterReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers\n};\n\nexport const getRouterFeatureState: MemoizedSelector<\n  any,\n  any\n> = createFeatureSelector<\n  fromNgrxRouter.RouterReducerState<ActivatedRouterStateSnapshot>\n>(ROUTING_FEATURE);\n\nexport const getRouterState: MemoizedSelector<any, any> = createSelector(\n  getRouterFeatureState,\n  (state: any) => state[ROUTING_FEATURE]\n);\n\nexport const getRedirectUrl: MemoizedSelector<any, any> = createSelector(\n  getRouterState,\n  state => state.redirectUrl\n);\n\n/* The serializer is there to parse the RouterStateSnapshot,\nand to reduce the amount of properties to be passed to the reducer.\n */\nexport class CustomSerializer\n  implements\n    fromNgrxRouter.RouterStateSerializer<ActivatedRouterStateSnapshot> {\n  serialize(routerState: RouterStateSnapshot): ActivatedRouterStateSnapshot {\n    const { url } = routerState;\n    const { queryParams } = routerState.root;\n\n    let state: ActivatedRouteSnapshot = routerState.root;\n    while (state.firstChild) {\n      state = state.firstChild;\n    }\n    const { params } = state;\n\n    let cmsRequired = false;\n    if (\n      state.routeConfig &&\n      state.routeConfig.canActivate &&\n      state.routeConfig.canActivate.find(\n        x => x && x.guardName === 'CmsPageGuards'\n      )\n    ) {\n      cmsRequired = true;\n    }\n\n    let context: PageContext;\n    if (params['productCode']) {\n      context = { id: params['productCode'], type: PageType.PRODUCT_PAGE };\n    } else if (params['categoryCode']) {\n      context = { id: params['categoryCode'], type: PageType.CATEGORY_PAGE };\n    } else if (params['brandCode']) {\n      context = { id: params['brandCode'], type: PageType.CATEGORY_PAGE };\n    } else if (params['query']) {\n      context = { id: 'search', type: PageType.CONTENT_PAGE };\n    } else if (state.data.pageLabel !== undefined) {\n      context = { id: state.data.pageLabel, type: PageType.CONTENT_PAGE };\n    } else if (state.url.length > 0) {\n      context = {\n        id: state.url[state.url.length - 1].path,\n        type: PageType.CONTENT_PAGE\n      };\n    } else {\n      context = {\n        id: 'homepage',\n        type: PageType.CONTENT_PAGE\n      };\n    }\n\n    return { url, queryParams, params, context, cmsRequired };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Location } from '@angular/common';\n\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport * as RouterActions from '../actions/router.action';\nimport { Observable } from 'rxjs';\nimport { tap, map } from 'rxjs/operators';\n\n@Injectable()\nexport class RouterEffects {\n  @Effect({ dispatch: false })\n  navigate$: Observable<any> = this.actions$.pipe(\n    ofType(RouterActions.GO),\n    map((action: RouterActions.Go) => action.payload),\n    tap(({ path, query: queryParams, extras }) => {\n      this.router.navigate(path, { queryParams, ...extras });\n    })\n  );\n\n  @Effect({ dispatch: false })\n  navigateBuUrl$: Observable<any> = this.actions$.pipe(\n    ofType(RouterActions.GO_BY_URL),\n    map((action: RouterActions.Go) => action.payload),\n    tap(url => {\n      this.router.navigateByUrl(url);\n    })\n  );\n\n  @Effect({ dispatch: false })\n  navigateBack$: Observable<Action> = this.actions$.pipe(\n    ofType(RouterActions.BACK),\n    tap(() => this.location.back())\n  );\n\n  @Effect({ dispatch: false })\n  navigateForward$: Observable<Action> = this.actions$.pipe(\n    ofType(RouterActions.FORWARD),\n    tap(() => this.location.forward())\n  );\n\n  constructor(\n    private actions$: Actions,\n    private router: Router,\n    private location: Location\n  ) {}\n}\n","import { RouterEffects } from './router.effect';\n\nexport const effects: any[] = [RouterEffects];\n\nexport * from './router.effect';\n","import { RoutesConfig } from '../routes-config';\n\nexport abstract class ConfigurableRoutesConfig {\n  routesConfig?: RoutesConfig;\n}\n","import { HttpClient } from '@angular/common/http';\nimport { ServerConfig } from '../../config/server-config/server-config';\nimport { Injectable } from '@angular/core';\nimport { RoutesConfig } from './routes-config';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { ConfigurableRoutesConfig } from './config/configurable-routes-config';\nimport { retry } from 'rxjs/operators';\n\nconst ENDPOINT_ROUTES_CONFIG = 'routes-config';\n\n@Injectable()\nexport class RoutesConfigLoader {\n  private _routesConfig: RoutesConfig;\n\n  get routesConfig(): RoutesConfig {\n    return this._routesConfig;\n  }\n\n  get endpoint(): string {\n    return (\n      (this.serverConfig.server.baseUrl || '') + '/' + ENDPOINT_ROUTES_CONFIG\n    );\n  }\n\n  constructor(\n    private readonly http: HttpClient,\n    private readonly serverConfig: ServerConfig,\n    private readonly configurableRoutesConfig: ConfigurableRoutesConfig\n  ) {}\n\n  async load(): Promise<void> {\n    const shouldFetch = this.configurableRoutesConfig.routesConfig.fetch;\n    const fetchedRoutesConfig = shouldFetch\n      ? await this.fetch(this.endpoint)\n      : null;\n    this._routesConfig = this.extendStaticWith(fetchedRoutesConfig);\n  }\n\n  private fetch(url: string): Promise<any> {\n    return this.http\n      .get(url)\n      .pipe(retry(2))\n      .toPromise()\n      .catch(() => {\n        throw new Error(`Could not get routes configuration from url ${url}!`);\n      });\n  }\n\n  private extendStaticWith(routesConfig: RoutesConfig): RoutesConfig {\n    const mergedRoutesConfig = deepMerge(\n      {},\n      this.configurableRoutesConfig.routesConfig,\n      routesConfig\n    );\n    return this.extendLanguagesTranslationsWithDefault(mergedRoutesConfig);\n  }\n\n  private extendLanguagesTranslationsWithDefault(\n    routesConfig: RoutesConfig\n  ): RoutesConfig {\n    const defaultTranslations = routesConfig.translations.default;\n\n    Object.keys(routesConfig.translations).forEach(languageCode => {\n      const languageTranslations = routesConfig.translations[languageCode];\n      routesConfig.translations[languageCode] = deepMerge(\n        {},\n        defaultTranslations,\n        languageTranslations\n      );\n    });\n\n    return routesConfig;\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { Routes, Router, Route } from '@angular/router';\nimport { ServerConfig } from '../../config/server-config/server-config';\nimport {\n  RoutesTranslations,\n  RouteTranslation,\n  RoutesConfig\n} from './routes-config';\nimport { RoutesConfigLoader } from './routes-config-loader';\n\ntype ConfigurableRouteKey = 'cxPath' | 'cxRedirectTo';\n\n@Injectable()\nexport class ConfigurableRoutesService {\n  constructor(\n    private config: ServerConfig,\n    private injector: Injector,\n    private routesConfigLoader: RoutesConfigLoader\n  ) {}\n\n  private readonly currentLanguageCode = 'en'; // TODO: hardcoded! should be removed when more languages are supported by localized routes\n\n  private allRoutesTranslations: RoutesConfig['translations'];\n\n  private get currentRoutesTranslations(): RoutesTranslations {\n    return this.allRoutesTranslations[\n      this.currentLanguageCode\n    ] as RoutesTranslations;\n  }\n\n  private initCalled = false; // guard not to call init() more than once\n\n  /**\n   * Initializes service with given translations and translates all existing Routes in the Router.\n   */\n  async init(): Promise<void> {\n    if (!this.initCalled) {\n      this.initCalled = true;\n      await this.routesConfigLoader.load();\n      this.allRoutesTranslations = this.routesConfigLoader.routesConfig.translations;\n      this.translateRouterConfig();\n    }\n  }\n\n  private translateRouterConfig() {\n    // Router could not be injected in constructor due to cyclic dependency with APP_INITIALIZER:\n    const router = this.injector.get(Router);\n\n    let translatedRoutes = this.translateRoutes(\n      router.config,\n      this.currentRoutesTranslations\n    );\n    translatedRoutes = this.moveWildcardRouteToEnd(translatedRoutes);\n\n    router.resetConfig(translatedRoutes);\n  }\n\n  /**\n   * Move the Route with double asterisk (**) to the end of the list.\n   * If there are more Routes with **, only the first will be left and other removed.\n   *\n   * Reason: When some custom Routes are injected after Spartacus' ones,\n   *          then the Spartacus' wildcard Route needs being moved to the end -\n   *          even after custom Routes - to make custom Routes discoverable.\n   *          More than one wildcard Route is a sign of bad config, so redundant copies are removed.\n   */\n  private moveWildcardRouteToEnd(routes: Routes): Routes {\n    const firstWildcardRoute = routes.find(route => route.path === '**');\n    return firstWildcardRoute\n      ? routes.filter(route => route.path !== '**').concat(firstWildcardRoute)\n      : routes;\n  }\n\n  /**\n   * Returns the list of routes translations for given list of nested routes\n   * using given object of routes translations.\n   */\n  getNestedRoutesTranslations(\n    nestedRouteNames: string[],\n    routesTranslations: RoutesTranslations = this.currentRoutesTranslations\n  ): RouteTranslation[] {\n    return this.getNestedRoutesTranslationsRecursive(\n      nestedRouteNames,\n      routesTranslations,\n      []\n    );\n  }\n\n  private getNestedRoutesTranslationsRecursive(\n    nestedRoutesNames: string[],\n    routesTranslations: RoutesTranslations,\n    accResult: RouteTranslation[]\n  ): RouteTranslation[] {\n    if (!nestedRoutesNames.length) {\n      return accResult;\n    }\n    const [routeName, ...remainingRouteNames] = nestedRoutesNames;\n    const translation = this.getRouteTranslation(routeName, routesTranslations);\n    if (!translation) {\n      return null;\n    }\n\n    if (remainingRouteNames.length) {\n      const childrenTranslations = this.getChildrenRoutesTranslations(\n        routeName,\n        routesTranslations\n      );\n      if (!childrenTranslations) {\n        this.warn(\n          `No children routes translations were configured for page '${routeName}' in language '${\n            this.currentLanguageCode\n          }'!`\n        );\n        return null;\n      }\n\n      return this.getNestedRoutesTranslationsRecursive(\n        remainingRouteNames,\n        childrenTranslations,\n        accResult.concat(translation)\n      );\n    }\n    return accResult.concat(translation);\n  }\n\n  private getChildrenRoutesTranslations(\n    routeName: string,\n    routesTranslations: RoutesTranslations\n  ): RoutesTranslations {\n    const routeTranslation = this.getRouteTranslation(\n      routeName,\n      routesTranslations\n    );\n    return routeTranslation && routeTranslation.children;\n  }\n\n  private translateRoutes(\n    routes: Routes,\n    routesTranslations: RoutesTranslations\n  ): Routes {\n    const result = [];\n    routes.forEach(route => {\n      const translatedRouteAliases = this.translateRoute(\n        route,\n        routesTranslations\n      );\n      if (route.children && route.children.length) {\n        const translatedChildrenRoutes = this.translateChildrenRoutes(\n          route,\n          routesTranslations\n        );\n        translatedRouteAliases.forEach(translatedRouteAlias => {\n          translatedRouteAlias.children = translatedChildrenRoutes;\n        });\n      }\n      result.push(...translatedRouteAliases);\n    });\n    return result;\n  }\n\n  private translateChildrenRoutes(\n    route: Route,\n    routesTranslations: RoutesTranslations\n  ): Routes {\n    if (this.isConfigurable(route, 'cxPath')) {\n      const routeName = this.getConfigurable(route, 'cxPath');\n      const childrenTranslations = this.getChildrenRoutesTranslations(\n        routeName,\n        routesTranslations\n      );\n\n      if (childrenTranslations === undefined) {\n        this.warn(\n          `Could not translate children routes of route '${routeName}'`,\n          route,\n          `due to undefined 'children' key for '${routeName}' route in routes translations`,\n          routesTranslations\n        );\n        return [];\n      }\n\n      // null switches off the children routes:\n      if (childrenTranslations === null) {\n        return [];\n      }\n      return this.translateRoutes(route.children, childrenTranslations);\n    }\n    return null;\n  }\n\n  private translateRoute(\n    route: Route,\n    routesTranslations: RoutesTranslations\n  ): Routes {\n    if (this.isConfigurable(route, 'cxPath')) {\n      // we assume that 'path' and 'redirectTo' cannot be both configured for one route\n      if (this.isConfigurable(route, 'cxRedirectTo')) {\n        this.warn(\n          `A path should not have set both \"cxPath\" and \"cxRedirectTo\" properties! Route: '${route}`\n        );\n      }\n      return this.translateRoutePath(route, routesTranslations);\n    }\n\n    if (this.isConfigurable(route, 'cxRedirectTo')) {\n      return this.translateRouteRedirectTo(route, routesTranslations);\n    }\n\n    return [route]; // if nothing is configurable, just pass the original route\n  }\n\n  private isConfigurable(route: Route, key: ConfigurableRouteKey): boolean {\n    return !!this.getConfigurable(route, key);\n  }\n\n  private getConfigurable(route: Route, key: ConfigurableRouteKey): string {\n    return route.data && route.data[key];\n  }\n\n  private translateRoutePath(\n    route: Route,\n    routesTranslations: RoutesTranslations\n  ): Route[] {\n    return this.getTranslatedPaths(route, 'cxPath', routesTranslations).map(\n      translatedPath => {\n        return { ...route, path: translatedPath };\n      }\n    );\n  }\n\n  private translateRouteRedirectTo(\n    route: Route,\n    translations: RoutesTranslations\n  ): Route[] {\n    const translatedPaths = this.getTranslatedPaths(\n      route,\n      'cxRedirectTo',\n      translations\n    );\n    return translatedPaths.length\n      ? [{ ...route, redirectTo: translatedPaths[0] }] // take the first path from list by convention\n      : [];\n  }\n\n  private getRouteTranslation(\n    routeName: string,\n    routesTranslations: RoutesTranslations\n  ): RouteTranslation {\n    const result = routesTranslations && routesTranslations[routeName];\n    if (!routesTranslations || result === undefined) {\n      this.warn(\n        `No route translation was configured for page '${routeName}' in language '${\n          this.currentLanguageCode\n        }'!`\n      );\n    }\n    return result;\n  }\n\n  private getTranslatedPaths(\n    route: Route,\n    key: ConfigurableRouteKey,\n    routesTranslations: RoutesTranslations\n  ): string[] {\n    const routeName = this.getConfigurable(route, key);\n    const translation = this.getRouteTranslation(routeName, routesTranslations);\n    if (translation === undefined) {\n      this.warn(\n        `Could not translate key '${key}' of route '${routeName}'`,\n        route,\n        `due to undefined key '${routeName}' in routes translations`,\n        routesTranslations\n      );\n      return [];\n    }\n    if (translation && translation.paths === undefined) {\n      this.warn(\n        `Could not translate key '${key}' of route '${routeName}'`,\n        route,\n        `due to undefined 'paths' key for '${routeName}' route in routes translations`,\n        routesTranslations\n      );\n      return [];\n    }\n\n    // translation or translation.paths can be null - which means switching off the route\n    return (translation && translation.paths) || [];\n  }\n\n  private warn(...args) {\n    if (!this.config.production) {\n      console.warn(...args);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UrlSegmentGroup, PRIMARY_OUTLET } from '@angular/router';\n\n@Injectable()\nexport class UrlParsingService {\n  constructor(private router: Router) {}\n\n  getPrimarySegments(url: string): string[] {\n    const urlTree = this.router.parseUrl(url);\n    return this._getPrimarySegmentsFromUrlTree(urlTree.root);\n  }\n\n  private _getPrimarySegmentsFromUrlTree(tree: UrlSegmentGroup): string[] {\n    const segments = tree.segments.map(s => s.path);\n    const childrenSegments = tree.children[PRIMARY_OUTLET]\n      ? this._getPrimarySegmentsFromUrlTree(tree.children[PRIMARY_OUTLET])\n      : [];\n    return segments.concat(childrenSegments);\n  }\n}\n","export const isParam = (segment: string): boolean => segment.startsWith(':');\n\nexport const getParamName = (segment: string): string => segment.slice(1); // it just removes leading ':'\n\nexport const ensureLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path : '/' + path;\n\nexport const removeLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path.slice(1) : path;\n","import { Injectable } from '@angular/core';\nimport { RoutesConfigLoader } from '../routes-config-loader';\nimport { UrlParsingService } from './url-parsing.service';\nimport { RoutesTranslations } from '../routes-config';\nimport { removeLeadingSlash, isParam, getParamName } from './path-utils';\n\n@Injectable()\nexport class RouteRecognizerService {\n  constructor(\n    private routesConfigLoader: RoutesConfigLoader,\n    private urlParser: UrlParsingService\n  ) {}\n\n  recognizeByDefaultUrl(url: string): { name: string; params: object }[] {\n    url = removeLeadingSlash(url); // url will be compared with paths translations which do not have leading slash\n    const routesTranslations = this.defaultRoutesTranslations;\n    const urlSegments = this.urlParser.getPrimarySegments(url);\n    const recognizedNestedRoutes = this.getNestedRoutesRecursive(\n      urlSegments,\n      routesTranslations,\n      []\n    );\n\n    return recognizedNestedRoutes;\n  }\n\n  private getNestedRoutesRecursive(\n    remainingUrlSegments: string[],\n    routesTranslations: RoutesTranslations,\n    accResult: { name: string; params: object }[]\n  ): { name: string; params: object }[] {\n    if (!routesTranslations) {\n      return remainingUrlSegments.length ? null : accResult;\n    }\n    const routeNames = Object.keys(routesTranslations);\n    const routeNamesLength = routeNames.length;\n\n    for (let i = 0; i < routeNamesLength; i++) {\n      const routeName = routeNames[i];\n      const routeTranslation =\n        routesTranslations && routesTranslations[routeName];\n      const paths = routeTranslation.paths || [];\n      const pathsLength = paths.length;\n      for (let j = 0; j < pathsLength; j++) {\n        const path = paths[j];\n        const pathSegments = this.urlParser.getPrimarySegments(path);\n        const params = this.extractParamsIfPathMatchesUrlPrefix(\n          remainingUrlSegments,\n          pathSegments\n        );\n        // if some path is matching, try to recognize remaining segments\n        if (params) {\n          const result = this.getNestedRoutesRecursive(\n            remainingUrlSegments.slice(pathSegments.length),\n            routeTranslation.children,\n            accResult.concat({ name: routeName, params })\n          );\n          // if remaining segments were successfuly matched, return result. otherwise continue loop for other paths and routes\n          if (result) {\n            return result;\n          }\n        }\n      }\n    }\n\n    return remainingUrlSegments.length ? null : accResult;\n  }\n\n  private extractParamsIfPathMatchesUrlPrefix(\n    urlSegments: string[],\n    pathSegments: string[]\n  ): object {\n    const params = {};\n    const pathSegmentsLength = pathSegments.length;\n    const urlSegmentsLength = urlSegments.length;\n    if (urlSegmentsLength < pathSegmentsLength) {\n      return null;\n    }\n\n    for (let i = 0; i < pathSegmentsLength; i++) {\n      const pathSegment = pathSegments[i];\n      const urlSegment = urlSegments[i];\n\n      if (isParam(pathSegment)) {\n        const paramName = getParamName(pathSegment);\n        params[paramName] = urlSegment;\n      } else {\n        if (pathSegment !== urlSegment) {\n          return null;\n        }\n      }\n    }\n    return params;\n  }\n\n  private get defaultRoutesTranslations(): RoutesTranslations {\n    return this.routesConfigLoader.routesConfig.translations\n      .default as RoutesTranslations;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigurableRoutesService } from '../configurable-routes.service';\nimport { RouteRecognizerService } from './route-recognizer.service';\nimport { UrlParsingService } from './url-parsing.service';\nimport { ServerConfig } from '../../../config/server-config/server-config';\nimport { RouteTranslation, ParamsMapping } from '../routes-config';\nimport { getParamName, isParam } from './path-utils';\nimport {\n  TranslateUrlOptions,\n  TranslateUrlOptionsRoute,\n  TranslateUrlOptionsRouteObject\n} from './translate-url-options';\n\n@Injectable()\nexport class UrlTranslationService {\n  readonly ROOT_URL = ['/'];\n\n  constructor(\n    private configurableRoutesService: ConfigurableRoutesService,\n    private routeRecognizer: RouteRecognizerService,\n    private urlParser: UrlParsingService,\n    private config: ServerConfig\n  ) {}\n\n  translate(options: TranslateUrlOptions): string | string[] {\n    // if options are invalid, return the root url\n    if (!this.validateOptions(options)) {\n      return this.ROOT_URL;\n    }\n\n    if (typeof options.url === 'string') {\n      const recognizedRoute = this.routeRecognizer.recognizeByDefaultUrl(\n        options.url\n      );\n      return recognizedRoute ? this.generateUrl(recognizedRoute) : options.url;\n    }\n\n    return this.generateUrl(options.route);\n  }\n\n  private validateOptions(options: TranslateUrlOptions): boolean {\n    if (!options || typeof options !== 'object') {\n      this.warn(\n        `Incorrect options for translating url. Options have to be an object. Options: `,\n        options\n      );\n      return false;\n    }\n\n    const urlDefined = Boolean(options.url) || options.url === '';\n    const routeDefined = Boolean(options.route);\n    if (!urlDefined && !routeDefined) {\n      this.warn(\n        `Incorrect options for translating url. Options must have 'url' string or 'route' array property. Options: `,\n        options\n      );\n      return false;\n    }\n    if (urlDefined && routeDefined) {\n      this.warn(\n        `Incorrect options for translating url. Options cannot have both 'url' and 'route' property. Options: `,\n        options\n      );\n      return false;\n    }\n    if (urlDefined) {\n      return this.validateOptionsUrl(options.url);\n    }\n    if (routeDefined) {\n      return this.validateOptionsRoute(options.route);\n    }\n    return true;\n  }\n\n  private validateOptionsUrl(url: string): boolean {\n    if (typeof url !== 'string') {\n      this.warn(\n        `Incorrect options for translating url.`,\n        `'url' property should be a string. Url: `,\n        url\n      );\n      return false;\n    }\n    return true;\n  }\n\n  private validateOptionsRoute(\n    nestedRoutes: TranslateUrlOptionsRoute[]\n  ): boolean {\n    if (!Array.isArray(nestedRoutes)) {\n      this.warn(\n        `Incorrect options for translating url.`,\n        `'route' property should be an array. Route: `,\n        nestedRoutes\n      );\n      return false;\n    }\n\n    const length = nestedRoutes.length;\n    if (!length) {\n      this.warn(\n        `Incorrect options for translating url.`,\n        `'route' array should not be empty. Route: `,\n        nestedRoutes\n      );\n      return false;\n    }\n\n    for (let i = 0; i < length; i++) {\n      const nestedRoute = nestedRoutes[i];\n      if (typeof nestedRoute !== 'string' && !nestedRoute.name) {\n        this.warn(\n          `Incorrect options for translating url.`,\n          `'route' array can contain only elements which are string or object with 'name' property. Route: `,\n          nestedRoutes\n        );\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private generateUrl(nestedRoutes: TranslateUrlOptionsRoute[]): string[] {\n    const standarizedNestedRoutes = this.standarizeNestedRoutes(nestedRoutes);\n\n    // if no routes given, return root url\n    if (!standarizedNestedRoutes.length) {\n      return this.ROOT_URL;\n    }\n\n    const {\n      nestedRoutesNames,\n      nestedRoutesParams\n    } = this.splitRoutesNamesAndParams(standarizedNestedRoutes);\n\n    const nestedRoutesTranslations = this.configurableRoutesService.getNestedRoutesTranslations(\n      nestedRoutesNames\n    );\n\n    // if no routes translations were configured, return root url:\n    if (!nestedRoutesTranslations) {\n      return this.ROOT_URL;\n    }\n\n    const [leafNestedRouteTranslation] = nestedRoutesTranslations.slice(-1);\n\n    // if leaf route was disabled in config (set to null), return root url:\n    if (!leafNestedRouteTranslation.paths) {\n      return this.ROOT_URL;\n    }\n\n    // find first path for every nested route that can satisfy it's parameters with given parameters\n    const nestedRoutesPaths = this.findPathsWithFillableParams(\n      nestedRoutesTranslations,\n      nestedRoutesParams\n    );\n\n    // if not every nested route had configured path that can be satisfied with given params, return root url\n    if (!nestedRoutesPaths) {\n      return this.ROOT_URL;\n    }\n\n    const result = this.provideParamsValues(\n      nestedRoutesPaths,\n      nestedRoutesParams,\n      nestedRoutesTranslations.map(\n        routTranslation => routTranslation.paramsMapping\n      )\n    );\n\n    result.unshift(''); // ensure absolute path ( leading '' in path array is equvalent to leading '/' in string)\n    return result;\n  }\n\n  /**\n   * Converts all elements to objects\n   */\n  private standarizeNestedRoutes(\n    nestedRoutes: TranslateUrlOptionsRoute[]\n  ): TranslateUrlOptionsRouteObject[] {\n    return (nestedRoutes || []).map(route =>\n      typeof route === 'string'\n        ? { name: route, params: {} }\n        : { name: route.name, params: route.params || {} }\n    );\n  }\n\n  private splitRoutesNamesAndParams(\n    nestedRoutes: TranslateUrlOptionsRouteObject[]\n  ): {\n    nestedRoutesNames: string[];\n    nestedRoutesParams: object[];\n  } {\n    return (nestedRoutes || []).reduce(\n      ({ nestedRoutesNames, nestedRoutesParams }, route) => ({\n        nestedRoutesNames: [...nestedRoutesNames, route.name],\n        nestedRoutesParams: [...nestedRoutesParams, route.params]\n      }),\n      { nestedRoutesNames: [], nestedRoutesParams: [] }\n    );\n  }\n\n  private provideParamsValues(\n    nestedRoutesPaths: string[],\n    nestedRoutesParams: object[],\n    nestedRoutesParamsMappings: ParamsMapping[]\n  ): string[] {\n    const length = nestedRoutesPaths.length;\n    const result = [];\n    for (let i = 0; i < length; i++) {\n      const path = nestedRoutesPaths[i];\n      const paramsObject = nestedRoutesParams[i];\n      const paramsMapping = nestedRoutesParamsMappings[i];\n      const pathSegments = this.provideParamsValuesForSingleRoute(\n        path,\n        paramsObject,\n        paramsMapping\n      );\n      result.push(...pathSegments);\n    }\n    return result;\n  }\n\n  private provideParamsValuesForSingleRoute(\n    path: string,\n    params: object,\n    paramsMapping: ParamsMapping\n  ): string[] {\n    return this.urlParser.getPrimarySegments(path).map(segment => {\n      if (isParam(segment)) {\n        const paramName = getParamName(segment);\n        const mappedParamName = this.getMappedParamName(\n          paramName,\n          paramsMapping\n        );\n        return params[mappedParamName];\n      }\n      return segment;\n    });\n  }\n\n  private findPathsWithFillableParams(\n    nestedRoutesTranslations: RouteTranslation[],\n    nestedRoutesParams: object[]\n  ): string[] {\n    const length = nestedRoutesTranslations.length;\n    const result = [];\n    for (let i = 0; i < length; i++) {\n      const routeTranslation = nestedRoutesTranslations[i];\n      const paramsObject = nestedRoutesParams[i];\n      const path = this.findPartialPathWithFillableParams(\n        routeTranslation.paths,\n        paramsObject,\n        routeTranslation.paramsMapping\n      );\n      if (path === undefined || path === null) {\n        this.warn(\n          `No configured path matches all its params to given object. `,\n          `Route translation: `,\n          routeTranslation,\n          `(in nested routes translations list`,\n          nestedRoutesTranslations,\n          `). Params object: `,\n          paramsObject,\n          `(in params objects list`,\n          nestedRoutesParams,\n          `)`\n        );\n        return null;\n      }\n      result.push(path);\n    }\n    return result;\n  }\n\n  // find first path that can fill all its params with values from given object\n  private findPartialPathWithFillableParams(\n    paths: string[],\n    params: object,\n    paramsMapping: ParamsMapping\n  ): string {\n    return paths.find(path =>\n      this.getParams(path).every(paramName => {\n        const mappedParamName = this.getMappedParamName(\n          paramName,\n          paramsMapping\n        );\n\n        return params[mappedParamName] !== undefined;\n      })\n    );\n  }\n\n  private getParams(path: string) {\n    return this.urlParser\n      .getPrimarySegments(path)\n      .filter(isParam)\n      .map(getParamName);\n  }\n\n  private getMappedParamName(paramName: string, paramsMapping: object): string {\n    if (paramsMapping) {\n      return paramsMapping[paramName] || paramName;\n    }\n    return paramName;\n  }\n\n  private warn(...args) {\n    if (!this.config.production) {\n      console.warn(...args);\n    }\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WindowRef {\n  readonly document: Document;\n\n  constructor(@Inject(DOCUMENT) document) {\n    // it's a workaround to have document property properly typed\n    // see: https://github.com/angular/angular/issues/15640\n    this.document = document;\n  }\n\n  get nativeWindow(): Window {\n    return typeof window !== 'undefined' ? window : undefined;\n  }\n\n  get sessionStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.sessionStorage : undefined;\n  }\n\n  get localStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.localStorage : undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as fromStore from '../store';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { NavigationExtras } from '@angular/router';\nimport { UrlTranslationService } from '../configurable-routes/url-translation/url-translation.service';\nimport { TranslateUrlOptions } from '../configurable-routes/url-translation/translate-url-options';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RoutingService {\n  constructor(\n    private store: Store<fromStore.RouterState>,\n    private winRef: WindowRef,\n    private urlTranslator: UrlTranslationService\n  ) {}\n\n  /**\n   * Get the current router state\n   */\n  getRouterState(): Observable<any> {\n    return this.store.pipe(select(fromStore.getRouterState));\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param pathOrTranslateUrlOptions: Path or options to translate url\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  go(\n    pathOrTranslateUrlOptions: any[] | TranslateUrlOptions,\n    query?: object,\n    extras?: NavigationExtras\n  ): void {\n    let path: any[];\n\n    if (Array.isArray(pathOrTranslateUrlOptions)) {\n      path = pathOrTranslateUrlOptions;\n    } else {\n      const translateUrlOptions = pathOrTranslateUrlOptions;\n      const translatedPath = this.urlTranslator.translate(translateUrlOptions);\n      path = Array.isArray(translatedPath) ? translatedPath : [translatedPath];\n    }\n    return this.navigate(path, query, extras);\n  }\n\n  /**\n   * Navigation using URL\n   * @param url\n   */\n  goByUrl(url: string) {\n    this.store.dispatch(new fromStore.GoByUrl(url));\n  }\n\n  /**\n   * Navigating back\n   */\n  back(): void {\n    const isLastPageInApp =\n      this.winRef.document.referrer.indexOf(\n        this.winRef.nativeWindow.location.origin\n      ) > -1;\n    if (isLastPageInApp) {\n      this.store.dispatch(new fromStore.Back());\n      return;\n    }\n    this.go(['/']);\n    return;\n  }\n\n  /**\n   * Navigating forward\n   */\n  forward(): void {\n    this.store.dispatch(new fromStore.Forward());\n  }\n\n  /**\n   * Get the redirect url from store\n   */\n  getRedirectUrl(): Observable<string> {\n    return this.store.pipe(select(fromStore.getRedirectUrl));\n  }\n\n  /**\n   * Remove the redirect url from store\n   */\n  clearRedirectUrl(): void {\n    this.store.dispatch(new fromStore.ClearRedirectUrl());\n  }\n\n  /**\n   * Put redirct url into store\n   * @param url: redirect url\n   */\n  saveRedirectUrl(url: string): void {\n    this.store.dispatch(new fromStore.SaveRedirectUrl(url));\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param path\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  private navigate(\n    path: any[],\n    query?: object,\n    extras?: NavigationExtras\n  ): void {\n    this.store.dispatch(\n      new fromStore.Go({\n        path,\n        query,\n        extras\n      })\n    );\n  }\n}\n","import { StorefrontRoutesTranslations } from './storefront-routes-translations';\n\nexport const defaultStorefrontRoutesTranslations: {\n  default?: StorefrontRoutesTranslations;\n  [languageCode: string]: StorefrontRoutesTranslations;\n} = {\n  default: {\n    home: { paths: ['', 'cx-preview'] },\n    cart: { paths: ['cart'] },\n    search: { paths: ['search/:query'] },\n    login: { paths: ['login'] },\n    register: { paths: ['register'] },\n    resetPassword: { paths: ['reset-new-password/:token'] },\n    forgotPassword: { paths: ['reset-password'] },\n    checkout: { paths: ['checkout'] },\n    orderConfirmation: { paths: ['order-confirmation'] },\n    product: {\n      paths: ['product/:productCode'],\n      paramsMapping: { productCode: 'code' }\n    },\n    category: {\n      paths: ['category/:categoryCode'],\n      paramsMapping: { categoryCode: 'code' }\n    },\n    brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n    storeFinder: {\n      paths: ['store-finder'],\n      children: {\n        searchResults: { paths: ['find-stores'] },\n        allStores: { paths: ['view-all-stores'] },\n        listStores: {\n          paths: ['country/:country/region/:region', 'country/:country']\n        },\n        storeDescription: {\n          paths: ['country/:country/region/:region/:store']\n        }\n      }\n    },\n    termsAndConditions: { paths: ['terms-and-conditions'] },\n    contact: { paths: ['contact'] },\n    help: { paths: ['faq'] },\n    sale: { paths: ['sale'] },\n    orders: { paths: ['my-account/orders'] },\n    orderDetails: {\n      paths: ['my-account/orders/:orderCode'],\n      paramsMapping: { orderCode: 'code' }\n    },\n    addressBook: { paths: ['my-account/address-book'] },\n    paymentManagement: { paths: ['my-account/payment-details'] },\n    pageNotFound: { paths: ['**'] }\n  },\n\n  en: {} as any\n};\n","import { ConfigurableRoutesConfig } from './configurable-routes-config';\nimport { defaultStorefrontRoutesTranslations } from './default-storefront-routes-translations';\n\nexport const defaultConfigurableRoutesConfig: ConfigurableRoutesConfig = {\n  routesConfig: {\n    translations: defaultStorefrontRoutesTranslations,\n    fetch: false\n  }\n};\n","import { CommonModule } from '@angular/common';\nimport { NgModule, APP_INITIALIZER } from '@angular/core';\nimport { ConfigurableRoutesService } from './configurable-routes.service';\nimport { RoutesConfigLoader } from './routes-config-loader';\nimport { ConfigModule, Config } from '../../config/config.module';\nimport { ConfigurableRoutesConfig } from './config/configurable-routes-config';\nimport { defaultConfigurableRoutesConfig } from './config/default-configurable-routes-config';\nimport { UrlParsingService } from './url-translation/url-parsing.service';\nimport { RouteRecognizerService } from './url-translation/route-recognizer.service';\nimport { UrlTranslationService } from './url-translation/url-translation.service';\n\nexport function initConfigurableRoutes(\n  service: ConfigurableRoutesService\n): () => Promise<void> {\n  const result = () => service.init(); // workaround for AOT compilation (see https://stackoverflow.com/a/51977115)\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultConfigurableRoutesConfig)\n  ],\n  declarations: [],\n  exports: [],\n  providers: [\n    ConfigurableRoutesService,\n    RoutesConfigLoader,\n    UrlTranslationService,\n    RouteRecognizerService,\n    UrlParsingService,\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initConfigurableRoutes,\n      deps: [ConfigurableRoutesService],\n      multi: true\n    },\n    { provide: ConfigurableRoutesConfig, useExisting: Config }\n  ]\n})\nexport class ConfigurableRoutesModule {}\n","import { NgModule } from '@angular/core';\n\nimport {\n  StoreRouterConnectingModule,\n  RouterStateSerializer\n} from '@ngrx/router-store';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport {\n  reducerToken,\n  CustomSerializer,\n  reducerProvider\n} from './store/reducers/router.reducer';\nimport { effects } from './store/effects/index';\n\nimport { RouterModule } from '@angular/router';\nimport { RoutingService } from './facade/routing.service';\n\nimport { ROUTING_FEATURE } from './state';\nimport { ConfigurableRoutesModule } from './configurable-routes/configurable-routes.module';\n\n@NgModule({\n  imports: [\n    ConfigurableRoutesModule,\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled'\n    }),\n    StoreModule.forFeature(ROUTING_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n    StoreRouterConnectingModule.forRoot({\n      stateKey: ROUTING_FEATURE // name of reducer key\n    })\n  ],\n  providers: [\n    RoutingService,\n    reducerProvider,\n    {\n      provide: RouterStateSerializer,\n      useClass: CustomSerializer\n    }\n  ]\n})\nexport class RoutingModule {}\n","import { ServerConfig } from '../../config/server-config/server-config';\n\nexport abstract class OccConfig extends ServerConfig {\n  site?: {\n    baseSite?: string;\n    language?: string;\n    currency?: string;\n  };\n}\n","import { OccConfig } from '../../occ/config/occ-config';\n\nexport abstract class AuthConfig extends OccConfig {\n  authentication?: {\n    client_id?: string;\n    client_secret?: string;\n  };\n}\n","import { AuthConfig } from './auth-config';\n\nexport const defaultAuthConfig: AuthConfig = {\n  authentication: {\n    client_id: 'mobile_android',\n    client_secret: 'secret'\n  }\n};\n","import { ClientToken, UserToken } from '../models/token-types.model';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\n\nexport const AUTH_FEATURE = 'auth';\nexport const CLIENT_TOKEN_DATA = '[Auth] Client Token Data';\nexport interface StateWithAuth {\n  [AUTH_FEATURE]: AuthState;\n}\n\nexport interface AuthState {\n  userToken: UserTokenState;\n  clientToken: LoaderState<ClientToken>;\n}\n\nexport interface UserTokenState {\n  token: UserToken;\n}\n","import { CLIENT_TOKEN_DATA } from '../auth-state';\nimport { ClientToken } from '../../models/token-types.model';\nimport {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction\n} from '../../../state/utils/loader/loader.action';\n\nexport const LOAD_CLIENT_TOKEN = '[Token] Create Client Token';\nexport const LOAD_CLIENT_TOKEN_FAIL = '[Token] Create Client Token Fail';\nexport const LOAD_CLIENT_TOKEN_SUCCESS = '[Token] Create Client Token Success';\n\nexport class LoadClientToken extends LoaderLoadAction {\n  readonly type = LOAD_CLIENT_TOKEN;\n  constructor() {\n    super(CLIENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadClientTokenFail extends LoaderFailAction {\n  readonly type = LOAD_CLIENT_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(CLIENT_TOKEN_DATA, payload);\n  }\n}\n\nexport class LoadClientTokenSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_CLIENT_TOKEN_SUCCESS;\n  constructor(public payload: ClientToken) {\n    super(CLIENT_TOKEN_DATA);\n  }\n}\n\nexport type ClientTokenAction =\n  | LoadClientToken\n  | LoadClientTokenFail\n  | LoadClientTokenSuccess;\n","import { Action } from '@ngrx/store';\n\nexport const LOGIN = '[Auth] Login';\nexport const LOGOUT = '[Auth] Logout';\n\nexport class Login implements Action {\n  readonly type = LOGIN;\n}\n\nexport class Logout implements Action {\n  readonly type = LOGOUT;\n}\n\n// action types\nexport type LoginLogoutAction = Login | Logout;\n","import { Action } from '@ngrx/store';\nimport { UserToken } from '../../models/token-types.model';\n\nexport const LOAD_USER_TOKEN = '[Auth] Load User Token';\nexport const LOAD_USER_TOKEN_FAIL = '[Auth] Load User Token Fail';\nexport const LOAD_USER_TOKEN_SUCCESS = '[Auth] Load User Token Success';\nexport const REFRESH_USER_TOKEN = '[Auth] Refresh User Token';\nexport const REFRESH_USER_TOKEN_FAIL = '[Auth] Refresh User Token Fail';\nexport const REFRESH_USER_TOKEN_SUCCESS = '[Auth] Refresh User Token Success';\n\nexport class LoadUserToken implements Action {\n  readonly type = LOAD_USER_TOKEN;\n  constructor(public payload: { userId: string; password: string }) {}\n}\n\nexport class LoadUserTokenFail implements Action {\n  readonly type = LOAD_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadUserTokenSuccess implements Action {\n  readonly type = LOAD_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RefreshUserToken implements Action {\n  readonly type = REFRESH_USER_TOKEN;\n  constructor(public payload: { userId: string; refreshToken: string }) {}\n}\n\nexport class RefreshUserTokenSuccess implements Action {\n  readonly type = REFRESH_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RefreshUserTokenFail implements Action {\n  readonly type = REFRESH_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\n// action types\nexport type UserTokenAction =\n  | LoadUserToken\n  | LoadUserTokenFail\n  | LoadUserTokenSuccess\n  | RefreshUserToken\n  | RefreshUserTokenFail\n  | RefreshUserTokenSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AUTH_FEATURE, AuthState } from '../auth-state';\n\nexport const getAuthState: MemoizedSelector<\n  any,\n  AuthState\n> = createFeatureSelector<AuthState>(AUTH_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\n\nimport { AuthState, StateWithAuth } from '../auth-state';\nimport { ClientToken } from '../../models/token-types.model';\n\nimport { getAuthState } from './feature.selector';\n\nexport const getClientTokenState: MemoizedSelector<\n  StateWithAuth,\n  LoaderState<ClientToken>\n> = createSelector(\n  getAuthState,\n  (state: AuthState) => state.clientToken\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { UserToken } from '../../models/token-types.model';\nimport { AuthState, StateWithAuth, UserTokenState } from '../auth-state';\nimport { getAuthState } from './feature.selector';\n\nexport const getUserTokenSelector = (state: UserTokenState) => state.token;\n\nexport const getUserTokenState: MemoizedSelector<\n  StateWithAuth,\n  UserTokenState\n> = createSelector(\n  getAuthState,\n  (state: AuthState) => state.userToken\n);\n\nexport const getUserToken: MemoizedSelector<any, UserToken> = createSelector(\n  getUserTokenState,\n  getUserTokenSelector\n);\n","import { Injectable } from '@angular/core';\n\nimport { select, Store } from '@ngrx/store';\n\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { LoaderState } from '../../state/utils/loader/loader-state';\n\nimport { ClientToken, UserToken } from '../models/token-types.model';\nimport { StateWithAuth } from '../store/auth-state';\nimport { LoadClientToken } from '../store/actions/client-token.action';\nimport { Login, Logout } from '../store/actions/login-logout.action';\nimport {\n  LoadUserToken,\n  RefreshUserToken,\n  LoadUserTokenSuccess\n} from '../store/actions/user-token.action';\nimport { getClientTokenState } from '../store/selectors/client-token.selectors';\nimport { getUserToken } from '../store/selectors/user-token.selectors';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  constructor(private store: Store<StateWithAuth>) {}\n\n  /**\n   * Loads a new user token\n   * @param userId\n   * @param password\n   */\n  authorize(userId: string, password: string): void {\n    this.store.dispatch(\n      new LoadUserToken({\n        userId: userId,\n        password: password\n      })\n    );\n  }\n\n  /**\n   * Returns the user's token\n   */\n  getUserToken(): Observable<UserToken> {\n    return this.store.pipe(select(getUserToken));\n  }\n\n  /**\n   * Refreshes the user token\n   * @param token a user token to refresh\n   */\n  refreshUserToken(token: UserToken): void {\n    this.store.dispatch(\n      new RefreshUserToken({\n        userId: token.userId,\n        refreshToken: token.refresh_token\n      })\n    );\n  }\n\n  /**\n   * Store the provided token\n   */\n  authorizeWithToken(token: UserToken): void {\n    this.store.dispatch(new LoadUserTokenSuccess(token));\n  }\n\n  /**\n   * Login\n   */\n  login(): void {\n    this.store.dispatch(new Login());\n  }\n\n  /**\n   * Logout\n   */\n  logout(): void {\n    this.store.dispatch(new Logout());\n  }\n\n  /**\n   * Returns a client token.  The client token from the store is returned if there is one.\n   * Otherwise, an new token is fetched from the backend and saved in the store.\n   */\n  getClientToken(): Observable<ClientToken> {\n    return this.store.pipe(\n      select(getClientTokenState),\n      filter((state: LoaderState<ClientToken>) => {\n        if (this.isClientTokenLoaded(state)) {\n          return true;\n        } else {\n          if (!state.loading) {\n            this.store.dispatch(new LoadClientToken());\n          }\n          return false;\n        }\n      }),\n      map((state: LoaderState<ClientToken>) => state.value)\n    );\n  }\n\n  /**\n   * Fetches a clientToken from the backend ans saves it in the store where getClientToken can use it.\n   * The new clientToken is returned.\n   */\n  refreshClientToken(): Observable<ClientToken> {\n    this.store.dispatch(new LoadClientToken());\n\n    return this.store.pipe(\n      select(getClientTokenState),\n      filter((state: LoaderState<ClientToken>) =>\n        this.isClientTokenLoaded(state)\n      ),\n      map((state: LoaderState<ClientToken>) => state.value)\n    );\n  }\n\n  protected isClientTokenLoaded(state: LoaderState<ClientToken>): boolean {\n    return (state.success || state.error) && !state.loading;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { AuthService } from '../../facade/auth.service';\nimport { ClientToken } from '../../models/token-types.model';\n\n@Injectable()\nexport class ClientErrorHandlingService {\n  constructor(private authService: AuthService) {}\n\n  public handleExpiredClientToken(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<any> {\n    return this.authService.refreshClientToken().pipe(\n      take(1),\n      switchMap((token: ClientToken) => {\n        return next.handle(this.createNewRequestWithNewToken(request, token));\n      })\n    );\n  }\n\n  private createNewRequestWithNewToken(\n    request: HttpRequest<any>,\n    token: ClientToken\n  ): HttpRequest<any> {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type} ${token.access_token}`\n      }\n    });\n    return request;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { tap, filter, take, switchMap } from 'rxjs/operators';\n\nimport { AuthService } from '../../facade/auth.service';\nimport { UserToken } from '../../models/token-types.model';\nimport { RoutingService } from '../../../routing/facade/routing.service';\n\n@Injectable()\nexport class UserErrorHandlingService {\n  constructor(\n    private authService: AuthService,\n    private routingService: RoutingService\n  ) {}\n\n  public handleExpiredUserToken(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<UserToken>> {\n    return this.handleExpiredToken().pipe(\n      switchMap((token: UserToken) => {\n        return next.handle(this.createNewRequestWithNewToken(request, token));\n      })\n    );\n  }\n\n  public handleExpiredRefreshToken(): void {\n    // Logout user\n    this.authService.logout();\n  }\n\n  private handleExpiredToken(): Observable<UserToken> {\n    let oldToken: UserToken;\n    return this.authService.getUserToken().pipe(\n      tap((token: UserToken) => {\n        if (token.access_token && token.refresh_token && !oldToken) {\n          this.authService.refreshUserToken(token);\n        } else if (!token.access_token && !token.refresh_token) {\n          this.routingService.go({ route: ['login'] });\n        }\n        oldToken = oldToken || token;\n      }),\n      filter(\n        (token: UserToken) => oldToken.access_token !== token.access_token\n      ),\n      take(1)\n    );\n  }\n\n  private createNewRequestWithNewToken(\n    request: HttpRequest<any>,\n    token: UserToken\n  ): HttpRequest<any> {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type} ${token.access_token}`\n      }\n    });\n    return request;\n  }\n}\n","import { HttpHeaders, HttpRequest } from '@angular/common/http';\n\nexport const USE_CLIENT_TOKEN = 'cx-use-client-token';\n\nexport class InterceptorUtil {\n  static createHeader<T>(\n    headerName: string,\n    interceptorParam: T,\n    headers?: HttpHeaders\n  ): HttpHeaders {\n    if (headers) {\n      return headers.append(headerName, JSON.stringify(interceptorParam));\n    }\n    headers = new HttpHeaders().set(\n      headerName,\n      JSON.stringify(interceptorParam)\n    );\n    return headers;\n  }\n\n  static removeHeader(\n    headerName: string,\n    request: HttpRequest<any>\n  ): HttpRequest<any> {\n    const updatedHeaders = request.headers.delete(headerName);\n    return request.clone({ headers: updatedHeaders });\n  }\n\n  static getInterceptorParam<T>(headerName: string, headers: HttpHeaders): T {\n    const rawValue = headers.get(headerName);\n    if (rawValue) {\n      return JSON.parse(rawValue);\n    }\n    return undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpHandler,\n  HttpEvent,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { HttpRequest } from '@angular/common/http';\n\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { AuthService } from '../facade/auth.service';\nimport { ClientErrorHandlingService } from '../services/client-error/client-error-handling.service';\nimport { UserErrorHandlingService } from '../services/user-error/user-error-handling.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN\n} from '../../occ/utils/interceptor-util';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable()\nexport class AuthErrorInterceptor implements HttpInterceptor {\n  constructor(\n    private userErrorHandlingService: UserErrorHandlingService,\n    private clientErrorHandlingService: ClientErrorHandlingService,\n    private authService: AuthService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isClientTokenRequest = this.isClientTokenRequest(request);\n    if (isClientTokenRequest) {\n      request = InterceptorUtil.removeHeader(USE_CLIENT_TOKEN, request);\n    }\n\n    return next.handle(request).pipe(\n      catchError((errResponse: any) => {\n        if (errResponse instanceof HttpErrorResponse) {\n          switch (errResponse.status) {\n            case 401: // Unauthorized\n              if (isClientTokenRequest) {\n                if (this.isExpiredToken(errResponse)) {\n                  return this.clientErrorHandlingService.handleExpiredClientToken(\n                    request,\n                    next\n                  );\n                }\n                // user token request\n              } else {\n                if (this.isExpiredToken(errResponse)) {\n                  return this.userErrorHandlingService.handleExpiredUserToken(\n                    request,\n                    next\n                  );\n                } else if (\n                  // Refresh expired token\n                  // Check that the OAUTH endpoint was called and the error is for refresh token is expired\n                  errResponse.url.indexOf(OAUTH_ENDPOINT) !== -1 &&\n                  errResponse.error.error === 'invalid_token'\n                ) {\n                  this.userErrorHandlingService.handleExpiredRefreshToken();\n                  return of();\n                }\n              }\n              break;\n            case 400: // Bad Request\n              if (\n                errResponse.url.indexOf(OAUTH_ENDPOINT) !== -1 &&\n                errResponse.error.error === 'invalid_grant'\n              ) {\n                if (request.body.get('grant_type') === 'refresh_token') {\n                  // refresh token fail, force user logout\n                  this.authService.logout();\n                }\n              }\n              break;\n          }\n        }\n        return throwError(errResponse);\n      })\n    );\n  }\n\n  private isClientTokenRequest(request: HttpRequest<any>): boolean {\n    const isRequestMapping = InterceptorUtil.getInterceptorParam(\n      USE_CLIENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestMapping);\n  }\n\n  private isExpiredToken(resp: HttpErrorResponse): boolean {\n    if (\n      resp.error &&\n      resp.error.errors &&\n      resp.error.errors instanceof Array &&\n      resp.error.errors[0]\n    ) {\n      return resp.error.errors[0].type === 'InvalidTokenError';\n    }\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent\n} from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { AuthConfig } from '../config/auth-config';\nimport { AuthService } from '../facade/auth.service';\nimport {\n  USE_CLIENT_TOKEN,\n  InterceptorUtil\n} from '../../occ/utils/interceptor-util';\nimport { ClientToken } from '../models/token-types.model';\n\n@Injectable()\nexport class ClientTokenInterceptor implements HttpInterceptor {\n  baseReqString =\n    (this.config.server.baseUrl || '') +\n    this.config.server.occPrefix +\n    this.config.site.baseSite;\n\n  constructor(private config: AuthConfig, private authService: AuthService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.getClientToken(request).pipe(\n      take(1),\n      switchMap((token: ClientToken) => {\n        if (token && request.url.indexOf(this.baseReqString) > -1) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`\n            }\n          });\n        }\n        return next.handle(request);\n      })\n    );\n  }\n\n  private getClientToken(request: HttpRequest<any>): Observable<ClientToken> {\n    if (\n      InterceptorUtil.getInterceptorParam(USE_CLIENT_TOKEN, request.headers)\n    ) {\n      return this.authService.getClientToken();\n    }\n    return of(null);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpHandler,\n  HttpEvent,\n  HttpRequest\n} from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\n\nimport { AuthConfig } from '../config/auth-config';\nimport { AuthService } from '../facade/auth.service';\nimport { UserToken } from '../../auth/models/token-types.model';\n\n@Injectable()\nexport class UserTokenInterceptor implements HttpInterceptor {\n  userToken: UserToken;\n  baseReqString =\n    (this.config.server.baseUrl || '') +\n    this.config.server.occPrefix +\n    this.config.site.baseSite;\n\n  constructor(private config: AuthConfig, private authService: AuthService) {\n    this.authService.getUserToken().subscribe((token: UserToken) => {\n      this.userToken = token;\n    });\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (\n      this.userToken &&\n      request.url.indexOf(this.baseReqString) > -1 &&\n      !request.headers.get('Authorization')\n    ) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `${this.userToken.token_type} ${\n            this.userToken.access_token\n          }`\n        }\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { AuthErrorInterceptor } from './auth-error.interceptor';\nimport { ClientTokenInterceptor } from './client-token.interceptor';\nimport { UserTokenInterceptor } from './user-token.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: ClientTokenInterceptor,\n    multi: true\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: UserTokenInterceptor,\n    multi: true\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: AuthErrorInterceptor,\n    multi: true\n  }\n];\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\n\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { AuthConfig } from '../../config/auth-config';\n\nimport { ClientToken } from '../../models/token-types.model';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable()\nexport class ClientAuthenticationTokenService {\n  constructor(private config: AuthConfig, private http: HttpClient) {}\n\n  loadClientAuthenticationToken(): Observable<ClientToken> {\n    const url: string = this.getOAuthEndpoint();\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.client_secret)\n      )\n      .set('grant_type', 'client_credentials');\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded'\n    });\n    return this.http\n      .post<ClientToken>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n\n  private getOAuthEndpoint(): string {\n    return (this.config.server.baseUrl || '') + OAUTH_ENDPOINT;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { throwError, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { AuthConfig } from '../../config/auth-config';\n\nimport { UserToken } from '../../models/token-types.model';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable()\nexport class UserAuthenticationTokenService {\n  constructor(private http: HttpClient, private config: AuthConfig) {}\n\n  loadToken(userId: string, password: string): Observable<UserToken> {\n    const url = this.getOAuthEndpoint();\n    const params = new HttpParams()\n      .set('client_id', this.config.authentication.client_id)\n      .set('client_secret', this.config.authentication.client_secret)\n      .set('grant_type', 'password') // authorization_code, client_credentials, password\n      .set('username', userId)\n      .set('password', password);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded'\n    });\n\n    return this.http\n      .post<UserToken>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  refreshToken(refreshToken: string): Observable<UserToken> {\n    const url = this.getOAuthEndpoint();\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.client_secret)\n      )\n      .set('refresh_token', encodeURI(refreshToken))\n      .set('grant_type', 'refresh_token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded'\n    });\n\n    return this.http\n      .post<UserToken>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  protected getOAuthEndpoint() {\n    return (this.config.server.baseUrl || '') + OAUTH_ENDPOINT;\n  }\n}\n","import { ClientAuthenticationTokenService } from './client-authentication/client-authentication-token.service';\nimport { ClientErrorHandlingService } from './client-error/client-error-handling.service';\nimport { UserAuthenticationTokenService } from './user-authentication/user-authentication-token.service';\nimport { UserErrorHandlingService } from './user-error/user-error-handling.service';\n\nexport const services: any[] = [\n  ClientAuthenticationTokenService,\n  ClientErrorHandlingService,\n  UserAuthenticationTokenService,\n  UserErrorHandlingService\n];\n","import { LoaderState } from './loader-state';\nimport { LoaderAction } from './loader.action';\nimport { Action } from '@ngrx/store';\n\nexport const initialLoaderState: LoaderState<any> = {\n  loading: false,\n  error: false,\n  success: false,\n  value: undefined\n};\n\n/**\n * Higher order reducer that adds generic loading flag to chunk of the state\n *\n * Utilizes \"loader\" meta field of actions to set specific flags for specific\n * action (LOAD, SUCCESS, FAIL, RESET)\n */\nexport function loaderReducer<T>(\n  loadActionType: string,\n  reducer?: (state: T, action: Action) => T\n) {\n  return (\n    state: LoaderState<T> = initialLoaderState,\n    action: LoaderAction\n  ): LoaderState<T> => {\n    if (\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === loadActionType\n    ) {\n      const entity = action.meta.loader;\n\n      if (entity.load) {\n        return {\n          ...state,\n          loading: true,\n          value: reducer ? reducer(state.value, action) : state.value\n        };\n      } else if (entity.error) {\n        return {\n          ...state,\n          loading: false,\n          error: true,\n          success: false,\n          value: reducer ? reducer(state.value, action) : undefined\n        };\n      } else if (entity.success) {\n        return {\n          ...state,\n          value: reducer ? reducer(state.value, action) : action.payload,\n          loading: false,\n          error: false,\n          success: true\n        };\n      } else {\n        // reset state action\n        return {\n          ...initialLoaderState,\n          value: reducer\n            ? reducer(initialLoaderState.value, action)\n            : initialLoaderState.value\n        };\n      }\n    }\n\n    if (reducer) {\n      const newValue = reducer(state.value, action);\n      if (newValue !== state.value) {\n        return { ...state, value: newValue };\n      }\n    }\n    return state;\n  };\n}\n","import * as fromAction from './../actions/user-token.action';\nimport { UserToken } from '../../models/token-types.model';\nimport { UserTokenState } from '../auth-state';\n\nexport const initialState: UserTokenState = {\n  token: <UserToken>{}\n};\n\nexport function reducer(\n  state = initialState,\n  action: fromAction.UserTokenAction\n): UserTokenState {\n  switch (action.type) {\n    case fromAction.LOAD_USER_TOKEN:\n    case fromAction.REFRESH_USER_TOKEN: {\n      return {\n        ...state\n      };\n    }\n\n    case fromAction.LOAD_USER_TOKEN_SUCCESS:\n    case fromAction.REFRESH_USER_TOKEN_SUCCESS: {\n      const token = action.payload;\n\n      return {\n        ...state,\n        token\n      };\n    }\n\n    case fromAction.LOAD_USER_TOKEN_FAIL:\n    case fromAction.REFRESH_USER_TOKEN_FAIL: {\n      return {\n        ...state\n      };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\n\nimport {\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer,\n  Action\n} from '@ngrx/store';\n\nimport { CLIENT_TOKEN_DATA } from '../auth-state';\nimport { AuthState } from '../auth-state';\nimport { LOGOUT } from '../actions/login-logout.action';\nimport { ClientToken } from '../../models/token-types.model';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\n\nimport * as fromUserTokenReducer from './user-token.reducer';\n\nexport function getReducers(): ActionReducerMap<AuthState> {\n  return {\n    userToken: fromUserTokenReducer.reducer,\n    clientToken: loaderReducer<ClientToken>(CLIENT_TOKEN_DATA)\n  };\n}\n\nexport const reducerToken: InjectionToken<\n  ActionReducerMap<AuthState>\n> = new InjectionToken<ActionReducerMap<AuthState>>('AuthReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers\n};\n\nexport function clearAuthState(\n  reducer: ActionReducer<AuthState, Action>\n): ActionReducer<AuthState, Action> {\n  return function(state, action) {\n    if (action.type === LOGOUT) {\n      state = {\n        ...state,\n        userToken: undefined\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearAuthState];\n","import { Injectable } from '@angular/core';\n\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport * as fromActions from './../actions/user-token.action';\nimport { Observable, of } from 'rxjs';\nimport { map, mergeMap, catchError, switchMap } from 'rxjs/operators';\n\nimport { UserToken } from '../../models/token-types.model';\nimport { UserAuthenticationTokenService } from './../../services/user-authentication/user-authentication-token.service';\n\nimport { UserTokenAction } from '../actions/user-token.action';\n@Injectable()\nexport class UserTokenEffects {\n  @Effect()\n  loadUserToken$: Observable<UserTokenAction> = this.actions$.pipe(\n    ofType(fromActions.LOAD_USER_TOKEN),\n    map((action: fromActions.LoadUserToken) => action.payload),\n    mergeMap(({ userId, password }) => {\n      return this.userTokenService.loadToken(userId, password).pipe(\n        map((token: UserToken) => {\n          const date = new Date();\n          date.setSeconds(date.getSeconds() + token.expires_in);\n          token.userId = userId;\n          token.expiration_time = date;\n          return new fromActions.LoadUserTokenSuccess(token);\n        }),\n        catchError(error => of(new fromActions.LoadUserTokenFail(error)))\n      );\n    })\n  );\n\n  @Effect()\n  refreshUserToken$: Observable<UserTokenAction> = this.actions$.pipe(\n    ofType(fromActions.REFRESH_USER_TOKEN),\n    map((action: fromActions.RefreshUserToken) => action.payload),\n    switchMap(({ userId, refreshToken }) => {\n      return this.userTokenService.refreshToken(refreshToken).pipe(\n        map((token: UserToken) => {\n          token.userId = userId;\n          const date = new Date();\n          date.setSeconds(date.getSeconds() + token.expires_in);\n          token.userId = userId;\n          token.expiration_time = date;\n          return new fromActions.RefreshUserTokenSuccess(token);\n        }, catchError(error => of(new fromActions.RefreshUserTokenFail(error))))\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userTokenService: UserAuthenticationTokenService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport { Observable, of } from 'rxjs';\nimport { map, catchError, exhaustMap } from 'rxjs/operators';\n\nimport * as fromActions from './../actions';\nimport { ClientTokenAction } from '../actions/client-token.action';\nimport { ClientToken } from './../../models/token-types.model';\nimport { ClientAuthenticationTokenService } from './../../services/client-authentication/client-authentication-token.service';\n\n@Injectable()\nexport class ClientTokenEffect {\n  @Effect()\n  loadClientToken$: Observable<ClientTokenAction> = this.actions$.pipe(\n    ofType(fromActions.LOAD_CLIENT_TOKEN),\n    exhaustMap(() => {\n      return this.clientAuthenticationTokenService\n        .loadClientAuthenticationToken()\n        .pipe(\n          map((token: ClientToken) => {\n            return new fromActions.LoadClientTokenSuccess(token);\n          }),\n          catchError(error => of(new fromActions.LoadClientTokenFail(error)))\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private clientAuthenticationTokenService: ClientAuthenticationTokenService\n  ) {}\n}\n","import { UserTokenEffects } from './user-token.effect';\nimport { ClientTokenEffect } from './client-token.effect';\n\nexport const effects: any[] = [UserTokenEffects, ClientTokenEffect];\n\nexport * from './user-token.effect';\nexport * from './client-token.effect';\n","export enum StorageSyncType {\n  NO_STORAGE = 'NO_STORAGE',\n  LOCAL_STORAGE = 'LOCAL_STORAGE',\n  SESSION_STORAGE = 'SESSION_STORAGE'\n}\n\nexport abstract class StateConfig {\n  state?: {\n    storageSync?: {\n      type?: StorageSyncType;\n      keys?: any[];\n    };\n    ssrTransfer?: {\n      keys?: object;\n    };\n  };\n}\n","import { ActionReducer, MetaReducer, Action } from '@ngrx/store';\nimport { localStorageSync, LocalStorageConfig } from 'ngrx-store-localstorage';\nimport { WindowRef } from '../../window/window-ref';\nimport { StateConfig, StorageSyncType } from '../config/state-config';\n\nfunction storageConfig(\n  config: StateConfig,\n  winRef: WindowRef\n): LocalStorageConfig {\n  let storage;\n  switch (config.state.storageSync.type) {\n    case StorageSyncType.LOCAL_STORAGE: {\n      storage = winRef.localStorage;\n      break;\n    }\n    case StorageSyncType.SESSION_STORAGE: {\n      storage = winRef.sessionStorage;\n      break;\n    }\n  }\n  return {\n    keys: config.state.storageSync.keys,\n    rehydrate: true,\n    storage: storage ? storage : winRef.sessionStorage\n  };\n}\n\nexport function getStorageSyncReducer(\n  winRef: WindowRef,\n  config?: StateConfig\n): MetaReducer<any, Action> {\n  if (\n    !winRef.nativeWindow ||\n    !config ||\n    !config.state ||\n    !config.state.storageSync ||\n    config.state.storageSync.type === StorageSyncType.NO_STORAGE ||\n    !config.state.storageSync.keys\n  ) {\n    return undefined;\n  }\n\n  const storage = storageConfig(config, winRef);\n\n  return function(\n    reducer: ActionReducer<any, Action>\n  ): ActionReducer<any, Action> {\n    return localStorageSync(storage)(reducer);\n  };\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const META_REDUCER = new InjectionToken('metaReducer');\n\nexport function metaReducersFactory(metaReducers: any[]) {\n  return (metaReducers || []).filter(Boolean);\n}\n","export function getStateSlice(state: any, keys: object): any {\n  return Object.keys(keys).reduce((acc, key) => {\n    const keyValue = keys[key];\n    if (state.hasOwnProperty(key)) {\n      if (typeof keyValue === 'object') {\n        acc[key] = getStateSlice(state[key], keyValue);\n      } else if (keyValue) {\n        acc[key] = state[key];\n      }\n    }\n    return acc;\n  }, {});\n}\n","import {\n  makeStateKey,\n  StateKey,\n  TransferState\n} from '@angular/platform-browser';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { StateConfig } from '../config/state-config';\nimport { getStateSlice } from '../utils/get-state-slice';\n\nexport const INIT_ACTION = '@ngrx/store/init';\nexport const CX_KEY: StateKey<string> = makeStateKey<string>('cx-state');\n\nexport function getTransferStateReducer(\n  platformId,\n  transferState?: TransferState,\n  config?: StateConfig\n) {\n  if (\n    transferState &&\n    config &&\n    config.state &&\n    config.state.ssrTransfer &&\n    config.state.ssrTransfer.keys\n  ) {\n    if (isPlatformBrowser(platformId)) {\n      return getBrowserTransferStateReducer(\n        transferState,\n        config.state.ssrTransfer.keys\n      );\n    } else if (isPlatformServer(platformId)) {\n      return getServerTransferStateReducer(\n        transferState,\n        config.state.ssrTransfer.keys\n      );\n    }\n  }\n\n  return undefined;\n}\n\nexport function getServerTransferStateReducer(\n  transferState: TransferState,\n  keys: object\n) {\n  return function(reducer) {\n    return function(state, action: any) {\n      const newState = reducer(state, action);\n\n      if (newState) {\n        transferState.set(CX_KEY, getStateSlice(newState, keys));\n      }\n\n      return newState;\n    };\n  };\n}\n\nexport function getBrowserTransferStateReducer(\n  transferState: TransferState,\n  keys: any\n) {\n  return function(reducer) {\n    return function(state, action: any) {\n      if (action.type === INIT_ACTION && transferState.hasKey(CX_KEY)) {\n        const transferedState = getStateSlice(\n          transferState.get(CX_KEY, {}),\n          keys\n        );\n        state = deepMerge({}, state, transferedState);\n      }\n      return reducer(state, action);\n    };\n  };\n}\n","import { Optional, PLATFORM_ID, Provider } from '@angular/core';\nimport { getStorageSyncReducer } from './store-sync.reducer';\nimport { Config } from '../../config/config.module';\nimport { WindowRef } from '../../window/window-ref';\nimport { META_REDUCER } from '../meta-reducer';\nimport { getTransferStateReducer } from './transfer-state.reducer';\nimport { TransferState } from '@angular/platform-browser';\n\nexport * from './store-sync.reducer';\nexport * from './transfer-state.reducer';\n\nexport const stateMetaReducers: Provider[] = [\n  {\n    provide: META_REDUCER,\n    useFactory: getStorageSyncReducer,\n    deps: [WindowRef, [new Optional(), Config]],\n    multi: true\n  },\n  {\n    provide: META_REDUCER,\n    useFactory: getTransferStateReducer,\n    deps: [\n      PLATFORM_ID,\n      [new Optional(), TransferState],\n      [new Optional(), Config]\n    ],\n    multi: true\n  }\n];\nexport { getStateSlice } from '../utils/get-state-slice';\n","import { StateConfig, StorageSyncType } from './state-config';\n\nexport const defaultStateConfig: StateConfig = {\n  state: {\n    storageSync: {\n      type: StorageSyncType.SESSION_STORAGE\n    }\n  }\n};\n","import { NgModule, Optional } from '@angular/core';\nimport { META_REDUCERS, StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { ConfigModule } from '../config/config.module';\nimport { stateMetaReducers } from './reducers/index';\nimport { defaultStateConfig } from './config/default-state-config';\nimport { META_REDUCER, metaReducersFactory } from './meta-reducer';\n\n@NgModule({\n  imports: [\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n    ConfigModule.withConfig(defaultStateConfig)\n  ],\n  providers: [\n    ...stateMetaReducers,\n    {\n      provide: META_REDUCERS,\n      useFactory: metaReducersFactory,\n      deps: [[new Optional(), META_REDUCER]]\n    }\n  ]\n})\nexport class StateModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { metaReducers } from './reducers/index';\nimport { AUTH_FEATURE } from './auth-state';\nimport { StateModule } from '../../state/state.module';\nimport { StateConfig } from '../../state/config/state-config';\nimport { ConfigModule } from '../../config/config.module';\n\nexport function authStoreConfigFactory(): StateConfig {\n  // if we want to reuse AUTH_FEATURE const in config, we have to use factory instead of plain object\n  const config = {\n    state: {\n      storageSync: {\n        keys: [{ [AUTH_FEATURE]: ['userToken', 'clientToken'] }]\n      }\n    }\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(AUTH_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n    ConfigModule.withConfigFactory(authStoreConfigFactory)\n  ],\n  providers: [reducerProvider]\n})\nexport class AuthStoreModule {}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { Config, ConfigModule } from '../config/config.module';\nimport { RoutingModule } from '../routing/routing.module';\n\nimport { AuthConfig } from './config/auth-config';\nimport { defaultAuthConfig } from './config/default-auth-config';\nimport { interceptors } from './http-interceptors/index';\nimport { services } from './services/index';\nimport { AuthStoreModule } from './store/auth-store.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    RoutingModule,\n    AuthStoreModule,\n    ConfigModule.withConfig(defaultAuthConfig)\n  ],\n  providers: [...services, { provide: AuthConfig, useExisting: Config }]\n})\nexport class AuthModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: AuthModule,\n      providers: [...interceptors]\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { AuthService } from '../facade/auth.service';\nimport { UserToken } from '../models/token-types.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  static GUARD_NAME = 'AuthGuard';\n\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService\n  ) {}\n\n  canActivate(\n    _route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token: UserToken) => {\n        if (!token.access_token) {\n          this.routingService.go({ route: ['login'] });\n          this.routingService.saveRedirectUrl(state.url);\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { AuthService } from '../facade/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotAuthGuard implements CanActivate {\n  static GUARD_NAME = 'NotAuthGuard';\n\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map(token => {\n        if (token.access_token) {\n          this.routingService.go({ route: ['home'] });\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Cart } from '../../occ/occ-models/index';\n\nexport const ANONYMOUS_USERID = 'anonymous';\n\n@Injectable()\nexport class CartDataService {\n  private _userId = ANONYMOUS_USERID;\n  private _cart: Cart;\n  private _getDetails = false;\n\n  constructor() {}\n\n  get hasCart(): boolean {\n    return !!this._cart;\n  }\n\n  set userId(val) {\n    this._userId = val;\n  }\n\n  set cart(val) {\n    this._cart = val;\n  }\n\n  set getDetails(val) {\n    this._getDetails = val;\n  }\n\n  get userId(): string {\n    return this._userId;\n  }\n\n  get cart(): Cart {\n    return this._cart;\n  }\n\n  get getDetails() {\n    return this._getDetails;\n  }\n\n  get cartId(): string {\n    if (this.hasCart) {\n      return this.userId === ANONYMOUS_USERID ? this.cart.guid : this.cart.code;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Store, select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Cart, OrderEntry } from '../../occ/occ-models/index';\nimport { AuthService, UserToken } from '../../auth/index';\n\nimport * as fromAction from '../store/actions';\nimport * as fromSelector from '../store/selectors';\nimport { ANONYMOUS_USERID, CartDataService } from './cart-data.service';\nimport { StateWithCart } from '../store/cart-state';\n@Injectable()\nexport class CartService {\n  private callback: Function;\n\n  constructor(\n    private store: Store<StateWithCart>,\n    private cartData: CartDataService,\n    private authService: AuthService\n  ) {\n    this.init();\n  }\n\n  getActive(): Observable<Cart> {\n    return this.store.pipe(select(fromSelector.getCartContent));\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.store.pipe(select(fromSelector.getEntries));\n  }\n\n  getCartMergeComplete(): Observable<boolean> {\n    return this.store.pipe(select(fromSelector.getCartMergeComplete));\n  }\n\n  getLoaded(): Observable<boolean> {\n    return this.store.pipe(select(fromSelector.getLoaded));\n  }\n\n  protected init(): void {\n    this.store.pipe(select(fromSelector.getCartContent)).subscribe(cart => {\n      this.cartData.cart = cart;\n      if (this.callback) {\n        this.callback();\n        this.callback = null;\n      }\n    });\n\n    this.authService\n      .getUserToken()\n      .pipe(filter(userToken => this.cartData.userId !== userToken.userId))\n      .subscribe(userToken => {\n        this.setUserId(userToken);\n        this.loadOrMerge();\n      });\n\n    this.refresh();\n  }\n\n  protected setUserId(userToken: UserToken): void {\n    if (Object.keys(userToken).length !== 0) {\n      this.cartData.userId = userToken.userId;\n    } else {\n      this.cartData.userId = ANONYMOUS_USERID;\n    }\n  }\n\n  protected loadOrMerge(): void {\n    this.cartData.getDetails = true;\n    // for login user, whenever there's an existing cart, we will load the user\n    // current cart and merge it into the existing cart\n    if (this.cartData.userId !== ANONYMOUS_USERID) {\n      if (!this.isCreated(this.cartData.cart)) {\n        this.store.dispatch(\n          new fromAction.LoadCart({\n            userId: this.cartData.userId,\n            cartId: 'current'\n          })\n        );\n      } else {\n        this.store.dispatch(\n          new fromAction.MergeCart({\n            userId: this.cartData.userId,\n            cartId: this.cartData.cart.guid\n          })\n        );\n      }\n    }\n  }\n\n  protected refresh(): void {\n    this.store.pipe(select(fromSelector.getRefresh)).subscribe(refresh => {\n      if (refresh) {\n        this.store.dispatch(\n          new fromAction.LoadCart({\n            userId: this.cartData.userId,\n            cartId: this.cartData.cartId,\n            details: true\n          })\n        );\n      }\n    });\n  }\n\n  loadDetails(): void {\n    this.cartData.getDetails = true;\n\n    if (this.cartData.userId !== ANONYMOUS_USERID) {\n      this.store.dispatch(\n        new fromAction.LoadCart({\n          userId: this.cartData.userId,\n          cartId: this.cartData.cartId ? this.cartData.cartId : 'current',\n          details: true\n        })\n      );\n    } else if (this.cartData.cartId) {\n      this.store.dispatch(\n        new fromAction.LoadCart({\n          userId: this.cartData.userId,\n          cartId: this.cartData.cartId,\n          details: true\n        })\n      );\n    }\n  }\n\n  addEntry(productCode: string, quantity: number): void {\n    if (!this.isCreated(this.cartData.cart)) {\n      this.store.dispatch(\n        new fromAction.CreateCart({ userId: this.cartData.userId })\n      );\n      this.callback = function() {\n        this.store.dispatch(\n          new fromAction.AddEntry({\n            userId: this.cartData.userId,\n            cartId: this.cartData.cartId,\n            productCode: productCode,\n            quantity: quantity\n          })\n        );\n      };\n    } else {\n      this.store.dispatch(\n        new fromAction.AddEntry({\n          userId: this.cartData.userId,\n          cartId: this.cartData.cartId,\n          productCode: productCode,\n          quantity: quantity\n        })\n      );\n    }\n  }\n\n  removeEntry(entry: OrderEntry): void {\n    this.store.dispatch(\n      new fromAction.RemoveEntry({\n        userId: this.cartData.userId,\n        cartId: this.cartData.cartId,\n        entry: entry.entryNumber\n      })\n    );\n  }\n\n  updateEntry(entryNumber: string, quantity: number): void {\n    if (+quantity > 0) {\n      this.store.dispatch(\n        new fromAction.UpdateEntry({\n          userId: this.cartData.userId,\n          cartId: this.cartData.cartId,\n          entry: entryNumber,\n          qty: quantity\n        })\n      );\n    } else {\n      this.store.dispatch(\n        new fromAction.RemoveEntry({\n          userId: this.cartData.userId,\n          cartId: this.cartData.cartId,\n          entry: entryNumber\n        })\n      );\n    }\n  }\n\n  getEntry(productCode: string): Observable<OrderEntry> {\n    return this.store.pipe(\n      select(fromSelector.getEntrySelectorFactory(productCode))\n    );\n  }\n\n  isCreated(cart: Cart): boolean {\n    return cart && !!Object.keys(cart).length;\n  }\n\n  isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { CartService } from './cart.service';\nimport { CartDataService } from './cart-data.service';\n\nexport const services: any[] = [CartService, CartDataService];\n\nexport * from './cart.service';\nexport * from './cart-data.service';\n","/**\n * Angular uses the native encodeURIComponent function,\n * but then un-encoded some characters that are allowed\n * to be part of the query according to IETF RFC 3986.\n * So, to make these characters still encoded, this encoder only\n * uses the encodeURIComponent.\n */\nimport { HttpParameterCodec } from '@angular/common/http';\n\nexport class CustomEncoder implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\n","import { throwError, Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { OccConfig } from '../../occ/config/occ-config';\nimport {\n  CartList,\n  Cart,\n  CartModification,\n  Address,\n  DeliveryModeList,\n  PaymentDetails\n} from '../../occ/occ-models/occ.models';\nimport { CustomEncoder } from './custom.encoder';\n\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { catchError, map } from 'rxjs/operators';\n\n// for mini cart\nconst BASIC_PARAMS =\n  'DEFAULT,deliveryItemsQuantity,totalPrice(formattedValue),' +\n  'entries(totalPrice(formattedValue),product(images(FULL)))';\n\n// for cart details page\nconst DETAILS_PARAMS =\n  'DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,' +\n  'entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue)),' +\n  'totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(formattedValue),subTotal(formattedValue),' +\n  'deliveryItemsQuantity,totalTax(formattedValue),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue)';\n\n@Injectable()\nexport class OccCartService {\n  constructor(protected http: HttpClient, protected config: OccConfig) {}\n\n  protected getCartEndpoint(userId: string) {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return (\n      (this.config.server.baseUrl || '') +\n      this.config.server.occPrefix +\n      this.config.site.baseSite +\n      '/' +\n      cartEndpoint\n    );\n  }\n\n  public loadAllCarts(userId: string, details?: boolean): Observable<CartList> {\n    const url = this.getCartEndpoint(userId);\n    const params = details\n      ? new HttpParams({\n          fromString: 'fields=carts(' + DETAILS_PARAMS + ',saveTime)'\n        })\n      : new HttpParams({\n          fromString: 'fields=carts(' + BASIC_PARAMS + ',saveTime)'\n        });\n    return this.http\n      .get<CartList>(url, { params: params })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  public loadCart(\n    userId: string,\n    cartId: string,\n    details?: boolean\n  ): Observable<Cart> {\n    const url = this.getCartEndpoint(userId) + cartId;\n    const params = details\n      ? new HttpParams({\n          fromString: 'fields=' + DETAILS_PARAMS\n        })\n      : new HttpParams({\n          fromString: 'fields=' + BASIC_PARAMS\n        });\n\n    if (cartId === 'current') {\n      return this.loadAllCarts(userId, details).pipe(\n        map(cartsData => {\n          if (cartsData && cartsData.carts) {\n            const activeCart = cartsData.carts.find(cart => {\n              return cart['saveTime'] === undefined;\n            });\n            return activeCart;\n          } else {\n            return null;\n          }\n        })\n      );\n    } else {\n      return this.http\n        .get<Cart>(url, { params: params })\n        .pipe(catchError((error: any) => throwError(error)));\n    }\n  }\n\n  public createCart(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    const url = this.getCartEndpoint(userId);\n    const toAdd = JSON.stringify({});\n    let queryString = 'fields=' + BASIC_PARAMS;\n\n    if (oldCartId) {\n      queryString = queryString + '&oldCartId=' + oldCartId;\n    }\n    if (toMergeCartGuid) {\n      queryString = queryString + '&toMergeCartGuid=' + toMergeCartGuid;\n    }\n    const params = new HttpParams({\n      fromString: queryString\n    });\n\n    return this.http\n      .post<Cart>(url, toAdd, { params: params })\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n\n  public addEntry(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number = 1\n  ): Observable<CartModification> {\n    const toAdd = JSON.stringify({});\n\n    const url = this.getCartEndpoint(userId) + cartId + '/entries';\n\n    const params = new HttpParams({\n      fromString: 'code=' + productCode + '&qty=' + quantity\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded'\n    });\n\n    return this.http\n      .post<CartModification>(url, toAdd, { headers, params })\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n\n  public updateEntry(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    const url =\n      this.getCartEndpoint(userId) + cartId + '/entries/' + entryNumber;\n\n    let queryString = 'qty=' + qty;\n    if (pickupStore) {\n      queryString = queryString + '&pickupStore=' + pickupStore;\n    }\n    const params = new HttpParams({\n      fromString: queryString\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded'\n    });\n\n    return this.http\n      .patch<CartModification>(url, {}, { headers, params })\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n\n  public removeEntry(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    const url =\n      this.getCartEndpoint(userId) + cartId + '/entries/' + entryNumber;\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded'\n    });\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n\n  public createAddressOnCart(\n    userId: string,\n    cartId: string,\n    address: any\n  ): Observable<Address> {\n    return this.http\n      .post<Address>(\n        this.getCartEndpoint(userId) + cartId + '/addresses/delivery',\n        address,\n        {\n          headers: new HttpHeaders().set('Content-Type', 'application/json')\n        }\n      )\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n\n  public setDeliveryAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.http\n      .put(\n        this.getCartEndpoint(userId) + cartId + '/addresses/delivery',\n        {},\n        {\n          params: { addressId: addressId }\n        }\n      )\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n\n  public setDeliveryMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.http\n      .put(\n        this.getCartEndpoint(userId) + cartId + '/deliverymode',\n        {},\n        {\n          params: { deliveryModeId: deliveryModeId }\n        }\n      )\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n\n  public getDeliveryMode(userId: string, cartId: string): Observable<any> {\n    return this.http\n      .get(this.getCartEndpoint(userId) + cartId + '/deliverymode')\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n\n  public getSupportedDeliveryModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryModeList> {\n    return this.http\n      .get<DeliveryModeList>(\n        this.getCartEndpoint(userId) + cartId + '/deliverymodes'\n      )\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n\n  public getPaymentProviderSubInfo(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.http\n      .get(\n        this.getCartEndpoint(userId) +\n          cartId +\n          '/payment/sop/request?responseUrl=sampleUrl'\n      )\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n\n  public createSubWithPaymentProvider(\n    postUrl: string,\n    parameters: any\n  ): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Accept: 'text/html'\n    });\n    let httpParams = new HttpParams({ encoder: new CustomEncoder() });\n    Object.keys(parameters).forEach(key => {\n      httpParams = httpParams.append(key, parameters[key]);\n    });\n\n    return this.http.post(postUrl, httpParams, {\n      headers,\n      responseType: 'text'\n    });\n  }\n\n  public createPaymentDetails(\n    userId: string,\n    cartId: string,\n    parameters: any\n  ): Observable<PaymentDetails> {\n    let httpParams = new HttpParams({ encoder: new CustomEncoder() });\n    Object.keys(parameters).forEach(key => {\n      httpParams = httpParams.append(key, parameters[key]);\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded'\n    });\n\n    return this.http\n      .post<PaymentDetails>(\n        this.getCartEndpoint(userId) + cartId + '/payment/sop/response',\n        httpParams,\n        { headers }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  public setPaymentDetails(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: any\n  ): Observable<any> {\n    return this.http\n      .put(\n        this.getCartEndpoint(userId) + cartId + '/paymentdetails',\n        {},\n        {\n          params: { paymentDetailsId: paymentDetailsId }\n        }\n      )\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n}\n","import { OccConfig } from './occ-config';\n\nexport const defaultOccConfig: OccConfig = {\n  site: {\n    baseSite: 'electronics',\n    language: 'en',\n    currency: 'USD'\n  }\n};\n","import { NgModule } from '@angular/core';\n\nimport { OccConfig } from './config/occ-config';\nimport { Config, ConfigModule } from '../config/config.module';\nimport { defaultOccConfig } from './config/default-occ-config';\n\n@NgModule({\n  imports: [ConfigModule.withConfig(defaultOccConfig)],\n  providers: [{ provide: OccConfig, useExisting: Config }]\n})\nexport class OccModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { OccCartService } from './cart.service';\nimport { OccModule } from '../../occ/occ.module';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, OccModule],\n  providers: [OccCartService]\n})\nexport class CartOccModule {}\n","import * as fromAction from './../actions';\nimport { OrderEntry } from '../../../occ/occ-models/index';\nimport { CartState } from '../cart-state';\n\nexport const initialState: CartState = {\n  content: {},\n  entries: {},\n  refresh: false,\n  cartMergeComplete: false\n};\n\nexport function reducer(\n  state = initialState,\n  action: fromAction.CartAction | fromAction.CartEntryAction\n): CartState {\n  switch (action.type) {\n    case fromAction.MERGE_CART: {\n      return {\n        ...state,\n        cartMergeComplete: false\n      };\n    }\n\n    case fromAction.MERGE_CART_SUCCESS: {\n      return {\n        ...state,\n        cartMergeComplete: true\n      };\n    }\n\n    case fromAction.LOAD_CART_SUCCESS:\n    case fromAction.CREATE_CART_SUCCESS: {\n      const content = { ...action.payload };\n      let entries = {};\n      if (content.entries) {\n        entries = content.entries.reduce(\n          (entryMap: { [code: string]: any }, entry: OrderEntry) => {\n            return {\n              ...entryMap,\n              /*\n              If we refresh the page from cart details page, 2 load cart\n              Actions gets dispatched. One is non-detail, and the second is detailed.\n              In the case where the detailed once get resolved first, we merge the existing\n              data with the new data from the response (to not delete existing detailed data).\n              */\n              [entry.product.code]: state.entries[entry.product.code]\n                ? {\n                    ...state.entries[entry.product.code],\n                    ...entry\n                  }\n                : entry\n            };\n          },\n          {\n            ...entries\n          }\n        );\n        delete content['entries'];\n      }\n      return {\n        ...state,\n        content,\n        entries,\n        refresh: false\n      };\n    }\n\n    case fromAction.REMOVE_ENTRY_SUCCESS:\n    case fromAction.UPDATE_ENTRY_SUCCESS:\n    case fromAction.ADD_ENTRY_SUCCESS: {\n      return {\n        ...state,\n        refresh: true\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducerMap, MetaReducer, ActionReducer } from '@ngrx/store';\nimport { CartsState, CartState, CART_DATA } from './../cart-state';\nimport { reducer as cartReducer } from './cart.reducer';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\n\nexport function getReducers(): ActionReducerMap<CartsState> {\n  return {\n    active: loaderReducer<CartState>(CART_DATA, cartReducer)\n  };\n}\n\nexport const reducerToken: InjectionToken<\n  ActionReducerMap<CartsState>\n> = new InjectionToken<ActionReducerMap<CartsState>>('CartReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers\n};\n\nexport function clearCartState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function(state, action) {\n    if (\n      action.type === '[Auth] Logout' ||\n      action.type === '[Checkout] Place Order Success'\n    ) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearCartState];\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';\n\nimport { throwError, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { OccConfig } from '../../occ/config/occ-config';\nimport { Product, ReviewList, Review } from '../../occ/occ-models/occ.models';\n\nconst ENDPOINT_PRODUCT = 'products';\n\n@Injectable()\nexport class OccProductService {\n  constructor(private http: HttpClient, private config: OccConfig) {}\n\n  protected getProductEndpoint(): string {\n    return (\n      (this.config.server.baseUrl || '') +\n      this.config.server.occPrefix +\n      this.config.site.baseSite +\n      '/' +\n      ENDPOINT_PRODUCT\n    );\n  }\n\n  loadProduct(productCode: string): Observable<Product> {\n    const params = new HttpParams({\n      fromString:\n        'fields=DEFAULT,averageRating,images(FULL),classifications,numberOfReviews'\n    });\n\n    return this.http\n      .get(this.getProductEndpoint() + `/${productCode}`, { params: params })\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n\n  loadProductReviews(\n    productCode: string,\n    maxCount?: number\n  ): Observable<ReviewList> {\n    let url = this.getProductEndpoint() + `/${productCode}/reviews`;\n    if (maxCount && maxCount > 0) {\n      url += `?maxCount=${maxCount}`;\n    }\n\n    return this.http\n      .get(url)\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n\n  public postProductReview(\n    productCode: String,\n    review: any\n  ): Observable<Review> {\n    const url = this.getProductEndpoint() + `/${productCode}/reviews`;\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded'\n    });\n\n    const body = new URLSearchParams();\n    body.append('headline', review.headline);\n    body.append('comment', review.comment);\n    body.append('rating', review.rating.toString());\n    body.append('alias', review.alias);\n\n    return this.http\n      .post(url, body.toString(), { headers })\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\nimport { throwError, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { SearchConfig } from '../model/search-config';\nimport { OccConfig } from '../../occ/config/occ-config';\nimport {\n  SuggestionList,\n  ProductSearchPage\n} from '../../occ/occ-models/occ.models';\n\nconst ENDPOINT_PRODUCT = 'products';\nconst DEFAULT_SEARCH_CONFIG: SearchConfig = {\n  pageSize: 20\n};\n\n@Injectable()\nexport class OccProductSearchService {\n  constructor(private http: HttpClient, private config: OccConfig) {}\n\n  protected getProductEndpoint() {\n    return (\n      (this.config.server.baseUrl || '') +\n      this.config.server.occPrefix +\n      this.config.site.baseSite +\n      '/' +\n      ENDPOINT_PRODUCT\n    );\n  }\n\n  query(\n    fullQuery: string,\n    searchConfig: SearchConfig = DEFAULT_SEARCH_CONFIG\n  ): Observable<ProductSearchPage> {\n    let params = new HttpParams({\n      fromString:\n        '&fields=' +\n        'products(code,name,summary,price(FULL),images(DEFAULT),stock(FULL),averageRating),' +\n        'facets,' +\n        'breadcrumbs,' +\n        'pagination(DEFAULT),' +\n        'sorts(DEFAULT)'\n    });\n    params = params.set('query', fullQuery);\n    if (searchConfig.pageSize) {\n      params = params.set('pageSize', searchConfig.pageSize.toString());\n    }\n    if (searchConfig.currentPage) {\n      params = params.set('currentPage', searchConfig.currentPage.toString());\n    }\n    if (searchConfig.sortCode) {\n      params = params.set('sort', searchConfig.sortCode);\n    }\n\n    return this.http\n      .get(this.getProductEndpoint() + '/search', { params })\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n\n  queryProductSuggestions(\n    term: string,\n    pageSize = 3\n  ): Observable<SuggestionList> {\n    return this.http\n      .get(this.getProductEndpoint() + '/suggestions', {\n        params: new HttpParams()\n          .set('term', term)\n          .set('max', pageSize.toString())\n      })\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { OccProductService } from './product.service';\nimport { OccProductSearchService } from './product-search.service';\nimport { OccModule } from '../../occ/occ.module';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, OccModule],\n  providers: [OccProductService, OccProductSearchService]\n})\nexport class ProductOccModule {}\n","import {\n  Product,\n  ProductSearchPage,\n  Review,\n  Suggestion\n} from '../../occ/occ-models/occ.models';\nimport { EntityLoaderState } from '../../state/utils/entity-loader/entity-loader-state';\n\nexport const PRODUCT_FEATURE = 'product';\nexport const PRODUCT_DETAIL_ENTITY = '[Product] Detail Entity';\n\nexport interface StateWithProduct {\n  [PRODUCT_FEATURE]: ProductsState;\n}\n\nexport interface ProductsState {\n  details: EntityLoaderState<Product>;\n  search: ProductsSearchState;\n  reviews: ProductReviewsState;\n}\n\nexport interface ProductsSearchState {\n  results: ProductSearchPage;\n  suggestions: Suggestion[];\n  auxResults: ProductSearchPage;\n}\n\nexport interface ProductReviewsState {\n  productCode: string;\n  list: Review[];\n}\n","import { throwError, Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { OccConfig } from '../config/occ-config';\nimport {\n  CountryList,\n  TitleList,\n  CardTypeList,\n  RegionList\n} from '../../occ/occ-models/index';\n\nconst ENDPOINT_COUNTRIES = 'countries';\nconst ENDPOINT_TITLES = 'titles';\nconst ENDPOINT_CARD_TYPES = 'cardtypes';\nconst ENDPOINT_REGIONS = 'regions';\nconst COUNTRIES_TYPE_SHIPPING = 'SHIPPING';\nconst COUNTRIES_TYPE_BILLING = 'BILLING';\n\n@Injectable()\nexport class OccMiscsService {\n  constructor(private http: HttpClient, private config: OccConfig) {}\n\n  protected getEndpoint(endpoint: string) {\n    return (\n      (this.config.server.baseUrl || '') +\n      this.config.server.occPrefix +\n      this.config.site.baseSite +\n      '/' +\n      endpoint\n    );\n  }\n\n  loadDeliveryCountries(): Observable<CountryList> {\n    return this.http\n      .get<CountryList>(this.getEndpoint(ENDPOINT_COUNTRIES), {\n        params: new HttpParams().set('type', COUNTRIES_TYPE_SHIPPING)\n      })\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n\n  loadBillingCountries(): Observable<CountryList> {\n    return this.http\n      .get<CountryList>(this.getEndpoint(ENDPOINT_COUNTRIES), {\n        params: new HttpParams().set('type', COUNTRIES_TYPE_BILLING)\n      })\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n\n  loadTitles(): Observable<TitleList> {\n    return this.http\n      .get<TitleList>(this.getEndpoint(ENDPOINT_TITLES))\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n\n  loadCardTypes(): Observable<CardTypeList> {\n    return this.http\n      .get<CardTypeList>(this.getEndpoint(ENDPOINT_CARD_TYPES))\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n\n  loadRegions(countryIsoCode: string): Observable<RegionList> {\n    return this.http\n      .get<RegionList>(this.getEndpoint(this.buildRegionsUrl(countryIsoCode)))\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n\n  private buildRegionsUrl(countryIsoCode: string): string {\n    return `${ENDPOINT_COUNTRIES}/${countryIsoCode}/${ENDPOINT_REGIONS}`;\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { OccConfig } from '../../../occ/index';\nimport { Product } from '../../../occ/occ-models/occ.models';\n\n@Injectable()\nexport class ProductImageConverterService {\n  constructor(protected config: OccConfig) {}\n\n  convertList(list: Array<Product>): void {\n    if (!list) {\n      return;\n    }\n    for (const product of list) {\n      this.convertProduct(product);\n    }\n  }\n\n  convertProduct(product: Product): void {\n    if (product.images) {\n      product.images = this.populate(product.images);\n    }\n  }\n\n  /**\n   * @desc\n   * Creates the image structue we'd like to have. Instead of\n   * having a singel list with all images despite type and format\n   * we create a proper structure. With that we can do:\n   * - images.primary.thumnail.url\n   * - images.GALLERY[0].thumnail.url\n   */\n  populate(source: Array<any>): any {\n    const images = {};\n    if (source) {\n      for (const image of source) {\n        const isList = image.hasOwnProperty('galleryIndex');\n        if (!images.hasOwnProperty(image.imageType)) {\n          images[image.imageType] = isList ? [] : {};\n        }\n\n        let imageContainer;\n        if (isList && !images[image.imageType][image.galleryIndex]) {\n          images[image.imageType][image.galleryIndex] = {};\n        }\n\n        if (isList) {\n          imageContainer = images[image.imageType][image.galleryIndex];\n        } else {\n          imageContainer = images[image.imageType];\n        }\n\n        // set full image URL path\n        image.url = (this.config.server.baseUrl || '') + image.url;\n\n        imageContainer[image.format] = image;\n      }\n    }\n    return images;\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Product } from '../../../occ/occ-models/occ.models';\n\n@Injectable()\nexport class ProductReferenceConverterService {\n  convertProduct(product: Product): void {\n    if (product.productReferences) {\n      product.productReferences = this.populate(product.productReferences);\n    }\n  }\n\n  /**\n   * @desc\n   * Creates the reference structue we'd like to have. Instead of\n   * having a single list with all references we create a proper structure.\n   * With that we have a semantic API for the clients\n   * - product.references.SIMILAR[0].code\n   */\n  protected populate(source: Array<any>): any {\n    const references = {};\n\n    if (source) {\n      for (const reference of source) {\n        if (!references.hasOwnProperty(reference.referenceType)) {\n          references[reference.referenceType] = [];\n        }\n        references[reference.referenceType].push(reference);\n      }\n    }\n    return references;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ProductImageConverterService } from './product-image-converter.service';\nimport { ProductReferenceConverterService } from './product-reference-converter.service';\n@NgModule({\n  imports: [CommonModule],\n  providers: [ProductImageConverterService, ProductReferenceConverterService]\n})\nexport class ProductConverterModule {}\n","import { Action } from '@ngrx/store';\n\nimport { SearchConfig } from '../../model/search-config';\nimport {\n  Suggestion,\n  ProductSearchPage,\n  ErrorModel\n} from '../../../occ/occ-models';\n\nexport const SEARCH_PRODUCTS = '[Product] Search Products';\nexport const SEARCH_PRODUCTS_FAIL = '[Product] Search Products Fail';\nexport const SEARCH_PRODUCTS_SUCCESS = '[Product] Search Products Success';\nexport const GET_PRODUCT_SUGGESTIONS = '[Product] Get Product Suggestions';\nexport const GET_PRODUCT_SUGGESTIONS_SUCCESS =\n  '[Product] Get Product Suggestions Success';\nexport const GET_PRODUCT_SUGGESTIONS_FAIL =\n  '[Product] Get Product Suggestions Fail';\nexport const CLEAN_PRODUCT_SEARCH = '[Product] Clean Product Search State';\n\nexport class SearchProducts implements Action {\n  readonly type = SEARCH_PRODUCTS;\n  constructor(\n    public payload: { queryText: string; searchConfig: SearchConfig },\n    public auxiliary?: boolean\n  ) {}\n}\n\nexport class SearchProductsFail implements Action {\n  readonly type = SEARCH_PRODUCTS_FAIL;\n  constructor(public payload: ErrorModel, public auxiliary?: boolean) {}\n}\n\nexport class SearchProductsSuccess implements Action {\n  readonly type = SEARCH_PRODUCTS_SUCCESS;\n  constructor(public payload: ProductSearchPage, public auxiliary?: boolean) {}\n}\n\nexport class GetProductSuggestions implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS;\n  constructor(public payload: { term: string; searchConfig: SearchConfig }) {}\n}\n\nexport class GetProductSuggestionsSuccess implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_SUCCESS;\n  constructor(public payload: Suggestion[]) {}\n}\n\nexport class GetProductSuggestionsFail implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class CleanProductSearchState implements Action {\n  readonly type = CLEAN_PRODUCT_SEARCH;\n  constructor() {}\n}\n\n// action types\nexport type ProductSearchAction =\n  | SearchProducts\n  | SearchProductsFail\n  | SearchProductsSuccess\n  | GetProductSuggestions\n  | GetProductSuggestionsSuccess\n  | GetProductSuggestionsFail\n  | CleanProductSearchState;\n","import { Action } from '@ngrx/store';\n\nexport const ENTITY_REMOVE_ACTION = '[ENTITY] REMOVE';\nexport const ENTITY_REMOVE_ALL_ACTION = '[ENTITY] REMOVE ALL';\n\nexport interface EntityMeta {\n  entityType: string;\n  entityId: string | string[];\n  entityRemove?: boolean;\n}\n\nexport function entityMeta(type: string, id: string | string[]): EntityMeta {\n  return {\n    entityType: type,\n    entityId: id\n  };\n}\n\nexport function entityRemoveMeta(\n  type: string,\n  id: string | string[]\n): EntityMeta {\n  return {\n    entityId: id,\n    entityType: type,\n    entityRemove: true\n  };\n}\n\nexport function entityRemoveAllMeta(type: string): EntityMeta {\n  return {\n    entityId: null,\n    entityType: type,\n    entityRemove: true\n  };\n}\n\nexport interface EntityAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityMeta;\n}\n\nexport class EntityRemoveAction implements EntityAction {\n  type = ENTITY_REMOVE_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityRemoveMeta(entityType, id);\n  }\n}\n\nexport class EntityRemoveAllAction implements EntityAction {\n  type = ENTITY_REMOVE_ALL_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string) {\n    this.meta = entityRemoveAllMeta(entityType);\n  }\n}\n","import {\n  failMeta,\n  LoaderMeta,\n  loadMeta,\n  resetMeta,\n  successMeta\n} from '../loader/loader.action';\nimport { entityMeta, EntityMeta } from '../entity/entity.action';\nimport { Action } from '@ngrx/store';\n\nexport const ENTITY_LOAD_ACTION = '[ENTITY] LOAD';\nexport const ENTITY_FAIL_ACTION = '[ENTITY] LOAD FAIL';\nexport const ENTITY_SUCCESS_ACTION = '[ENTITY] LOAD SUCCESS';\nexport const ENTITY_RESET_ACTION = '[ENTITY] RESET';\n\nexport interface EntityLoaderMeta extends EntityMeta, LoaderMeta {}\n\nexport interface EntityLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityLoaderMeta;\n}\n\nexport function entityLoadMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...loadMeta(entityType),\n    ...entityMeta(entityType, id)\n  };\n}\n\nexport function entityFailMeta(\n  entityType: string,\n  id: string | string[],\n  error?: any\n): EntityLoaderMeta {\n  return {\n    ...failMeta(entityType, error),\n    ...entityMeta(entityType, id)\n  };\n}\n\nexport function entitySuccessMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...successMeta(entityType),\n    ...entityMeta(entityType, id)\n  };\n}\n\nexport function entityResetMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...resetMeta(entityType),\n    ...entityMeta(entityType, id)\n  };\n}\n\nexport class EntityLoadAction implements EntityLoaderAction {\n  type = ENTITY_LOAD_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityLoadMeta(entityType, id);\n  }\n}\n\nexport class EntityFailAction implements EntityLoaderAction {\n  type = ENTITY_FAIL_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[], error?: any) {\n    this.meta = entityFailMeta(entityType, id, error);\n  }\n}\n\nexport class EntitySuccessAction implements EntityLoaderAction {\n  type = ENTITY_SUCCESS_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entitySuccessMeta(entityType, id);\n  }\n}\n\nexport class EntityResetAction implements EntityLoaderAction {\n  type = ENTITY_RESET_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityResetMeta(entityType, id);\n  }\n}\n","import { PRODUCT_DETAIL_ENTITY } from '../product-state';\nimport { Product } from '../../../occ/occ-models/occ.models';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction\n} from '../../../state/utils/entity-loader/entity-loader.action';\n\nexport const LOAD_PRODUCT = '[Product] Load Product Data';\nexport const LOAD_PRODUCT_FAIL = '[Product] Load Product Data Fail';\nexport const LOAD_PRODUCT_SUCCESS = '[Product] Load Product Data Success';\n\nexport class LoadProduct extends EntityLoadAction {\n  readonly type = LOAD_PRODUCT;\n  constructor(public payload: string) {\n    super(PRODUCT_DETAIL_ENTITY, payload);\n  }\n}\n\nexport class LoadProductFail extends EntityFailAction {\n  readonly type = LOAD_PRODUCT_FAIL;\n  constructor(productCode: string, public payload: any) {\n    super(PRODUCT_DETAIL_ENTITY, productCode, payload);\n  }\n}\n\nexport class LoadProductSuccess extends EntitySuccessAction {\n  readonly type = LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {\n    super(PRODUCT_DETAIL_ENTITY, payload.code);\n  }\n}\n\n// action types\nexport type ProductAction = LoadProduct | LoadProductFail | LoadProductSuccess;\n","import { Action } from '@ngrx/store';\n\nimport { Review, ErrorModel } from '../../../occ/occ-models';\n\nexport const LOAD_PRODUCT_REVIEWS = '[Product] Load Product Reviews Data';\nexport const LOAD_PRODUCT_REVIEWS_FAIL =\n  '[Product] Load Product Reviews Data Fail';\nexport const LOAD_PRODUCT_REVIEWS_SUCCESS =\n  '[Product] Load Product Reviews Data Success';\nexport const POST_PRODUCT_REVIEW = '[Product] Post Product Review';\nexport const POST_PRODUCT_REVIEW_FAIL = '[Product] Post Product Review Fail';\nexport const POST_PRODUCT_REVIEW_SUCCESS =\n  '[Product] Post Product Review Success';\n\nexport class LoadProductReviews implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadProductReviewsFail implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReviewsSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_SUCCESS;\n  constructor(public payload: { productCode: string; list: Review[] }) {}\n}\n\nexport class PostProductReview implements Action {\n  readonly type = POST_PRODUCT_REVIEW;\n  constructor(public payload: { productCode: string; review: Review }) {}\n}\n\nexport class PostProductReviewFail implements Action {\n  readonly type = POST_PRODUCT_REVIEW_FAIL;\n  constructor(public payload: string) {}\n}\n\nexport class PostProductReviewSuccess implements Action {\n  readonly type = POST_PRODUCT_REVIEW_SUCCESS;\n  constructor(public payload: Review) {}\n}\n\n// action types\nexport type ProductReviewsAction =\n  | LoadProductReviews\n  | LoadProductReviewsFail\n  | LoadProductReviewsSuccess\n  | PostProductReview\n  | PostProductReviewFail\n  | PostProductReviewSuccess;\n","import { MemoizedSelector, createFeatureSelector } from '@ngrx/store';\nimport {\n  PRODUCT_FEATURE,\n  ProductsState,\n  StateWithProduct\n} from '../product-state';\n\nexport const getProductsState: MemoizedSelector<\n  StateWithProduct,\n  ProductsState\n> = createFeatureSelector<ProductsState>(PRODUCT_FEATURE);\n","import { EntityLoaderState } from './entity-loader-state';\nimport { LoaderState } from '../loader/loader-state';\n\nexport function entityStateSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): LoaderState<T> {\n  return state.entities[id] || {};\n}\n\nexport function entityValueSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): T {\n  const entityState = entityStateSelector(state, id);\n  return entityState.value;\n}\n\nexport function entityLoadingSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityStateSelector(state, id);\n  return entityState.loading;\n}\n\nexport function entityErrorSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityStateSelector(state, id);\n  return entityState.error;\n}\n\nexport function entitySuccessSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityStateSelector(state, id);\n  return entityState.success;\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { ProductsState, StateWithProduct } from '../product-state';\nimport { Product } from '../../../occ/occ-models/occ.models';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\nimport { entityStateSelector } from '../../../state/utils/entity-loader/entity-loader.selectors';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderErrorSelector,\n  loaderLoadingSelector,\n  loaderSuccessSelector,\n  loaderValueSelector\n} from '../../../state/utils/loader/loader.selectors';\n\nimport { getProductsState } from './feature.selector';\n\nexport const getProductState: MemoizedSelector<\n  StateWithProduct,\n  EntityLoaderState<Product>\n> = createSelector(\n  getProductsState,\n  (state: ProductsState) => state.details\n);\n\nexport const getSelectedProductsFactory = (\n  codes: string[]\n): MemoizedSelector<StateWithProduct, Product[]> => {\n  return createSelector(\n    getProductState,\n    (details: EntityLoaderState<Product>) => {\n      return codes\n        .map(code =>\n          details.entities[code] ? details.entities[code].value : undefined\n        )\n        .filter(product => product !== undefined);\n    }\n  );\n};\n\nexport const getSelectedProductStateFactory = (\n  code: string\n): MemoizedSelector<StateWithProduct, LoaderState<Product>> => {\n  return createSelector(\n    getProductState,\n    details => entityStateSelector(details, code)\n  );\n};\n\nexport const getSelectedProductFactory = (\n  code: string\n): MemoizedSelector<StateWithProduct, Product> => {\n  return createSelector(\n    getSelectedProductStateFactory(code),\n    productState => loaderValueSelector(productState)\n  );\n};\n\nexport const getSelectedProductLoadingFactory = (\n  code: string\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code),\n    productState => loaderLoadingSelector(productState)\n  );\n};\n\nexport const getSelectedProductSuccessFactory = (\n  code: string\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code),\n    productState => loaderSuccessSelector(productState)\n  );\n};\n\nexport const getSelectedProductErrorFactory = (\n  code: string\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code),\n    productState => loaderErrorSelector(productState)\n  );\n};\n\nexport const getAllProductCodes: MemoizedSelector<\n  StateWithProduct,\n  string[]\n> = createSelector(\n  getProductState,\n  details => {\n    return Object.keys(details.entities);\n  }\n);\n","import { ProductsSearchState } from '../product-state';\nimport * as fromProductsSearch from '../actions/product-search.action';\nimport { Suggestion, ProductSearchPage } from '../../../occ/occ-models';\n\nexport const initialState: ProductsSearchState = {\n  results: {},\n  suggestions: [],\n  auxResults: {}\n};\n\nexport function reducer(\n  state = initialState,\n  action: fromProductsSearch.ProductSearchAction\n): ProductsSearchState {\n  switch (action.type) {\n    case fromProductsSearch.SEARCH_PRODUCTS_SUCCESS: {\n      const results = action.payload;\n      const res = action.auxiliary ? { auxResults: results } : { results };\n      return {\n        ...state,\n        ...res\n      };\n    }\n\n    case fromProductsSearch.GET_PRODUCT_SUGGESTIONS_SUCCESS: {\n      const suggestions: Suggestion[] = action.payload;\n\n      return {\n        ...state,\n        suggestions\n      };\n    }\n\n    case fromProductsSearch.CLEAN_PRODUCT_SEARCH: {\n      return initialState;\n    }\n  }\n  return state;\n}\n\nexport const getSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.results;\nexport const getAuxSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.auxResults;\nexport const getProductSuggestions = (\n  state: ProductsSearchState\n): Suggestion[] => state.suggestions;\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\n\nimport {\n  ProductsSearchState,\n  ProductsState,\n  StateWithProduct\n} from '../product-state';\nimport * as fromProductSearch from '../reducers/product-search.reducer';\nimport {\n  ProductSearchPage,\n  Suggestion\n} from '../../../occ/occ-models/occ.models';\n\nimport { getProductsState } from './feature.selector';\n\nexport const getProductsSearchState: MemoizedSelector<\n  StateWithProduct,\n  ProductsSearchState\n> = createSelector(\n  getProductsState,\n  (state: ProductsState) => state.search\n);\n\nexport const getSearchResults: MemoizedSelector<\n  StateWithProduct,\n  ProductSearchPage\n> = createSelector(\n  getProductsSearchState,\n  fromProductSearch.getSearchResults\n);\n\nexport const getAuxSearchResults: MemoizedSelector<\n  StateWithProduct,\n  ProductSearchPage\n> = createSelector(\n  getProductsSearchState,\n  fromProductSearch.getAuxSearchResults\n);\n\nexport const getProductSuggestions: MemoizedSelector<\n  StateWithProduct,\n  Suggestion[]\n> = createSelector(\n  getProductsSearchState,\n  fromProductSearch.getProductSuggestions\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\n\nimport {\n  ProductReviewsState,\n  ProductsState,\n  StateWithProduct\n} from '../product-state';\nimport { Review } from '../../../occ/occ-models/occ.models';\n\nimport { getProductsState } from './feature.selector';\n\nexport const getProductReviewsState: MemoizedSelector<\n  StateWithProduct,\n  ProductReviewsState\n> = createSelector(\n  getProductsState,\n  (state: ProductsState) => state.reviews\n);\n\nexport const getSelectedProductReviewsFactory = (\n  productCode\n): MemoizedSelector<StateWithProduct, Review[]> => {\n  return createSelector(\n    getProductReviewsState,\n    reviewData => {\n      if (reviewData.productCode === productCode) {\n        return reviewData.list;\n      }\n    }\n  );\n};\n","import { ProductReviewsState } from '../product-state';\nimport * as fromProductReviews from './../actions/product-reviews.action';\nimport { Review } from '../../../occ/occ-models';\n\nexport const initialState: ProductReviewsState = {\n  productCode: '',\n  list: []\n};\n\nexport function reducer(\n  state = initialState,\n  action: fromProductReviews.ProductReviewsAction\n): ProductReviewsState {\n  switch (action.type) {\n    case fromProductReviews.LOAD_PRODUCT_REVIEWS_SUCCESS: {\n      const productCode = action.payload.productCode;\n      const list = action.payload.list;\n\n      return {\n        ...state,\n        productCode,\n        list\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getReviewList = (state: ProductReviewsState): Review[] =>\n  state.list;\nexport const getReviewProductCode = (state: ProductReviewsState): string =>\n  state.productCode;\n","import { Action } from '@ngrx/store';\nimport { Language } from '../../../occ/occ-models/occ.models';\n\nexport const LOAD_LANGUAGES = '[Site-context] Load Languages';\nexport const LOAD_LANGUAGES_FAIL = '[Site-context] Load Languages Fail';\nexport const LOAD_LANGUAGES_SUCCESS = '[Site-context] Load Languages Success';\nexport const SET_ACTIVE_LANGUAGE = '[Site-context] Set Active Language';\nexport const LANGUAGE_CHANGE = '[Site-context] Language Change';\n\nexport class LoadLanguages implements Action {\n  readonly type = LOAD_LANGUAGES;\n}\n\nexport class LoadLanguagesFail implements Action {\n  readonly type = LOAD_LANGUAGES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadLanguagesSuccess implements Action {\n  readonly type = LOAD_LANGUAGES_SUCCESS;\n  constructor(public payload: Language[]) {}\n}\n\nexport class SetActiveLanguage implements Action {\n  readonly type = SET_ACTIVE_LANGUAGE;\n  constructor(public payload: string) {}\n}\n\nexport class LanguageChange implements Action {\n  readonly type = LANGUAGE_CHANGE;\n}\n\n// action types\nexport type LanguagesAction =\n  | LoadLanguages\n  | LoadLanguagesFail\n  | LoadLanguagesSuccess\n  | SetActiveLanguage\n  | LanguageChange;\n","import * as fromLanguages from '../actions/languages.action';\nimport { LanguagesState } from '../state';\nimport { Language } from '../../../occ/occ-models/occ.models';\n\nexport const initialState: LanguagesState = {\n  entities: null,\n  activeLanguage: null\n};\n\nexport function reducer(\n  state = initialState,\n  action: fromLanguages.LanguagesAction\n): LanguagesState {\n  switch (action.type) {\n    case fromLanguages.LOAD_LANGUAGES_SUCCESS: {\n      const languages: Language[] = action.payload;\n      const entities = languages.reduce(\n        (langEntities: { [isocode: string]: Language }, language: Language) => {\n          return {\n            ...langEntities,\n            [language.isocode]: language\n          };\n        },\n        {\n          ...state.entities\n        }\n      );\n\n      return {\n        ...state,\n        entities\n      };\n    }\n\n    case fromLanguages.SET_ACTIVE_LANGUAGE: {\n      const isocode = action.payload;\n\n      return {\n        ...state,\n        activeLanguage: isocode\n      };\n    }\n  }\n  return state;\n}\n","import { Action } from '@ngrx/store';\nimport { Currency } from '../../../occ/occ-models/occ.models';\n\nexport const LOAD_CURRENCIES = '[Site-context] Load Currencies';\nexport const LOAD_CURRENCIES_FAIL = '[Site-context] Load Currencies Fail';\nexport const LOAD_CURRENCIES_SUCCESS = '[Site-context] Load Currencies Success';\nexport const SET_ACTIVE_CURRENCY = '[Site-context] Set Active Currency';\nexport const CURRENCY_CHANGE = '[Site-context] Currency Change';\n\nexport class LoadCurrencies implements Action {\n  readonly type = LOAD_CURRENCIES;\n}\n\nexport class LoadCurrenciesFail implements Action {\n  readonly type = LOAD_CURRENCIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCurrenciesSuccess implements Action {\n  readonly type = LOAD_CURRENCIES_SUCCESS;\n  constructor(public payload: Currency[]) {}\n}\n\nexport class SetActiveCurrency implements Action {\n  readonly type = SET_ACTIVE_CURRENCY;\n  constructor(public payload: string) {}\n}\n\nexport class CurrencyChange implements Action {\n  readonly type = CURRENCY_CHANGE;\n}\n\n// action types\nexport type CurrenciesAction =\n  | LoadCurrencies\n  | LoadCurrenciesFail\n  | LoadCurrenciesSuccess\n  | SetActiveCurrency\n  | CurrencyChange;\n","import * as fromCurrencies from '../actions/currencies.action';\nimport { CurrenciesState } from '../state';\nimport { Currency } from '../../../occ/occ-models/occ.models';\n\nexport const initialState: CurrenciesState = {\n  entities: null,\n  activeCurrency: null\n};\n\nexport function reducer(\n  state = initialState,\n  action: fromCurrencies.CurrenciesAction\n): CurrenciesState {\n  switch (action.type) {\n    case fromCurrencies.LOAD_CURRENCIES_SUCCESS: {\n      const currencies: Currency[] = action.payload;\n      const entities = currencies.reduce(\n        (currEntities: { [isocode: string]: Currency }, currency: Currency) => {\n          return {\n            ...currEntities,\n            [currency.isocode]: currency\n          };\n        },\n        {\n          ...state.entities\n        }\n      );\n\n      return {\n        ...state,\n        entities\n      };\n    }\n\n    case fromCurrencies.SET_ACTIVE_CURRENCY: {\n      const isocode: string = action.payload;\n\n      return {\n        ...state,\n        activeCurrency: isocode\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducerMap } from '@ngrx/store';\n\nimport * as fromLanguages from './languages.reducer';\nimport * as fromCurrencies from './currencies.reducer';\nimport { SiteContextState } from '../state';\n\nexport function getReducers(): ActionReducerMap<SiteContextState> {\n  return {\n    languages: fromLanguages.reducer,\n    currencies: fromCurrencies.reducer\n  };\n}\n\nexport const reducerToken: InjectionToken<\n  ActionReducerMap<SiteContextState>\n> = new InjectionToken<ActionReducerMap<SiteContextState>>(\n  'SiteContextReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers\n};\n","import { throwError, Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { OccConfig } from '../../occ/config/occ-config';\nimport { LanguageList, CurrencyList } from '../../occ/occ-models/occ.models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OccSiteService {\n  constructor(private http: HttpClient, private config: OccConfig) {}\n\n  protected getBaseEndPoint(): string {\n    if (!this.config || !this.config.server) {\n      return '';\n    }\n    return (\n      (this.config.server.baseUrl || '') +\n      this.config.server.occPrefix +\n      this.config.site.baseSite\n    );\n  }\n\n  loadLanguages(): Observable<LanguageList> {\n    return this.http\n      .get(this.getBaseEndPoint() + '/languages')\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n\n  loadCurrencies(): Observable<CurrencyList> {\n    return this.http\n      .get(this.getBaseEndPoint() + '/currencies')\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n}\n","import { Observable, of } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { map, catchError, tap, exhaustMap } from 'rxjs/operators';\n\nimport { OccSiteService } from '../../occ/occ-site.service';\nimport * as actions from '../actions/languages.action';\nimport { WindowRef } from '../../../window/window-ref';\n\n@Injectable()\nexport class LanguagesEffects {\n  @Effect()\n  loadLanguages$: Observable<any> = this.actions$.pipe(\n    ofType(actions.LOAD_LANGUAGES),\n    exhaustMap(() => {\n      return this.occSiteService.loadLanguages().pipe(\n        map(data => new actions.LoadLanguagesSuccess(data.languages)),\n        catchError(error => of(new actions.LoadLanguagesFail(error)))\n      );\n    })\n  );\n\n  @Effect()\n  activateLanguage$: Observable<any> = this.actions$.pipe(\n    ofType(actions.SET_ACTIVE_LANGUAGE),\n    tap((action: actions.SetActiveLanguage) => {\n      if (this.winRef.sessionStorage) {\n        this.winRef.sessionStorage.setItem('language', action.payload);\n      }\n    }),\n    map(() => new actions.LanguageChange())\n  );\n\n  constructor(\n    private actions$: Actions,\n    private occSiteService: OccSiteService,\n    private winRef: WindowRef\n  ) {}\n}\n","import { Observable, of } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { map, catchError, exhaustMap, tap } from 'rxjs/operators';\n\nimport { OccSiteService } from '../../occ/occ-site.service';\nimport * as actions from '../actions/currencies.action';\nimport { WindowRef } from '../../../window/window-ref';\n\n@Injectable()\nexport class CurrenciesEffects {\n  @Effect()\n  loadCurrencies$: Observable<any> = this.actions$.pipe(\n    ofType(actions.LOAD_CURRENCIES),\n    exhaustMap(() => {\n      return this.occSiteService.loadCurrencies().pipe(\n        map(data => new actions.LoadCurrenciesSuccess(data.currencies)),\n        catchError(error => of(new actions.LoadCurrenciesFail(error)))\n      );\n    })\n  );\n\n  @Effect()\n  activateCurrency$: Observable<any> = this.actions$.pipe(\n    ofType(actions.SET_ACTIVE_CURRENCY),\n    tap((action: actions.SetActiveCurrency) => {\n      if (this.winRef.sessionStorage) {\n        this.winRef.sessionStorage.setItem('currency', action.payload);\n      }\n    }),\n    map(() => new actions.CurrencyChange())\n  );\n\n  constructor(\n    private actions$: Actions,\n    private occSiteService: OccSiteService,\n    private winRef: WindowRef\n  ) {}\n}\n","import { LanguagesEffects } from './languages.effect';\nimport { CurrenciesEffects } from './currencies.effect';\n\nexport const effects: any[] = [LanguagesEffects, CurrenciesEffects];\n\nexport * from './languages.effect';\nexport * from './currencies.effect';\n","import { Currency, Language } from '../../occ/occ-models/occ.models';\nexport const SITE_CONTEXT_FEATURE = 'siteContext';\n\nexport interface StateWithSiteContext {\n  [SITE_CONTEXT_FEATURE]: SiteContextState;\n}\n\nexport interface SiteContextState {\n  languages: LanguagesState;\n  currencies: CurrenciesState;\n}\n\nexport interface CurrencyEntities {\n  [isocode: string]: Currency;\n}\n\nexport interface CurrenciesState {\n  entities: CurrencyEntities;\n  activeCurrency: string;\n}\nexport interface LanguagesEntities {\n  [isocode: string]: Language;\n}\n\nexport interface LanguagesState {\n  entities: LanguagesEntities;\n  activeLanguage: string;\n}\n","import { MemoizedSelector, createFeatureSelector } from '@ngrx/store';\nimport {\n  SiteContextState,\n  SITE_CONTEXT_FEATURE,\n  StateWithSiteContext\n} from '../state';\n\nexport const getSiteContextState: MemoizedSelector<\n  StateWithSiteContext,\n  SiteContextState\n> = createFeatureSelector<SiteContextState>(SITE_CONTEXT_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Language } from '../../../occ/occ-models/occ.models';\nimport {\n  StateWithSiteContext,\n  LanguagesState,\n  LanguagesEntities,\n  SiteContextState\n} from '../state';\n\nimport { getSiteContextState } from './site-context.selector';\n\nconst activeLanguageSelector = (state: LanguagesState) => state.activeLanguage;\nconst languagesEntitiesSelector = (state: LanguagesState) => state.entities;\n\nexport const getLanguagesState: MemoizedSelector<\n  StateWithSiteContext,\n  LanguagesState\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state.languages\n);\n\nexport const getLanguagesEntities: MemoizedSelector<\n  StateWithSiteContext,\n  LanguagesEntities\n> = createSelector(\n  getLanguagesState,\n  languagesEntitiesSelector\n);\n\nexport const getActiveLanguage: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(\n  getLanguagesState,\n  activeLanguageSelector\n);\n\nexport const getAllLanguages: MemoizedSelector<\n  StateWithSiteContext,\n  Language[]\n> = createSelector(\n  getLanguagesEntities,\n  entities => {\n    return entities\n      ? Object.keys(entities).map(isocode => entities[isocode])\n      : null;\n  }\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Currency } from '../../../occ/occ-models/occ.models';\nimport {\n  StateWithSiteContext,\n  CurrenciesState,\n  CurrencyEntities,\n  SiteContextState\n} from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nconst currenciesEntitiesSelector = (state: CurrenciesState) => state.entities;\nconst activeCurrencySelector = (state: CurrenciesState) => state.activeCurrency;\n\nexport const getCurrenciesState: MemoizedSelector<\n  StateWithSiteContext,\n  CurrenciesState\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state.currencies\n);\n\nexport const getCurrenciesEntities: MemoizedSelector<\n  StateWithSiteContext,\n  CurrencyEntities\n> = createSelector(\n  getCurrenciesState,\n  currenciesEntitiesSelector\n);\n\nexport const getActiveCurrency: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(\n  getCurrenciesState,\n  activeCurrencySelector\n);\n\nexport const getAllCurrencies: MemoizedSelector<\n  StateWithSiteContext,\n  Currency[]\n> = createSelector(\n  getCurrenciesEntities,\n  entities => {\n    return entities\n      ? Object.keys(entities).map(isocode => entities[isocode])\n      : null;\n  }\n);\n","import { Injectable } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport * as fromStore from '../store/index';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { Language } from '../../occ/occ-models';\nimport { WindowRef } from '../../window/window-ref';\nimport { SiteContext } from './site-context.interface';\n/**\n * Facade that provides easy access to language state, actions and selectors.\n */\n@Injectable()\nexport class LanguageService implements SiteContext<Language> {\n  private sessionStorage: Storage;\n\n  constructor(\n    private store: Store<fromStore.StateWithSiteContext>,\n    winRef: WindowRef\n  ) {\n    this.sessionStorage = winRef.sessionStorage;\n  }\n\n  /**\n   * Represents all the languages supported by the current store.\n   */\n  getAll(): Observable<Language[]> {\n    return this.store.pipe(\n      select(fromStore.getAllLanguages),\n      tap(languages => {\n        if (!languages) {\n          this.store.dispatch(new fromStore.LoadLanguages());\n        }\n      }),\n      filter(Boolean)\n    );\n  }\n\n  /**\n   * Represents the isocode of the active language.\n   */\n  getActive(): Observable<string> {\n    return this.store\n      .pipe(select(fromStore.getActiveLanguage))\n      .pipe(filter(Boolean));\n  }\n\n  /**\n   * Sets the active language.\n   */\n  setActive(isocode: string) {\n    return this.store\n      .pipe(\n        select(fromStore.getActiveLanguage),\n        take(1)\n      )\n      .subscribe(activeLanguage => {\n        if (activeLanguage !== isocode) {\n          this.store.dispatch(new fromStore.SetActiveLanguage(isocode));\n        }\n      });\n  }\n\n  /**\n   * Initials the active language. The active language is either given\n   * by the last visit (stored in session storage) or by the\n   * default session language of the store.\n   */\n  initialize(defaultLanguage: string) {\n    if (this.sessionStorage && !!this.sessionStorage.getItem('language')) {\n      this.setActive(this.sessionStorage.getItem('language'));\n    } else {\n      this.setActive(defaultLanguage);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Store, select } from '@ngrx/store';\n\nimport { Observable } from 'rxjs';\n\nimport * as fromStore from '../store/index';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { Currency } from '../../occ/occ-models';\nimport { WindowRef } from '../../window/window-ref';\nimport { SiteContext } from './site-context.interface';\n\n/**\n * Facade that provides easy access to curreny state, actions and selectors.\n */\n@Injectable()\nexport class CurrencyService implements SiteContext<Currency> {\n  private sessionStorage: Storage;\n\n  constructor(\n    private store: Store<fromStore.StateWithSiteContext>,\n    winRef: WindowRef\n  ) {\n    this.sessionStorage = winRef.sessionStorage;\n  }\n\n  /**\n   * Represents all the currencies supported by the current store.\n   */\n  getAll(): Observable<Currency[]> {\n    return this.store.pipe(\n      select(fromStore.getAllCurrencies),\n      tap(currencies => {\n        if (!currencies) {\n          this.store.dispatch(new fromStore.LoadCurrencies());\n        }\n      }),\n      filter(Boolean)\n    );\n  }\n\n  /**\n   * Represents the isocode of the active currency.\n   */\n  getActive(): Observable<string> {\n    return this.store\n      .pipe(select(fromStore.getActiveCurrency))\n      .pipe(filter(Boolean));\n  }\n\n  /**\n   * Sets the active language.\n   */\n  setActive(isocode: string) {\n    return this.store\n      .pipe(\n        select(fromStore.getActiveCurrency),\n        take(1)\n      )\n      .subscribe(activeCurrency => {\n        if (activeCurrency !== isocode) {\n          this.store.dispatch(new fromStore.SetActiveCurrency(isocode));\n        }\n      });\n  }\n\n  /**\n   * Initials the active currency. The active currency is either given\n   * by the last visit (stored in session storage) or by the\n   * default session currency of the store.\n   */\n  initialize(defaultCurrency: string) {\n    if (this.sessionStorage && !!this.sessionStorage.getItem('currency')) {\n      this.setActive(this.sessionStorage.getItem('currency'));\n    } else {\n      this.setActive(defaultCurrency);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { OccModule } from '../../occ/occ.module';\n\nimport { OccSiteService } from './occ-site.service';\n@NgModule({\n  imports: [OccModule, CommonModule, HttpClientModule],\n  providers: [OccModule, OccSiteService]\n})\nexport class SiteContextOccModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { SITE_CONTEXT_FEATURE } from './state';\nimport { ConfigModule } from '../../config/config.module';\nimport { StateConfig } from '../../state/config/state-config';\n\nexport function siteContextStoreConfigFactory(): StateConfig {\n  // if we want to reuse SITE_CONTEXT_FEATURE const in config, we have to use factory instead of plain object\n  const config = {\n    state: { ssrTransfer: { keys: { [SITE_CONTEXT_FEATURE]: true } } }\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(SITE_CONTEXT_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n    ConfigModule.withConfigFactory(siteContextStoreConfigFactory)\n  ],\n  providers: [reducerProvider]\n})\nexport class SiteContextStoreModule {}\n","import { EntityState } from './entity-state';\nimport { EntityAction } from './entity.action';\nimport { Action } from '@ngrx/store';\n\nexport const initialEntityState: EntityState<any> = { entities: {} };\n\n/**\n * Higher order reducer for reusing reducer logic for multiple entities\n *\n * Utilizes entityId meta field to target entity by id in actions\n */\nexport function entityReducer<T>(\n  entityType: string,\n  reducer: (state: T, action: Action) => T\n) {\n  return (\n    state: EntityState<T> = initialEntityState,\n    action: EntityAction\n  ): EntityState<T> => {\n    let ids: string[];\n    let partitionPayload = false;\n    if (\n      action.meta &&\n      action.meta.entityType === entityType &&\n      action.meta.entityId !== undefined\n    ) {\n      ids = [].concat(action.meta.entityId);\n\n      // remove selected entities\n      if (action.meta.entityRemove) {\n        if (action.meta.entityId === null) {\n          return initialEntityState;\n        } else {\n          let removed = false;\n          const newEntities = Object.keys(state.entities).reduce((acc, cur) => {\n            if (ids.indexOf(cur) > -1) {\n              removed = true;\n            } else {\n              acc[cur] = state.entities[cur];\n            }\n            return acc;\n          }, {});\n\n          return removed ? { entities: newEntities } : state;\n        }\n      }\n\n      partitionPayload =\n        Array.isArray(action.meta.entityId) && Array.isArray(action.payload);\n    } else {\n      ids = Object.keys(state.entities);\n    }\n\n    const entityUpdates: { [id: string]: T } = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const subAction = partitionPayload\n        ? { ...action, payload: action.payload[i] }\n        : action;\n      const newState = reducer(state.entities[id], subAction);\n      if (newState) {\n        entityUpdates[id] = newState;\n      }\n    }\n\n    if (Object.keys(entityUpdates).length > 0) {\n      return {\n        ...state,\n        entities: { ...state.entities, ...entityUpdates }\n      };\n    }\n\n    return state;\n  };\n}\n","import { entityReducer } from '../entity/entity.reducer';\nimport { loaderReducer } from '../loader/loader.reducer';\nimport { LoaderAction } from '../loader/loader.action';\nimport { EntityLoaderState } from './entity-loader-state';\nimport { EntityLoaderAction } from './entity-loader.action';\n\n/**\n * Higher order reducer that wraps LoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic loading flags\n */\nexport function entityLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: LoaderAction) => T\n): (\n  state: EntityLoaderState<T>,\n  action: EntityLoaderAction\n) => EntityLoaderState<T> {\n  return entityReducer(entityType, loaderReducer(entityType, reducer));\n}\n","import { Provider, Type } from '@angular/core';\nimport { LanguageService } from '../facade/language.service';\nimport { CurrencyService } from '../facade/currency.service';\nimport { SiteContext } from '../facade/site-context.interface';\n\nexport abstract class ContextServiceMap {\n  [context: string]: Type<SiteContext<any>>;\n}\n\nexport const LANGUAGE_CONTEXT_ID = 'LANGUAGE';\nexport const CURRENCY_CONTEXT_ID = 'CURRENCY';\n\nexport function serviceMapFactory() {\n  return {\n    [LANGUAGE_CONTEXT_ID]: LanguageService,\n    [CURRENCY_CONTEXT_ID]: CurrencyService\n  };\n}\n\nexport const contextServiceMapProvider: Provider = {\n  provide: ContextServiceMap,\n  useFactory: serviceMapFactory\n};\n","import { SiteContextConfig } from './site-context-config';\nimport {\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID\n} from '../providers/context-service-map';\n\nexport function defaultSiteContextConfigFactory(): SiteContextConfig {\n  return {\n    siteContext: {\n      parameters: {\n        [LANGUAGE_CONTEXT_ID]: {\n          persistence: 'route',\n          defaultValue: 'en',\n          values: ['en', 'de', 'ja', 'zh']\n        },\n        [CURRENCY_CONTEXT_ID]: {\n          persistence: 'route',\n          defaultValue: 'USD',\n          values: ['USD', 'JPY']\n        }\n      },\n      urlEncodingParameters: [LANGUAGE_CONTEXT_ID, CURRENCY_CONTEXT_ID]\n    }\n  };\n}\n","export type ContextParamPersistence = 'session' | 'cookie' | 'route' | 'domain';\n\nexport interface ContextParams {\n  persistence?: ContextParamPersistence;\n  defaultValue?: string;\n  values?: string[];\n}\n\nexport abstract class SiteContextConfig {\n  siteContext?: {\n    parameters?: {\n      [contextName: string]: ContextParams;\n    };\n    urlEncodingParameters?: string[];\n  };\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { LanguageService } from '../facade/language.service';\nimport { CurrencyService } from '../facade/currency.service';\nimport { OccConfig } from '../../occ/config/occ-config';\n\nexport function inititializeContext(\n  config: OccConfig,\n  langService: LanguageService,\n  currService: CurrencyService\n) {\n  return () => {\n    langService.initialize(config.site.language);\n    currService.initialize(config.site.currency);\n  };\n}\n\nexport const contextServiceProviders: Provider[] = [\n  LanguageService,\n  CurrencyService,\n  {\n    provide: APP_INITIALIZER,\n    useFactory: inititializeContext,\n    deps: [OccConfig, LanguageService, CurrencyService],\n    multi: true\n  }\n];\n","import { Injectable, Injector } from '@angular/core';\nimport {\n  ContextParamPersistence,\n  SiteContextConfig\n} from '../config/site-context-config';\nimport { SiteContext } from '../facade/site-context.interface';\nimport { ContextServiceMap } from '../providers/context-service-map';\n\n@Injectable()\nexport class SiteContextParamsService {\n  constructor(\n    private config: SiteContextConfig,\n    private injector: Injector,\n    private serviceMap: ContextServiceMap\n  ) {}\n\n  getContextParameters(persistence?: ContextParamPersistence): string[] {\n    const contextConfig = this.config.siteContext.parameters;\n    if (contextConfig) {\n      const params = Object.keys(contextConfig);\n      if (persistence) {\n        return params.filter(\n          key => contextConfig[key].persistence === persistence\n        );\n      } else {\n        return params;\n      }\n    }\n    return [];\n  }\n\n  getParamValues(param: string): string[] {\n    return this.config.siteContext.parameters &&\n      this.config.siteContext.parameters[param]\n      ? this.config.siteContext.parameters[param].values\n      : undefined;\n  }\n\n  getParamDefaultValue(param: string): string {\n    return this.config.siteContext.parameters &&\n      this.config.siteContext.parameters[param]\n      ? this.config.siteContext.parameters[param].defaultValue\n      : undefined;\n  }\n\n  getSiteContextService(param: string): SiteContext<any> {\n    if (this.serviceMap[param]) {\n      return this.injector.get<SiteContext<any>>(this.serviceMap[param], null);\n    }\n  }\n\n  getValue(param: string): string {\n    let value: string;\n\n    const service = this.getSiteContextService(param);\n    if (service) {\n      service\n        .getActive()\n        .subscribe(val => (value = val))\n        .unsubscribe();\n    }\n\n    return value !== undefined ? value : this.getParamDefaultValue(param);\n  }\n\n  setValue(param: string, value: string) {\n    const service = this.getSiteContextService(param);\n    if (service) {\n      service.setActive(value);\n    }\n  }\n}\n","import { DefaultUrlSerializer, UrlTree } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { SiteContextParamsService } from '../facade/site-context-params.service';\nimport { SiteContextConfig } from '../config/site-context-config';\n\nexport interface ParamValuesMap {\n  [name: string]: string;\n}\n\nexport interface UrlTreeWithSiteContext extends UrlTree {\n  siteContext?: ParamValuesMap;\n}\n\n@Injectable()\nexport class SiteContextUrlSerializer extends DefaultUrlSerializer {\n  private readonly urlEncodingParameters: string[];\n\n  get hasContextInRoutes() {\n    return this.urlEncodingParameters.length > 0;\n  }\n\n  constructor(\n    private siteContextParams: SiteContextParamsService,\n    private config: SiteContextConfig\n  ) {\n    super();\n    this.urlEncodingParameters =\n      this.config.siteContext.urlEncodingParameters || [];\n  }\n\n  parse(url: string): UrlTreeWithSiteContext {\n    if (this.hasContextInRoutes) {\n      const urlWithParams = this.urlExtractContextParameters(url);\n      const parsed = super.parse(urlWithParams.url) as UrlTreeWithSiteContext;\n      this.urlTreeIncludeContextParameters(parsed, urlWithParams.params);\n      return parsed;\n    } else {\n      return super.parse(url);\n    }\n  }\n\n  urlExtractContextParameters(\n    url: string\n  ): { url: string; params: ParamValuesMap } {\n    const segments = url.split('/');\n    if (segments[0] === '') {\n      segments.shift();\n    }\n    const params = {};\n\n    let paramId = 0;\n    let segmentId = 0;\n    while (\n      paramId < this.urlEncodingParameters.length &&\n      segmentId < segments.length\n    ) {\n      const paramName = this.urlEncodingParameters[paramId];\n      const paramValues = this.siteContextParams.getParamValues(paramName);\n\n      if (paramValues.indexOf(segments[segmentId]) > -1) {\n        params[paramName] = segments[segmentId];\n        segmentId++;\n      }\n      paramId++;\n    }\n\n    url = segments.slice(Object.keys(params).length).join('/');\n    return { url, params };\n  }\n\n  private urlTreeIncludeContextParameters(\n    urlTree: UrlTreeWithSiteContext,\n    params: ParamValuesMap\n  ) {\n    urlTree.siteContext = params;\n  }\n\n  serialize(tree: UrlTreeWithSiteContext): string {\n    const params = this.urlTreeExtractContextParameters(tree);\n    const url = super.serialize(tree);\n    const serialized = this.urlIncludeContextParameters(url, params);\n    return serialized;\n  }\n\n  urlTreeExtractContextParameters(\n    urlTree: UrlTreeWithSiteContext\n  ): ParamValuesMap {\n    return urlTree.siteContext ? urlTree.siteContext : {};\n  }\n\n  private urlIncludeContextParameters(url: string, params: ParamValuesMap) {\n    const contextRoutePart = this.urlEncodingParameters\n      .map(param => {\n        return params[param]\n          ? params[param]\n          : this.siteContextParams.getValue(param);\n      })\n      .join('/');\n\n    return contextRoutePart + url;\n  }\n}\n","import { Injectable, Injector, OnDestroy } from '@angular/core';\nimport { Location } from '@angular/common';\nimport {\n  NavigationCancel,\n  NavigationEnd,\n  NavigationError,\n  NavigationStart,\n  Router,\n  RouterEvent\n} from '@angular/router';\nimport { filter } from 'rxjs/operators';\nimport { SiteContextParamsService } from '../facade/site-context-params.service';\nimport { Subscription } from 'rxjs';\nimport { SiteContextUrlSerializer } from './site-context-url-serializer';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SiteContextRoutesHandler implements OnDestroy {\n  constructor(\n    private siteContextParams: SiteContextParamsService,\n    private serializer: SiteContextUrlSerializer,\n    private injector: Injector\n  ) {}\n\n  private subscription = new Subscription();\n\n  private contextValues: {\n    [param: string]: string;\n  } = {};\n\n  private router: Router;\n  private location: Location;\n  private isNavigating = false;\n\n  init() {\n    this.router = this.injector.get<Router>(Router);\n\n    this.location = this.injector.get<Location>(Location);\n    const routingParams = this.siteContextParams.getContextParameters('route');\n\n    if (routingParams.length) {\n      this.subscribeChanges(routingParams);\n      this.subscribeRouting();\n    }\n  }\n\n  private subscribeChanges(params: string[]) {\n    params.forEach(param => {\n      const service = this.siteContextParams.getSiteContextService(param);\n      if (service) {\n        this.subscription.add(\n          service.getActive().subscribe(value => {\n            if (\n              !this.isNavigating &&\n              this.contextValues[param] &&\n              this.contextValues[param] !== value\n            ) {\n              const parsed = this.router.parseUrl(this.router.url);\n              const serialized = this.router.serializeUrl(parsed);\n              this.location.replaceState(serialized);\n            }\n            this.contextValues[param] = value;\n          })\n        );\n      }\n    });\n  }\n\n  private subscribeRouting() {\n    this.subscription.add(\n      this.router.events\n        .pipe(\n          filter(\n            event =>\n              event instanceof NavigationStart ||\n              event instanceof NavigationEnd ||\n              event instanceof NavigationError ||\n              event instanceof NavigationCancel\n          )\n        )\n        .subscribe((event: RouterEvent) => {\n          this.isNavigating = event instanceof NavigationStart;\n          if (this.isNavigating) {\n            this.setContextParamsFromRoute(event.url);\n          }\n        })\n    );\n  }\n\n  private setContextParamsFromRoute(url: string) {\n    const { params } = this.serializer.urlExtractContextParameters(url);\n    Object.keys(params).forEach(param =>\n      this.siteContextParams.setValue(param, params[param])\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { SiteContextParamsService } from '../facade/site-context-params.service';\nimport { UrlSerializer } from '@angular/router';\nimport { SiteContextUrlSerializer } from '../services/site-context-url-serializer';\nimport { SiteContextRoutesHandler } from '../services/site-context-routes-handler';\n\nexport function initSiteContextRoutesHandler(\n  siteContextRoutesHandler: SiteContextRoutesHandler\n) {\n  return () => {\n    siteContextRoutesHandler.init();\n  };\n}\n\nexport const siteContextParamsProviders: Provider[] = [\n  SiteContextParamsService,\n  SiteContextUrlSerializer,\n  { provide: UrlSerializer, useExisting: SiteContextUrlSerializer },\n  {\n    provide: APP_INITIALIZER,\n    useFactory: initSiteContextRoutesHandler,\n    deps: [SiteContextRoutesHandler],\n    multi: true\n  }\n];\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { CurrencyService } from '../facade/currency.service';\nimport { LanguageService } from '../facade/language.service';\nimport { OccConfig } from '../../occ/config/occ-config';\n\n@Injectable()\nexport class SiteContextInterceptor implements HttpInterceptor {\n  baseReqString: string;\n  activeLang: string = this.config.site.language;\n  activeCurr: string = this.config.site.currency;\n\n  constructor(\n    private languageService: LanguageService,\n    private currencyService: CurrencyService,\n    private config: OccConfig\n  ) {\n    this.baseReqString =\n      (this.config.server.baseUrl || '') +\n      this.config.server.occPrefix +\n      this.config.site.baseSite;\n\n    this.languageService\n      .getActive()\n      .subscribe(data => (this.activeLang = data));\n\n    this.currencyService\n      .getActive()\n      .subscribe(data => (this.activeCurr = data));\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.indexOf(this.baseReqString) > -1) {\n      request = request.clone({\n        setParams: {\n          lang: this.activeLang,\n          curr: this.activeCurr\n        }\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { SiteContextInterceptor } from './site-context.interceptor';\n\nexport * from './occ-site.service';\nexport * from './site-context-occ.module';\nexport * from './site-context.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: SiteContextInterceptor,\n    multi: true\n  }\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { SiteContextOccModule } from './occ/site-context-occ.module';\nimport { SiteContextStoreModule } from './store/site-context-store.module';\nimport { StateModule } from '../state/index';\nimport { Config, ConfigModule } from '../config/config.module';\nimport { defaultSiteContextConfigFactory } from './config/default-site-context-config';\nimport { SiteContextConfig } from './config/site-context-config';\nimport { contextServiceMapProvider } from './providers/context-service-map';\nimport { contextServiceProviders } from './providers/context-service-providers';\nimport { siteContextParamsProviders } from './providers/site-context-params-providers';\nimport { interceptors } from './occ/index';\n\n// @dynamic\n@NgModule({\n  imports: [\n    ConfigModule.withConfigFactory(defaultSiteContextConfigFactory),\n    StateModule,\n    SiteContextOccModule,\n    SiteContextStoreModule\n  ],\n  providers: [\n    contextServiceMapProvider,\n    ...contextServiceProviders,\n    ...siteContextParamsProviders,\n    { provide: SiteContextConfig, useExisting: Config }\n  ]\n})\nexport class SiteContextModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: SiteContextModule,\n      providers: [...interceptors]\n    };\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\nimport * as fromProductsSearch from './product-search.reducer';\nimport * as fromProductReviews from './product-reviews.reducer';\nimport { PRODUCT_DETAIL_ENTITY, ProductsState } from '../product-state';\nimport { CURRENCY_CHANGE, LANGUAGE_CHANGE } from '../../../site-context';\nimport { Product } from '../../../occ/occ-models/occ.models';\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\n\nexport function getReducers(): ActionReducerMap<ProductsState> {\n  return {\n    search: fromProductsSearch.reducer,\n    details: entityLoaderReducer<Product>(PRODUCT_DETAIL_ENTITY),\n    reviews: fromProductReviews.reducer\n  };\n}\n\nexport const reducerToken: InjectionToken<\n  ActionReducerMap<ProductsState>\n> = new InjectionToken<ActionReducerMap<ProductsState>>('ProductReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers\n};\n\nexport function clearProductsState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function(state, action) {\n    if (action.type === CURRENCY_CHANGE || action.type === LANGUAGE_CHANGE) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearProductsState];\n","import { Injectable } from '@angular/core';\n\nimport { Effect, Actions, ofType } from '@ngrx/effects';\n\nimport { Observable, of } from 'rxjs';\nimport { map, catchError, switchMap } from 'rxjs/operators';\n\nimport * as productsSearchActions from '../actions/product-search.action';\nimport { ProductImageConverterService } from '../converters/product-image-converter.service';\nimport { OccProductSearchService } from '../../occ/product-search.service';\n\n@Injectable()\nexport class ProductsSearchEffects {\n  @Effect()\n  searchProducts$: Observable<\n    | productsSearchActions.SearchProductsSuccess\n    | productsSearchActions.SearchProductsFail\n  > = this.actions$.pipe(\n    ofType(productsSearchActions.SEARCH_PRODUCTS),\n    switchMap((action: productsSearchActions.SearchProducts) => {\n      return this.occProductSearchService\n        .query(action.payload.queryText, action.payload.searchConfig)\n        .pipe(\n          map(data => {\n            this.productImageConverter.convertList(data.products);\n            return new productsSearchActions.SearchProductsSuccess(\n              data,\n              action.auxiliary\n            );\n          }),\n          catchError(error =>\n            of(\n              new productsSearchActions.SearchProductsFail(\n                error,\n                action.auxiliary\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  getProductSuggestions$: Observable<\n    | productsSearchActions.GetProductSuggestionsSuccess\n    | productsSearchActions.GetProductSuggestionsFail\n  > = this.actions$.pipe(\n    ofType(productsSearchActions.GET_PRODUCT_SUGGESTIONS),\n    map(\n      (action: productsSearchActions.GetProductSuggestions) => action.payload\n    ),\n    switchMap(payload => {\n      return this.occProductSearchService\n        .queryProductSuggestions(payload.term, payload.searchConfig.pageSize)\n        .pipe(\n          map(data => {\n            if (data.suggestions === undefined) {\n              return new productsSearchActions.GetProductSuggestionsSuccess([]);\n            }\n            return new productsSearchActions.GetProductSuggestionsSuccess(\n              data.suggestions\n            );\n          }),\n          catchError(error =>\n            of(new productsSearchActions.GetProductSuggestionsFail(error))\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private occProductSearchService: OccProductSearchService,\n    private productImageConverter: ProductImageConverterService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { of, Observable } from 'rxjs';\nimport { map, catchError, mergeMap, switchMap, groupBy } from 'rxjs/operators';\n\nimport * as actions from '../actions/index';\nimport * as converters from '../converters/index';\nimport { OccProductService } from '../../occ/product.service';\n\n@Injectable()\nexport class ProductEffects {\n  @Effect()\n  loadProduct$: Observable<\n    actions.LoadProductSuccess | actions.LoadProductFail\n  > = this.actions$.pipe(\n    ofType(actions.LOAD_PRODUCT),\n    map((action: actions.LoadProduct) => action.payload),\n    groupBy(productCode => productCode),\n    mergeMap(group =>\n      group.pipe(\n        switchMap(productCode => {\n          return this.occProductService.loadProduct(productCode).pipe(\n            map(product => {\n              this.productImageConverter.convertProduct(product);\n              this.productReferenceConverterService.convertProduct(product);\n              return new actions.LoadProductSuccess(product);\n            }),\n            catchError(error =>\n              of(new actions.LoadProductFail(productCode, error))\n            )\n          );\n        })\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private occProductService: OccProductService,\n    private productImageConverter: converters.ProductImageConverterService,\n    private productReferenceConverterService: converters.ProductReferenceConverterService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport { Observable, of } from 'rxjs';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\n\nimport * as productReviewsActions from './../actions/product-reviews.action';\nimport { OccProductService } from './../../occ/product.service';\nimport { ErrorModel } from '../../../occ/occ-models/occ.models';\n\n@Injectable()\nexport class ProductReviewsEffects {\n  @Effect()\n  loadProductReviews$: Observable<\n    | productReviewsActions.LoadProductReviewsSuccess\n    | productReviewsActions.LoadProductReviewsFail\n  > = this.actions$.pipe(\n    ofType(productReviewsActions.LOAD_PRODUCT_REVIEWS),\n    map((action: productReviewsActions.LoadProductReviews) => action.payload),\n    mergeMap(productCode => {\n      return this.occProductService.loadProductReviews(productCode).pipe(\n        map(data => {\n          return new productReviewsActions.LoadProductReviewsSuccess({\n            productCode,\n            list: data.reviews\n          });\n        }),\n        catchError(_error =>\n          of(\n            new productReviewsActions.LoadProductReviewsFail({\n              message: productCode\n            } as ErrorModel)\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  postProductReview: Observable<\n    | productReviewsActions.PostProductReviewSuccess\n    | productReviewsActions.PostProductReviewFail\n  > = this.actions$.pipe(\n    ofType(productReviewsActions.POST_PRODUCT_REVIEW),\n    map((action: productReviewsActions.PostProductReview) => action.payload),\n    mergeMap(payload => {\n      return this.occProductService\n        .postProductReview(payload.productCode, payload.review)\n        .pipe(\n          map(reviewResponse => {\n            return new productReviewsActions.PostProductReviewSuccess(\n              reviewResponse\n            );\n          }),\n          catchError(_error =>\n            of(\n              new productReviewsActions.PostProductReviewFail(\n                payload.productCode\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private occProductService: OccProductService\n  ) {}\n}\n","import { ProductsSearchEffects } from './product-search.effect';\nimport { ProductEffects } from './product.effect';\nimport { ProductReviewsEffects } from './product-reviews.effect';\n\nexport const effects: any[] = [\n  ProductsSearchEffects,\n  ProductEffects,\n  ProductReviewsEffects\n];\n\nexport * from './product-search.effect';\nexport * from './product.effect';\nexport * from './product-reviews.effect';\n","import { Injectable } from '@angular/core';\n\nimport { Store, select } from '@ngrx/store';\n\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\nimport * as fromStore from '../store/index';\nimport { Product } from '../../occ/occ-models/occ.models';\n\n@Injectable()\nexport class ProductService {\n  constructor(private store: Store<fromStore.StateWithProduct>) {}\n\n  /**\n   * Returns the product observable. The product will be loaded\n   * whenever there's no value observed.\n   *\n   * The underlying product loader ensures that the product is\n   * only loaded once, even in case of parallel observers.\n   */\n  get(productCode: string, forceReload = false): Observable<Product> {\n    return this.store.pipe(\n      select(fromStore.getSelectedProductStateFactory(productCode)),\n      tap(productState => {\n        const attemptedLoad =\n          productState.loading || productState.success || productState.error;\n\n        if (!attemptedLoad || forceReload) {\n          this.store.dispatch(new fromStore.LoadProduct(productCode));\n        }\n      }),\n      map(productState => productState.value)\n    );\n  }\n\n  /**\n   * Returns boolean observable for product's loading state\n   */\n  isLoading(productCode: string): Observable<boolean> {\n    return this.store.pipe(\n      select(fromStore.getSelectedProductLoadingFactory(productCode))\n    );\n  }\n\n  /**\n   * Returns boolean observable for product's load success state\n   */\n  isSuccess(productCode: string): Observable<boolean> {\n    return this.store.pipe(\n      select(fromStore.getSelectedProductSuccessFactory(productCode))\n    );\n  }\n\n  /**\n   * Returns boolean observable for product's load error state\n   */\n  hasError(productCode: string): Observable<boolean> {\n    return this.store.pipe(\n      select(fromStore.getSelectedProductErrorFactory(productCode))\n    );\n  }\n\n  /**\n   * Reloads the product. The product is loaded implicetly\n   * whenever selected by the `get`, but in some cases an\n   * explicit reload might be needed.\n   */\n  reload(productCode: string) {\n    this.store.dispatch(new fromStore.LoadProduct(productCode));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { select, Store } from '@ngrx/store';\n\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { SearchConfig } from '../model/search-config';\nimport * as fromStore from '../store/index';\nimport { ProductSearchPage, Suggestion } from '../../occ/occ-models';\n\n@Injectable()\nexport class ProductSearchService {\n  constructor(\n    private store: Store<fromStore.StateWithProduct>,\n    private router: Router\n  ) {}\n\n  search(query: string, searchConfig?: SearchConfig): void {\n    const urlTree = this.router.createUrlTree([], {\n      queryParams: { ...searchConfig, query },\n      preserveFragment: false\n    });\n\n    this.router.navigateByUrl(urlTree);\n    this.store.dispatch(\n      new fromStore.SearchProducts({\n        queryText: query,\n        searchConfig: searchConfig\n      })\n    );\n  }\n\n  getSearchResults(): Observable<ProductSearchPage> {\n    return this.store.pipe(select(fromStore.getSearchResults));\n  }\n\n  clearSearchResults(): void {\n    this.store.dispatch(new fromStore.CleanProductSearchState());\n  }\n\n  getAuxSearchResults(): Observable<ProductSearchPage> {\n    return this.store.pipe(\n      select(fromStore.getAuxSearchResults),\n      filter(results => Object.keys(results).length > 0)\n    );\n  }\n\n  getSearchSuggestions(): Observable<Suggestion[]> {\n    return this.store.pipe(select(fromStore.getProductSuggestions));\n  }\n\n  searchAuxiliary(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new fromStore.SearchProducts(\n        {\n          queryText: query,\n          searchConfig: searchConfig\n        },\n        true\n      )\n    );\n  }\n\n  getSuggestions(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new fromStore.GetProductSuggestions({\n        term: query,\n        searchConfig: searchConfig\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Store, select } from '@ngrx/store';\n\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport * as fromStore from '../store/index';\nimport { Review } from '../../occ/occ-models/occ.models';\n\n@Injectable()\nexport class ProductReviewService {\n  constructor(private store: Store<fromStore.StateWithProduct>) {}\n\n  getByProductCode(productCode: string): Observable<Review[]> {\n    const selector = fromStore.getSelectedProductReviewsFactory(productCode);\n    return this.store.pipe(\n      select(selector),\n      tap(reviews => {\n        if (reviews === undefined && productCode !== undefined) {\n          this.store.dispatch(new fromStore.LoadProductReviews(productCode));\n        }\n      })\n    );\n  }\n\n  add(productCode: string, review: Review): void {\n    this.store.dispatch(\n      new fromStore.PostProductReview({\n        productCode: productCode,\n        review\n      })\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider, metaReducers } from './reducers/index';\nimport { effects } from './effects/index';\nimport { PRODUCT_FEATURE } from './product-state';\n\nimport { ProductConverterModule } from './converters/index';\nimport { ProductOccModule } from '../occ/product-occ.module';\nimport { ConfigModule } from '../../config/config.module';\nimport { StateConfig } from '../../state/config/state-config';\n\nexport function productStoreConfigFactory(): StateConfig {\n  // if we want to reuse PRODUCT_FEATURE const in config, we have to use factory instead of plain object\n  const config = {\n    state: { ssrTransfer: { keys: { [PRODUCT_FEATURE]: true } } }\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    ProductOccModule,\n    ProductConverterModule,\n    StoreModule.forFeature(PRODUCT_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n    ConfigModule.withConfigFactory(productStoreConfigFactory)\n  ],\n  providers: [reducerProvider]\n})\nexport class ProductStoreModule {}\n","import { Action } from '@ngrx/store';\nimport { Page } from '../../model/page.model';\nimport { PageContext } from '../../../routing/index';\n\nexport const LOAD_PAGEDATA = '[Cms] Load PageData';\nexport const LOAD_PAGEDATA_FAIL = '[Cms] Load PageData Fail';\nexport const LOAD_PAGEDATA_SUCCESS = '[Cms] Load PageData Success';\nexport const REFRESH_LATEST_PAGE = '[Cms] Refresh latest page';\nexport const UPDATE_LATEST_PAGE_KEY = '[Cms] Update latest page key';\nexport const CLEAN_PAGE_STATE = '[Cms] Clean Page State;';\n\nexport class LoadPageData implements Action {\n  readonly type = LOAD_PAGEDATA;\n  constructor(public payload: PageContext) {}\n}\n\nexport class LoadPageDataFail implements Action {\n  readonly type = LOAD_PAGEDATA_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadPageDataSuccess implements Action {\n  readonly type = LOAD_PAGEDATA_SUCCESS;\n  constructor(public payload: { key: string; value: Page }) {}\n}\n\nexport class RefreshLatestPage implements Action {\n  readonly type = REFRESH_LATEST_PAGE;\n}\n\nexport class UpdateLatestPageKey implements Action {\n  readonly type = UPDATE_LATEST_PAGE_KEY;\n  constructor(public payload: string) {}\n}\n\nexport class CleanPageState implements Action {\n  readonly type = CLEAN_PAGE_STATE;\n  constructor() {}\n}\n\n// action types\nexport type PageAction =\n  | LoadPageData\n  | LoadPageDataFail\n  | LoadPageDataSuccess\n  | RefreshLatestPage\n  | UpdateLatestPageKey\n  | CleanPageState;\n","import * as fromPageData from '../actions/page.action';\nimport { Page } from '../../model/page.model';\nimport { PageState } from '../cms-state';\n\nexport const initialState: PageState = {\n  entities: {},\n  count: 0,\n  latestPageKey: ''\n};\n\nexport function reducer(\n  state = initialState,\n  action: fromPageData.PageAction\n): PageState {\n  switch (action.type) {\n    case fromPageData.UPDATE_LATEST_PAGE_KEY: {\n      const pageKey = action.payload;\n      return {\n        ...state,\n        latestPageKey: pageKey\n      };\n    }\n\n    case fromPageData.LOAD_PAGEDATA_SUCCESS: {\n      let page: { key: string; value: Page } = action.payload;\n\n      const existPage = state.entities[page.key];\n      if (existPage != null) {\n        let samePage = true;\n        for (const position of Object.keys(page.value.slots)) {\n          if (\n            page.value.slots[position].components.length !==\n            existPage.slots[position].components.length\n          ) {\n            samePage = false;\n            break;\n          }\n        }\n        if (samePage) {\n          page = {\n            ...page,\n            value: {\n              ...page.value,\n              seen: [...page.value.seen, ...existPage.seen]\n            }\n          };\n        }\n      }\n\n      const entities = {\n        ...state.entities,\n        [page.key]: page.value\n      };\n\n      return {\n        ...state,\n        entities,\n        count: state.count + 1,\n        latestPageKey: page.key\n      };\n    }\n\n    case fromPageData.REFRESH_LATEST_PAGE: {\n      const entities = {\n        ...state.entities,\n        [state.latestPageKey]: null\n      };\n\n      return {\n        ...state,\n        entities\n      };\n    }\n\n    case fromPageData.CLEAN_PAGE_STATE: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { NodeItem } from '../model/node-item.model';\nimport { Page } from '../model/page.model';\nimport { EntityLoaderState } from '../../state/utils/entity-loader/entity-loader-state';\n\nexport const CMS_FEATURE = 'cms';\nexport const NAVIGATION_DETAIL_ENTITY = '[Cms] Navigation Entity';\nexport const COMPONENT_ENTITY = '[Cms[ Component Entity';\n\nexport interface StateWithCms {\n  [CMS_FEATURE]: CmsState;\n}\n\nexport type ComponentState = EntityLoaderState<any>;\n\nexport interface NavigationNodes {\n  [nodeId: string]: NodeItem;\n}\n\nexport interface PageState {\n  entities: { [context: string]: Page };\n  count: number;\n  latestPageKey: string;\n}\n\nexport interface CmsState {\n  page: PageState;\n  component: ComponentState;\n  navigation: EntityLoaderState<NodeItem>;\n}\n","import { NAVIGATION_DETAIL_ENTITY } from '../cms-state';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction\n} from '../../../state/utils/entity-loader/entity-loader.action';\n\nexport const LOAD_NAVIGATION_ITEMS = '[Cms] Load NavigationEntry items';\nexport const LOAD_NAVIGATION_ITEMS_FAIL =\n  '[Cms] Load NavigationEntry items Fail';\nexport const LOAD_NAVIGATION_ITEMS_SUCCESS =\n  '[Cms] Load NavigationEntry items Success';\n\nexport class LoadNavigationItems extends EntityLoadAction {\n  readonly type = LOAD_NAVIGATION_ITEMS;\n  constructor(public payload: { nodeId: string; items: any[] }) {\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\n  }\n}\n\nexport class LoadNavigationItemsFail extends EntityFailAction {\n  readonly type = LOAD_NAVIGATION_ITEMS_FAIL;\n  constructor(nodeId: string, public payload: any) {\n    super(NAVIGATION_DETAIL_ENTITY, nodeId, payload);\n  }\n}\n\nexport class LoadNavigationItemsSuccess extends EntitySuccessAction {\n  readonly type = LOAD_NAVIGATION_ITEMS_SUCCESS;\n  constructor(public payload: { nodeId: string; components: any[] }) {\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\n  }\n}\n\n// action types\nexport type NavigationEntryItemAction =\n  | LoadNavigationItems\n  | LoadNavigationItemsFail\n  | LoadNavigationItemsSuccess;\n","import * as fromNavigationItem from '../actions/navigation-entry-item.action';\nimport { NodeItem } from '../../model/node-item.model';\n\nexport const initialState: NodeItem = undefined;\n\nexport function reducer(\n  state = initialState,\n  action: fromNavigationItem.NavigationEntryItemAction\n): NodeItem {\n  switch (action.type) {\n    case fromNavigationItem.LOAD_NAVIGATION_ITEMS_SUCCESS: {\n      if (action.payload.components) {\n        const components = action.payload.components;\n\n        const newItem: NodeItem = components.reduce(\n          (compItems: { [uid_type: string]: any }, component: any) => {\n            return {\n              ...compItems,\n              [`${component.uid}_AbstractCMSComponent`]: component\n            };\n          },\n          {\n            ...{}\n          }\n        );\n\n        return {\n          ...state,\n          ...newItem\n        };\n      }\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer,\n  Action\n} from '@ngrx/store';\n\nimport * as fromPage from './page.reducer';\nimport * as fromNavigation from './navigation-entry-item.reducer';\nimport {\n  COMPONENT_ENTITY,\n  NAVIGATION_DETAIL_ENTITY,\n  CmsState\n} from '../cms-state';\nimport { NodeItem } from '../../model/node-item.model';\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\n\nexport function getReducers(): ActionReducerMap<CmsState> {\n  return {\n    page: fromPage.reducer,\n    component: entityLoaderReducer(COMPONENT_ENTITY),\n    navigation: entityLoaderReducer<NodeItem>(\n      NAVIGATION_DETAIL_ENTITY,\n      fromNavigation.reducer\n    )\n  };\n}\n\nexport const reducerToken: InjectionToken<\n  ActionReducerMap<CmsState>\n> = new InjectionToken<ActionReducerMap<CmsState>>('CmsReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers\n};\n\nexport function clearCmsState(\n  reducer: ActionReducer<any, Action>\n): ActionReducer<any, Action> {\n  return function(state, action) {\n    if (\n      action.type === '[Site-context] Language Change' ||\n      action.type === '[Auth] Logout' ||\n      action.type === '[Auth] Login'\n    ) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearCmsState];\n","import { CmsComponent } from '../../../occ/occ-models/index';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport { COMPONENT_ENTITY } from '../cms-state';\n\nexport const LOAD_COMPONENT = '[Cms] Load Component';\nexport const LOAD_COMPONENT_FAIL = '[Cms] Load Component Fail';\nexport const LOAD_COMPONENT_SUCCESS = '[Cms] Load Component Success';\nexport const GET_COMPONENET_FROM_PAGE = '[Cms] Get Component from Page';\n\nexport class LoadComponent extends EntityLoadAction {\n  readonly type = LOAD_COMPONENT;\n  constructor(public payload: string) {\n    super(COMPONENT_ENTITY, payload);\n  }\n}\n\nexport class LoadComponentFail extends EntityFailAction {\n  readonly type = LOAD_COMPONENT_FAIL;\n  constructor(uid: string, public payload: any) {\n    super(COMPONENT_ENTITY, uid, payload);\n  }\n}\n\nexport class LoadComponentSuccess<\n  T extends CmsComponent\n> extends EntitySuccessAction {\n  readonly type = LOAD_COMPONENT_SUCCESS;\n  constructor(public payload: T) {\n    super(COMPONENT_ENTITY, payload.uid);\n  }\n}\n\nexport class GetComponentFromPage<\n  T extends CmsComponent\n> extends EntitySuccessAction {\n  readonly type = GET_COMPONENET_FROM_PAGE;\n  constructor(public payload: T[]) {\n    super(COMPONENT_ENTITY, payload.map(cmp => cmp.uid));\n  }\n}\n\n// action types\nexport type ComponentAction<T extends CmsComponent> =\n  | LoadComponent\n  | LoadComponentFail\n  | LoadComponentSuccess<T>\n  | GetComponentFromPage<T>;\n","import { StaticProvider } from '@angular/core';\nimport { OccConfig } from '../../occ/config/occ-config';\nimport { AuthConfig } from '../../auth/config/auth-config';\n\nexport interface StandardCmsComponentConfig {\n  SiteContextSelectorComponent?: CmsComponentMapping;\n  CMSLinkComponent?: CmsComponentMapping;\n  SimpleResponsiveBannerComponent?: CmsComponentMapping;\n  SimpleBannerComponent?: CmsComponentMapping;\n  CMSParagraphComponent?: CmsComponentMapping;\n  BreadcrumbComponent?: CmsComponentMapping;\n  NavigationComponent?: CmsComponentMapping;\n  FooterNavigationComponent?: CmsComponentMapping;\n  CategoryNavigationComponent?: CmsComponentMapping;\n  ProductAddToCartComponent?: CmsComponentMapping;\n  MiniCartComponent?: CmsComponentMapping;\n  ProductCarouselComponent?: CmsComponentMapping;\n  SearchBoxComponent?: CmsComponentMapping;\n  ProductReferencesComponent?: CmsComponentMapping;\n  CMSTabParagraphComponent?: CmsComponentMapping;\n}\n\nexport interface JspIncludeCmsComponentConfig {\n  AccountAddressBookComponent?: CmsComponentMapping;\n}\n\nexport const JSP_INCLUDE_CMS_COMPONENT_TYPE = 'JspIncludeComponent';\n\nexport interface CmsComponentMapping {\n  selector?: string;\n  providers?: StaticProvider[];\n  disableSSR?: boolean;\n}\n\nexport interface CMSComponentConfig\n  extends StandardCmsComponentConfig,\n    JspIncludeCmsComponentConfig {\n  [_: string]: CmsComponentMapping;\n}\n\nexport abstract class CmsConfig extends OccConfig implements AuthConfig {\n  authentication?: {\n    client_id?: string;\n    client_secret?: string;\n  };\n\n  defaultPageIdForType?: {\n    ProductPage?: string[];\n    CategoryPage?: string[];\n  };\n\n  cmsComponents?: CMSComponentConfig;\n}\n","import { throwError, Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { IdList } from './../model/idList.model';\nimport { CmsConfig } from '../config/cms-config';\nimport { PageContext } from '../../routing/index';\nimport {\n  CMSPage,\n  PageType,\n  CmsComponent,\n  CmsComponentList\n} from '../../occ/occ-models/index';\n\n@Injectable()\nexport class OccCmsService {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(private http: HttpClient, private config: CmsConfig) {}\n\n  protected getBaseEndPoint(): string {\n    return (\n      (this.config.server.baseUrl || '') +\n      this.config.server.occPrefix +\n      this.config.site.baseSite +\n      '/cms'\n    );\n  }\n\n  loadPageData(pageContext: PageContext, fields?: string): Observable<CMSPage> {\n    let httpStringParams = 'pageType=' + pageContext.type;\n\n    if (pageContext.type === PageType.CONTENT_PAGE) {\n      httpStringParams = httpStringParams + '&pageLabelOrId=' + pageContext.id;\n    } else {\n      httpStringParams = httpStringParams + '&code=' + pageContext.id;\n    }\n\n    if (fields !== undefined) {\n      httpStringParams = httpStringParams + '&fields=' + fields;\n    }\n\n    return this.http\n      .get(this.getBaseEndPoint() + `/pages`, {\n        headers: this.headers,\n        params: new HttpParams({\n          fromString: httpStringParams\n        })\n      })\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n\n  loadComponent<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<T> {\n    return this.http\n      .get<T>(this.getBaseEndPoint() + `/components/${id}`, {\n        headers: this.headers,\n        params: new HttpParams({\n          fromString: this.getRequestParams(pageContext, fields)\n        })\n      })\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n\n  loadListComponents(\n    idList: IdList,\n    pageContext: PageContext,\n    fields?: string,\n    currentPage?: number,\n    pageSize?: number,\n    sort?: string\n  ): Observable<CmsComponentList> {\n    let requestParams = this.getRequestParams(pageContext, fields);\n    if (currentPage !== undefined) {\n      requestParams === ''\n        ? (requestParams = requestParams + 'currentPage=' + currentPage)\n        : (requestParams = requestParams + '&currentPage=' + currentPage);\n    }\n    if (pageSize !== undefined) {\n      requestParams = requestParams + '&pageSize=' + pageSize;\n    }\n    if (sort !== undefined) {\n      requestParams = requestParams + '&sort=' + sort;\n    }\n\n    return this.http\n      .post<CmsComponentList>(this.getBaseEndPoint() + `/components`, idList, {\n        headers: this.headers,\n        params: new HttpParams({\n          fromString: requestParams\n        })\n      })\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n\n  private getRequestParams(pageContext: PageContext, fields?: string): string {\n    let requestParams = '';\n    switch (pageContext.type) {\n      case PageType.PRODUCT_PAGE: {\n        requestParams = 'productCode=' + pageContext.id;\n        break;\n      }\n      case PageType.CATEGORY_PAGE: {\n        requestParams = 'categoryCode=' + pageContext.id;\n        break;\n      }\n      case PageType.CATALOG_PAGE: {\n        requestParams = 'catalogCode=' + pageContext.id;\n        break;\n      }\n    }\n\n    if (fields !== undefined) {\n      requestParams === ''\n        ? (requestParams = requestParams + 'fields=' + fields)\n        : (requestParams = requestParams + '&fields=' + fields);\n    }\n\n    return requestParams;\n  }\n\n  get baseUrl(): string {\n    return this.config.server.baseUrl || '';\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CmsConfig } from '../config/cms-config';\nimport { PageType } from '../../occ/occ-models/index';\n\n@Injectable()\nexport class DefaultPageService {\n  constructor(private config: CmsConfig) {}\n\n  getDefaultPageIdsBytype(type: PageType): string[] {\n    return this.config.defaultPageIdForType[type];\n  }\n}\n","import { PageType } from '../../occ/occ-models';\n\nexport class PageContext {\n  id: string;\n  type?: PageType;\n\n  constructor(id: string, type?: PageType) {\n    this.id = id;\n    this.type = type;\n\n    if (this.type == null) {\n      this.type = PageType.CONTENT_PAGE;\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { UrlTranslationService } from './url-translation.service';\nimport { TranslateUrlOptions } from './translate-url-options';\n\n@Pipe({\n  name: 'cxTranslateUrl'\n})\nexport class TranslateUrlPipe implements PipeTransform {\n  constructor(private urlTranslator: UrlTranslationService) {}\n\n  transform(options: TranslateUrlOptions): string | string[] {\n    return this.urlTranslator.translate(options);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TranslateUrlPipe } from './translate-url.pipe';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [TranslateUrlPipe],\n  exports: [TranslateUrlPipe]\n})\nexport class UrlTranslationModule {}\n","import { Injectable } from '@angular/core';\n\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport {\n  map,\n  catchError,\n  switchMap,\n  mergeMap,\n  filter,\n  take\n} from 'rxjs/operators';\n\nimport * as pageActions from '../actions/page.action';\nimport * as componentActions from '../actions/component.action';\nimport { OccCmsService } from '../../occ/occ-cms.service';\nimport { DefaultPageService } from '../../services/default-page.service';\n\nimport { Page } from '../../model/page.model';\nimport { ContentSlotData } from '../../model/content-slot-data.model';\n\nimport { RoutingService, PageContext } from '../../../routing/index';\nimport { PageType, CMSPage } from '../../../occ/occ-models/index';\n\n@Injectable()\nexport class PageEffects {\n  @Effect()\n  loadPage$: Observable<any> = this.actions$.pipe(\n    ofType(\n      pageActions.LOAD_PAGEDATA,\n      pageActions.REFRESH_LATEST_PAGE,\n      '[Site-context] Language Change',\n      '[Auth] Logout',\n      '[Auth] Login'\n    ),\n    map((action: pageActions.LoadPageData) => action.payload),\n    switchMap(pageContext => {\n      if (pageContext === undefined) {\n        return this.routingService.getRouterState().pipe(\n          filter(routerState => routerState && routerState.state),\n          filter(routerState => routerState.state.cmsRequired),\n          map(routerState => routerState.state.context),\n          take(1),\n          mergeMap(context =>\n            this.occCmsService.loadPageData(context).pipe(\n              mergeMap(data => {\n                return [\n                  new pageActions.LoadPageDataSuccess(\n                    this.getPageData(data, context)\n                  ),\n                  new componentActions.GetComponentFromPage(\n                    this.getComponents(data)\n                  )\n                ];\n              }),\n              catchError(error => of(new pageActions.LoadPageDataFail(error)))\n            )\n          )\n        );\n      } else {\n        return this.occCmsService.loadPageData(pageContext).pipe(\n          mergeMap(data => {\n            return [\n              new pageActions.LoadPageDataSuccess(\n                this.getPageData(data, pageContext)\n              ),\n              new componentActions.GetComponentFromPage(\n                this.getComponents(data)\n              )\n            ];\n          }),\n          catchError(error => of(new pageActions.LoadPageDataFail(error)))\n        );\n      }\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private occCmsService: OccCmsService,\n    private defaultPageService: DefaultPageService,\n    private routingService: RoutingService\n  ) {}\n\n  private getPageData(\n    res: any,\n    pageContext: PageContext\n  ): { key: string; value: Page } {\n    const page: Page = {\n      loadTime: Date.now(),\n      uuid: res.uuid,\n      name: res.name,\n      type: res.typeCode,\n      title: res.title,\n      catalogUuid: this.getCatalogUuid(res),\n      pageId: res.uid,\n      template: res.template,\n      seen: new Array<string>(),\n      slots: {}\n    };\n    page.seen.push(pageContext.id);\n\n    for (const slot of res.contentSlots.contentSlot) {\n      page.slots[slot.position] = {\n        uid: slot.slotId,\n        uuid: slot.slotUuid,\n        catalogUuid: this.getCatalogUuid(slot),\n        components: []\n      } as ContentSlotData;\n\n      if (\n        slot.components.component &&\n        Array.isArray(slot.components.component)\n      ) {\n        for (const component of slot.components.component) {\n          page.slots[slot.position].components.push({\n            uid: component.uid,\n            uuid: component.uuid,\n            catalogUuid: this.getCatalogUuid(component),\n            typeCode: component.typeCode\n          });\n        }\n      }\n    }\n\n    return { key: this.getPageKey(pageContext, page), value: page };\n  }\n\n  private getPageKey(pageContext: PageContext, page: Page): string {\n    switch (pageContext.type) {\n      case PageType.CATEGORY_PAGE:\n      case PageType.CATALOG_PAGE:\n      case PageType.PRODUCT_PAGE: {\n        const defaultPageIds = this.defaultPageService.getDefaultPageIdsBytype(\n          pageContext.type\n        );\n        if (defaultPageIds.indexOf(page.pageId) > -1) {\n          return page.pageId + '_' + pageContext.type;\n        } else {\n          return pageContext.id + '_' + pageContext.type;\n        }\n      }\n\n      case PageType.CONTENT_PAGE: {\n        return page.pageId + '_' + pageContext.type;\n      }\n    }\n  }\n\n  private getCatalogUuid(cmsItem: any): string {\n    if (cmsItem.properties && cmsItem.properties.smartedit) {\n      const smartEditProp = cmsItem.properties.smartedit;\n      if (smartEditProp.catalogVersionUuid) {\n        return smartEditProp.catalogVersionUuid;\n      } else if (smartEditProp.classes) {\n        let catalogUuid: string;\n        const seClass = smartEditProp.classes.split(' ');\n        seClass.forEach(item => {\n          if (item.indexOf('smartedit-catalog-version-uuid') > -1) {\n            catalogUuid = item.substr('smartedit-catalog-version-uuid-'.length);\n          }\n        });\n        return catalogUuid;\n      }\n    }\n  }\n\n  private getComponents(pageData: CMSPage): any[] {\n    const components = [];\n    if (pageData) {\n      for (const slot of pageData.contentSlots.contentSlot) {\n        if (\n          slot.components.component &&\n          Array.isArray(slot.components.component)\n        ) {\n          for (const component of slot.components.component as any) {\n            // we dont put smartedit properties into store\n            if (component.properties) {\n              component.properties = undefined;\n            }\n            components.push(component);\n          }\n        }\n      }\n    }\n    return components;\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport {\n  map,\n  catchError,\n  switchMap,\n  filter,\n  mergeMap,\n  take\n} from 'rxjs/operators';\n\nimport * as componentActions from '../actions/component.action';\nimport { OccCmsService } from '../../occ/occ-cms.service';\nimport { RoutingService } from '../../../routing/index';\n\n@Injectable()\nexport class ComponentEffects {\n  constructor(\n    private actions$: Actions,\n    private occCmsService: OccCmsService,\n    private routingService: RoutingService\n  ) {}\n\n  @Effect()\n  loadComponent$: Observable<any> = this.actions$.pipe(\n    ofType(componentActions.LOAD_COMPONENT),\n    map((action: componentActions.LoadComponent) => action.payload),\n    switchMap(uid => {\n      return this.routingService.getRouterState().pipe(\n        filter(routerState => routerState !== undefined),\n        map(routerState => routerState.state.context),\n        take(1),\n        mergeMap(pageContext =>\n          this.occCmsService.loadComponent(uid, pageContext).pipe(\n            map(data => new componentActions.LoadComponentSuccess(data)),\n            catchError(error =>\n              of(new componentActions.LoadComponentFail(uid, error))\n            )\n          )\n        )\n      );\n    })\n  );\n}\n","import { Injectable } from '@angular/core';\n\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError, filter, mergeMap, take } from 'rxjs/operators';\n\nimport * as navigationItemActions from '../actions/navigation-entry-item.action';\nimport { OccCmsService } from '../../occ/occ-cms.service';\nimport { IdList } from '../../model/idList.model';\nimport { RoutingService } from '../../../routing/index';\n\n@Injectable()\nexport class NavigationEntryItemEffects {\n  @Effect()\n  loadNavigationItems$: Observable<any> = this.actions$.pipe(\n    ofType(navigationItemActions.LOAD_NAVIGATION_ITEMS),\n    map((action: navigationItemActions.LoadNavigationItems) => action.payload),\n    map(payload => {\n      return {\n        ids: this.getIdListByItemType(payload.items),\n        nodeId: payload.nodeId\n      };\n    }),\n    mergeMap(data => {\n      if (data.ids.componentIds.idList.length > 0) {\n        return this.routingService.getRouterState().pipe(\n          filter(routerState => routerState !== undefined),\n          map(routerState => routerState.state.context),\n          take(1),\n          mergeMap(pageContext => {\n            // download all items in one request\n            return this.occCmsService\n              .loadListComponents(\n                data.ids.componentIds,\n                pageContext,\n                'DEFAULT',\n                0,\n                data.ids.componentIds.idList.length\n              )\n              .pipe(\n                map(\n                  res =>\n                    new navigationItemActions.LoadNavigationItemsSuccess({\n                      nodeId: data.nodeId,\n                      components: res.component\n                    })\n                ),\n                catchError(error =>\n                  of(\n                    new navigationItemActions.LoadNavigationItemsFail(\n                      data.nodeId,\n                      error\n                    )\n                  )\n                )\n              );\n          })\n        );\n      } else if (data.ids.pageIds.idList.length > 0) {\n        // TODO: future work\n        // dispatch action to load cms page one by one\n      } else if (data.ids.mediaIds.idList.length > 0) {\n        // TODO: future work\n        // send request to get list of media\n      } else {\n        return of(\n          new navigationItemActions.LoadNavigationItemsFail(\n            data.nodeId,\n            'navigation nodes are empty'\n          )\n        );\n      }\n    })\n  );\n\n  // We only consider 3 item types: cms page, cms component, and media.\n  getIdListByItemType(itemList: any[]) {\n    const pageIds: IdList = { idList: [] };\n    const componentIds: IdList = { idList: [] };\n    const mediaIds: IdList = { idList: [] };\n\n    itemList.forEach(item => {\n      if (item.superType === 'AbstractCMSComponent') {\n        componentIds.idList.push(item.id);\n      } else if (item.superType === 'AbstractPage') {\n        pageIds.idList.push(item.id);\n      } else if (item.superType === 'AbstractMedia') {\n        mediaIds.idList.push(item.id);\n      }\n    });\n    return { pageIds: pageIds, componentIds: componentIds, mediaIds: mediaIds };\n  }\n\n  constructor(\n    private actions$: Actions,\n    private occCmsService: OccCmsService,\n    private routingService: RoutingService\n  ) {}\n}\n","import { PageEffects } from './page.effect';\nimport { ComponentEffects } from './component.effect';\nimport { NavigationEntryItemEffects } from './navigation-entry-item.effect';\n\nexport const effects: any[] = [\n  PageEffects,\n  ComponentEffects,\n  NavigationEntryItemEffects\n];\n\nexport * from './page.effect';\nexport * from './component.effect';\nexport * from './navigation-entry-item.effect';\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { CMS_FEATURE, CmsState, StateWithCms } from '../cms-state';\n\nexport const getCmsState: MemoizedSelector<\n  StateWithCms,\n  CmsState\n> = createFeatureSelector<CmsState>(CMS_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { CmsState, PageState, StateWithCms } from '../cms-state';\nimport { ContentSlotData } from '../../model/content-slot-data.model';\nimport { Page } from '../../model/page.model';\n\nimport { getCmsState } from './feature.selectors';\n\nexport const getPageEntitiesSelector = (state: PageState) => state.entities;\nexport const getPageCount = (state: PageState) => state.count;\nexport const getLatestPageKeySelector = (state: PageState) =>\n  state.latestPageKey;\n\nexport const getPageState: MemoizedSelector<\n  StateWithCms,\n  PageState\n> = createSelector(\n  getCmsState,\n  (state: CmsState) => state.page\n);\n\nexport const getPageEntities: MemoizedSelector<\n  StateWithCms,\n  { [context: string]: Page }\n> = createSelector(\n  getPageState,\n  getPageEntitiesSelector\n);\n\nexport const getLatestPageKey: MemoizedSelector<\n  StateWithCms,\n  string\n> = createSelector(\n  getPageState,\n  getLatestPageKeySelector\n);\n\nexport const getLatestPage: MemoizedSelector<\n  StateWithCms,\n  Page\n> = createSelector(\n  getPageEntities,\n  getLatestPageKey,\n  (entities, key): Page => {\n    return entities[key];\n  }\n);\n\nexport const currentSlotSelectorFactory = (\n  position: string\n): MemoizedSelector<StateWithCms, ContentSlotData> => {\n  return createSelector(\n    getLatestPage,\n    entity => {\n      if (entity) {\n        return entity.slots[position];\n      }\n    }\n  );\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { CmsState, ComponentState, StateWithCms } from '../cms-state';\n\nimport { getCmsState } from './feature.selectors';\nimport { entityStateSelector } from '../../../state/utils/entity-loader/entity-loader.selectors';\nimport { loaderValueSelector } from '../../../state/utils/loader/loader.selectors';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\n\nexport const getComponentEntitiesSelector = (state: ComponentState) =>\n  Object.keys(state.entities).reduce((acc, cur) => {\n    acc[cur] = state.entities[cur].value;\n    return acc;\n  }, {});\n\nexport const getComponentState: MemoizedSelector<\n  StateWithCms,\n  ComponentState\n> = createSelector(\n  getCmsState,\n  (state: CmsState) => state.component\n);\n\nexport const getComponentEntities: MemoizedSelector<\n  StateWithCms,\n  { [id: string]: any }\n> = createSelector(\n  getComponentState,\n  getComponentEntitiesSelector\n);\n\nexport const componentStateSelectorFactory = (\n  uid: string\n): MemoizedSelector<StateWithCms, LoaderState<any>> => {\n  return createSelector(\n    getComponentState,\n    entities => entityStateSelector(entities, uid)\n  );\n};\n\nexport const componentSelectorFactory = (\n  uid: string\n): MemoizedSelector<StateWithCms, any> => {\n  return createSelector(\n    componentStateSelectorFactory(uid),\n    state => loaderValueSelector(state)\n  );\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { CmsState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\nimport { NodeItem } from '../../model/node-item.model';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { entityStateSelector } from '../../../state/utils/entity-loader/entity-loader.selectors';\nimport { loaderValueSelector } from '../../../state/utils/loader/loader.selectors';\n\nexport const getNavigationEntryItemState: MemoizedSelector<\n  StateWithCms,\n  EntityLoaderState<NodeItem>\n> = createSelector(\n  getCmsState,\n  (state: CmsState) => state.navigation\n);\n\nexport const getSelectedNavigationEntryItemState = (\n  nodeId: string\n): MemoizedSelector<StateWithCms, LoaderState<NodeItem>> => {\n  return createSelector(\n    getNavigationEntryItemState,\n    nodes => entityStateSelector(nodes, nodeId)\n  );\n};\n\nexport const itemsSelectorFactory = (\n  nodeId: string\n): MemoizedSelector<StateWithCms, NodeItem> => {\n  return createSelector(\n    getSelectedNavigationEntryItemState(nodeId),\n    itemState => loaderValueSelector(itemState)\n  );\n};\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport * as fromStore from '../store';\nimport { filter, tap, map, take, withLatestFrom } from 'rxjs/operators';\nimport { select, Store } from '@ngrx/store';\nimport { Page } from '../model/page.model';\nimport { ContentSlotData } from '../model/content-slot-data.model';\nimport { DefaultPageService } from '../services/default-page.service';\nimport { StateWithCms } from '../store/cms-state';\nimport { CmsComponent } from '../../occ/occ-models/cms-component.models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CmsService {\n  private _launchInSmartEdit = false;\n\n  constructor(\n    private store: Store<StateWithCms>,\n    private defaultPageService: DefaultPageService\n  ) {}\n\n  /**\n   * Set _launchInSmartEdit value\n   */\n  set launchInSmartEdit(value) {\n    this._launchInSmartEdit = value;\n  }\n\n  /**\n   * Whether the app launched in smart edit\n   */\n  isLaunchInSmartEdit(): boolean {\n    return this._launchInSmartEdit;\n  }\n\n  /**\n   * Get current CMS page data\n   */\n  getCurrentPage(): Observable<Page> {\n    return this.store.pipe(select(fromStore.getLatestPage));\n  }\n\n  /**\n   * Get CMS component data by uid\n   * @param uid : CMS componet uid\n   */\n  getComponentData<T extends CmsComponent>(uid: string): Observable<T> {\n    return this.store.pipe(\n      select(fromStore.componentStateSelectorFactory(uid)),\n      withLatestFrom(this.getCurrentPage()),\n      tap(([componentState, currentPage]) => {\n        const attemptedLoad =\n          componentState.loading ||\n          componentState.success ||\n          componentState.error;\n        if (!attemptedLoad && currentPage) {\n          this.store.dispatch(new fromStore.LoadComponent(uid));\n        }\n      }),\n      map(([productState]) => productState.value),\n      filter(Boolean)\n    );\n  }\n\n  /**\n   * Given the position, get the content slot data\n   * @param position : content slot position\n   */\n  getContentSlot(position: string): Observable<ContentSlotData> {\n    return this.store.pipe(\n      select(fromStore.currentSlotSelectorFactory(position)),\n      filter(Boolean)\n    );\n  }\n\n  /**\n   * Given navigation node uid, get items (with id and type) inside the navigation entries\n   * @param navigationNodeUid : uid of the navigation node\n   */\n  getNavigationEntryItems(navigationNodeUid: string): Observable<any> {\n    return this.store.pipe(\n      select(fromStore.itemsSelectorFactory(navigationNodeUid))\n    );\n  }\n\n  /**\n   * Load navigation items data\n   * @param rootUid : the uid of the root navigation node\n   * @param itemList : list of items (with id and type)\n   */\n  loadNavigationItems(\n    rootUid: string,\n    itemList: { id: string; superType: string }[]\n  ) {\n    this.store.dispatch(\n      new fromStore.LoadNavigationItems({\n        nodeId: rootUid,\n        items: itemList\n      })\n    );\n  }\n\n  /**\n   * Refresh the content of the latest cms page\n   */\n  refreshLatestPage() {\n    this.store.dispatch(new fromStore.RefreshLatestPage());\n  }\n\n  /**\n   * Refresh cms component's content\n   * @param uid : component uid\n   */\n  refreshComponent(uid: string) {\n    this.store.dispatch(new fromStore.LoadComponent(uid));\n  }\n\n  /**\n   * Given pageContext, return whether the CMS page data exists or not\n   * @param pageContext\n   */\n  hasPage(pageContext): Observable<boolean> {\n    let tryTimes = 0;\n\n    return this.store.pipe(\n      select(fromStore.getPageEntities),\n      map((entities: { [key: string]: Page }) => {\n        let key = pageContext.id + '_' + pageContext.type;\n        let found = !!entities[key];\n        if (!found) {\n          const defaultPageIds = this.defaultPageService.getDefaultPageIdsBytype(\n            pageContext.type\n          );\n          if (defaultPageIds) {\n            for (let i = 0, len = defaultPageIds.length; i < len; i++) {\n              key = defaultPageIds[i] + '_' + pageContext.type;\n              found =\n                entities[key] &&\n                entities[key].seen.indexOf(pageContext.id) > -1;\n              if (found) {\n                break;\n              }\n            }\n          }\n        }\n        // found page directly from store\n        if (found && tryTimes === 0) {\n          this.store.dispatch(new fromStore.UpdateLatestPageKey(key));\n        }\n        return found;\n      }),\n      tap(found => {\n        // if not found, load this cms page\n        if (!found) {\n          tryTimes = tryTimes + 1;\n          this.store.dispatch(new fromStore.LoadPageData(pageContext));\n        }\n      }),\n      filter(found => found || tryTimes === 3),\n      take(1)\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { PageType } from '../../occ';\nimport { Page } from '../model/page.model';\n\nexport abstract class PageTitleResolver {\n  pageType: PageType;\n  pageTemplate: string;\n\n  abstract resolve(): Observable<string>;\n\n  getScore(page: Page): number {\n    let score = 0;\n\n    if (this.pageType) {\n      score += page.type === this.pageType ? 1 : -1;\n    }\n    if (this.pageTemplate) {\n      score += page.template === this.pageTemplate ? 1 : -1;\n    }\n    return score;\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, filter } from 'rxjs/operators';\nimport { Page } from '../model/page.model';\nimport { CmsService } from './cms.service';\nimport { PageTitleResolver } from '../page/page-title.resolver';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PageTitleService {\n  constructor(\n    @Inject(PageTitleResolver) private resolvers: PageTitleResolver[],\n    protected cms: CmsService\n  ) {}\n\n  getTitle(): Observable<string> {\n    return this.cms.getCurrentPage().pipe(\n      filter(Boolean),\n      switchMap(page => {\n        const pageTitleResolver = this.getResolver(page);\n        if (pageTitleResolver) {\n          return pageTitleResolver.resolve();\n        } else {\n          // we do not have a page resolver\n          return of('');\n        }\n      })\n    );\n  }\n\n  /**\n   * return the title resolver with the best match\n   * title resovers can by default match on PageType and page template\n   * but custom match comparisors can be implemented.\n   */\n  protected getResolver(page: Page) {\n    const matchingResolvers = this.resolvers.filter(\n      resolver => resolver.getScore(page) > 0\n    );\n    matchingResolvers.sort(function(a, b) {\n      return b.getScore(page) - a.getScore(page);\n    });\n    return matchingResolvers[0];\n  }\n}\n","import {\n  Injectable,\n  Type,\n  ComponentFactoryResolver,\n  Inject,\n  Renderer2,\n  PLATFORM_ID\n} from '@angular/core';\nimport { CmsConfig } from '../config/cms-config';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\n\n@Injectable()\nexport class ComponentMapperService {\n  missingComponents: string[] = [];\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private config: CmsConfig,\n    @Inject(DOCUMENT) private document: any,\n    @Inject(PLATFORM_ID) private platform: any\n  ) {}\n\n  /**\n   * @desc\n   * returns a web component for the CMS typecode.\n   *\n   * The mapping of CMS components to web componetns requires a mapping.\n   * This is configurable when the module is loaded.\n   *\n   * For example:\n   *\n   *  {\n   *      'CMSLinkComponent': 'LinkComponent',\n   *      'SimpleResponsiveBannerComponent': 'SimpleResponsiveBannerComponent',\n   *      [etc.]\n   *  }\n   *\n   * The type codes are dynamic since they depend on the implementation.\n   * Customer will add, extend or ingore standard components.\n   *\n   * @param typeCode the component type\n   */\n  protected getType(typeCode: string): string {\n    const componentConfig = this.config.cmsComponents[typeCode];\n    if (!componentConfig) {\n      if (this.missingComponents.indexOf(typeCode) === -1) {\n        this.missingComponents.push(typeCode);\n        console.warn(\n          'No component implementation found for the CMS component type',\n          typeCode,\n          '.\\n',\n          'Make sure you implement a component and register it in the mapper.'\n        );\n      }\n    }\n    return componentConfig ? componentConfig.selector : null;\n  }\n\n  getFactoryEntryByCode(typeCode: string): any {\n    const alias = this.getType(typeCode);\n    if (!alias) {\n      return;\n    }\n    const factoryEntries = Array.from(\n      this.componentFactoryResolver['_factories'].entries()\n    );\n\n    return factoryEntries.find(([, value]: any) => value.selector === alias);\n  }\n\n  getComponentTypeByCode(typeCode: string): Type<any> {\n    const factoryEntry = this.getFactoryEntryByCode(typeCode);\n    return factoryEntry ? factoryEntry[0] : null;\n  }\n\n  getComponentFactoryByCode(typeCode: string): any {\n    const factoryEntry = this.getFactoryEntryByCode(typeCode);\n    return factoryEntry ? factoryEntry[1] : null;\n  }\n\n  isWebComponent(typeCode: string): boolean {\n    return (this.getType(typeCode) || '').includes('#');\n  }\n\n  initWebComponent(\n    componentType: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise(resolve => {\n      const [path, selector] = this.getType(componentType).split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        script = renderer.createElement('script');\n        this.loadedWebComponents[path] = script;\n        script.setAttribute('src', path);\n        renderer.appendChild(this.document.body, script);\n\n        if (isPlatformBrowser(this.platform)) {\n          script.onload = () => {\n            script.onload = null;\n          };\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { OccCmsService } from './occ-cms.service';\nimport { ComponentMapperService } from '../services/component-mapper.service';\nimport { DefaultPageService } from '../services/default-page.service';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [OccCmsService, ComponentMapperService, DefaultPageService]\n})\nexport class CmsOccModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { CMS_FEATURE } from './cms-state';\n\nimport { metaReducers } from './reducers/index';\nimport { CmsOccModule } from '../occ/cms-occ.module';\nimport { StateModule } from '../../state/state.module';\nimport { StateConfig } from '../../state/config/state-config';\nimport { ConfigModule } from '../../config/config.module';\n\nexport function cmsStoreConfigFactory(): StateConfig {\n  // if we want to reuse CMS_FEATURE const in config, we have to use factory instead of plain object\n  const config = {\n    state: { ssrTransfer: { keys: { [CMS_FEATURE]: true } } }\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    CmsOccModule,\n    StateModule,\n    StoreModule.forFeature(CMS_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n    ConfigModule.withConfigFactory(cmsStoreConfigFactory)\n  ],\n  providers: [reducerProvider]\n})\nexport class CmsStoreModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\nimport { PageType } from '../../occ/occ-models/occ.models';\nimport { CmsService } from '../facade/cms.service';\nimport { PageTitleResolver } from './page-title.resolver';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContentPageTitleResolver extends PageTitleResolver {\n  constructor(protected cms: CmsService) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n  }\n\n  resolve(): Observable<string> {\n    return this.cms.getCurrentPage().pipe(\n      filter(Boolean),\n      map(page => page.title)\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { PageTitleResolver } from './page-title.resolver';\nimport { ContentPageTitleResolver } from './content-page-title.resolver';\n\n@NgModule({\n  providers: [\n    {\n      provide: PageTitleResolver,\n      useExisting: ContentPageTitleResolver,\n      multi: true\n    }\n  ]\n})\nexport class CmsPageTitleModule {}\n","import { NgModule } from '@angular/core';\n\nimport { CmsService } from './facade/index';\nimport { CmsStoreModule } from './store/cms-store.module';\nimport { CmsOccModule } from './occ/cms-occ.module';\nimport { CmsPageTitleModule } from './page/page.module';\n\n@NgModule({\n  imports: [CmsOccModule, CmsStoreModule, CmsPageTitleModule],\n  providers: [CmsService]\n})\nexport class CmsModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, filter, switchMap } from 'rxjs/operators';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { ProductService } from '../../product/facade/product.service';\nimport { PageType } from '../../occ/occ-models/occ.models';\nimport { PageTitleResolver } from '../../cms/page/page-title.resolver';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductPageTitleResolver extends PageTitleResolver {\n  constructor(\n    protected routingService: RoutingService,\n    protected productService: ProductService\n  ) {\n    super();\n    this.pageType = PageType.PRODUCT_PAGE;\n  }\n\n  resolve(): Observable<string> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.state.params['productCode']),\n      filter(Boolean),\n      switchMap(code =>\n        this.productService.get(code).pipe(\n          filter(Boolean),\n          map(p => p.name)\n        )\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { PageType } from '../../occ/occ-models/occ.models';\nimport { ProductSearchService } from '../facade/product-search.service';\nimport { PageTitleResolver } from '../../cms/page/page-title.resolver';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SearchPageTitleResolver extends PageTitleResolver {\n  constructor(\n    protected routingService: RoutingService,\n    protected productSearchService: ProductSearchService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'SearchResultsListPageTemplate';\n  }\n\n  resolve(): Observable<string> {\n    return combineLatest(\n      this.productSearchService.getSearchResults().pipe(\n        filter(data => !!(data && data.pagination)),\n        map(results => results.pagination.totalResults)\n      ),\n      this.routingService.getRouterState().pipe(\n        map(state => state.state.params['query']),\n        filter(Boolean)\n      )\n    ).pipe(map(([t, q]: [number, string]) => this.getSearchResultTitle(t, q)));\n  }\n\n  protected getSearchResultTitle(total: number, part: string) {\n    return `${total} results for \"${part}\"`;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, filter } from 'rxjs/operators';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page } from '../../cms/model/page.model';\n\nimport { PageType } from '../../occ/occ-models/occ.models';\nimport { PageTitleResolver } from '../../cms/page/page-title.resolver';\nimport { ProductSearchService } from '../facade/product-search.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryPageTitleResolver extends PageTitleResolver {\n  constructor(\n    protected routingService: RoutingService,\n    protected productSearchService: ProductSearchService,\n    protected cms: CmsService\n  ) {\n    super();\n    this.pageType = PageType.CATEGORY_PAGE;\n  }\n\n  resolve(): Observable<string> {\n    return this.cms.getCurrentPage().pipe(\n      filter(Boolean),\n      switchMap(page => {\n        // only the existence of a plp component tells us if products\n        // are rendered or if this is an ordinary content page\n        if (this.hasProductListComponent(page)) {\n          return this.productSearchService.getSearchResults().pipe(\n            map(data => {\n              if (data.breadcrumbs && data.breadcrumbs.length > 0) {\n                return `${data.pagination.totalResults} results for ${\n                  data.breadcrumbs[0].facetValueName\n                }`;\n              }\n            })\n          );\n        } else {\n          return of(page.title || page.name);\n        }\n      })\n    );\n  }\n\n  protected hasProductListComponent(page: Page): boolean {\n    // ProductListComponent\n    return !!Object.keys(page.slots).find(\n      key =>\n        !!page.slots[key].components.find(\n          comp => comp.typeCode === 'CMSProductListComponent'\n        )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport {\n  ProductService,\n  ProductSearchService,\n  ProductReviewService\n} from './facade/index';\nimport { ProductStoreModule } from './store/product-store.module';\nimport { ProductOccModule } from './occ/product-occ.module';\n\nimport { CmsModule } from '../cms/cms.module';\nimport { PageTitleResolver } from '../cms/page/page-title.resolver';\nimport { ProductPageTitleResolver } from './services/product-page-title.resolver';\nimport { SearchPageTitleResolver } from './services/search-page-title.resolver';\nimport { CategoryPageTitleResolver } from './services/category-page-title.resolver';\n\nconst pageTitleResolvers = [\n  {\n    provide: PageTitleResolver,\n    useExisting: ProductPageTitleResolver,\n    multi: true\n  },\n  {\n    provide: PageTitleResolver,\n    useExisting: CategoryPageTitleResolver,\n    multi: true\n  },\n  {\n    provide: PageTitleResolver,\n    useExisting: SearchPageTitleResolver,\n    multi: true\n  }\n];\n\n@NgModule({\n  imports: [ProductOccModule, ProductStoreModule, CmsModule],\n  providers: [\n    ProductService,\n    ProductSearchService,\n    ProductReviewService,\n    ...pageTitleResolvers\n  ]\n})\nexport class ProductModule {}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\n\nimport { ProductImageConverterService } from '../../../product/index';\nimport { CURRENCY_CHANGE, LANGUAGE_CHANGE } from '../../../site-context/index';\nimport * as fromActions from './../actions/cart.action';\nimport { CartDataService } from '../../facade/cart-data.service';\nimport { OccCartService } from '../../occ/cart.service';\nimport { Cart } from '../../../occ/occ-models/occ.models';\n\n@Injectable()\nexport class CartEffects {\n  @Effect()\n  loadCart$: Observable<\n    fromActions.LoadCartFail | fromActions.LoadCartSuccess\n  > = this.actions$.pipe(\n    ofType(fromActions.LOAD_CART, LANGUAGE_CHANGE, CURRENCY_CHANGE),\n    map(\n      (action: {\n        type: string;\n        payload?: { userId: string; cartId: string; details?: boolean };\n      }) => action.payload\n    ),\n    mergeMap(payload => {\n      const loadCartParams = {\n        userId: (payload && payload.userId) || this.cartData.userId,\n        cartId: (payload && payload.cartId) || this.cartData.cartId,\n        details:\n          payload && payload.details !== undefined\n            ? payload.details\n            : this.cartData.getDetails\n      };\n\n      if (this.isMissingData(loadCartParams)) {\n        return of(new fromActions.LoadCartFail({}));\n      }\n\n      return this.occCartService\n        .loadCart(\n          loadCartParams.userId,\n          loadCartParams.cartId,\n          loadCartParams.details\n        )\n        .pipe(\n          map((cart: Cart) => {\n            if (cart && cart.entries) {\n              for (const entry of cart.entries) {\n                this.productImageConverter.convertProduct(entry.product);\n              }\n            }\n            return new fromActions.LoadCartSuccess(cart);\n          }),\n          catchError(error => of(new fromActions.LoadCartFail(error)))\n        );\n    })\n  );\n\n  @Effect()\n  createCart$: Observable<\n    | fromActions.MergeCartSuccess\n    | fromActions.CreateCartSuccess\n    | fromActions.CreateCartFail\n  > = this.actions$.pipe(\n    ofType(fromActions.CREATE_CART),\n    map((action: fromActions.CreateCart) => action.payload),\n    mergeMap(payload => {\n      return this.occCartService\n        .createCart(payload.userId, payload.oldCartId, payload.toMergeCartGuid)\n        .pipe(\n          switchMap((cart: Cart) => {\n            if (cart.entries) {\n              for (const entry of cart.entries) {\n                this.productImageConverter.convertProduct(entry.product);\n              }\n            }\n            if (payload.toMergeCartGuid) {\n              return [\n                new fromActions.CreateCartSuccess(cart),\n                new fromActions.MergeCartSuccess()\n              ];\n            }\n            return [new fromActions.CreateCartSuccess(cart)];\n          }),\n          catchError(error => of(new fromActions.CreateCartFail(error)))\n        );\n    })\n  );\n\n  @Effect()\n  mergeCart$: Observable<fromActions.CreateCart> = this.actions$.pipe(\n    ofType(fromActions.MERGE_CART),\n    map((action: fromActions.MergeCart) => action.payload),\n    mergeMap(payload => {\n      return this.occCartService.loadCart(payload.userId, 'current').pipe(\n        map(currentCart => {\n          return new fromActions.CreateCart({\n            userId: payload.userId,\n            oldCartId: payload.cartId,\n            toMergeCartGuid: currentCart ? currentCart.guid : undefined\n          });\n        })\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productImageConverter: ProductImageConverterService,\n    private occCartService: OccCartService,\n    private cartData: CartDataService\n  ) {}\n\n  private isMissingData(payload) {\n    return payload.userId === undefined || payload.cartId === undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\n\nimport * as fromActions from './../actions';\n\nimport { OccCartService } from '../../occ/cart.service';\n\n@Injectable()\nexport class CartEntryEffects {\n  @Effect()\n  addEntry$: Observable<any> = this.actions$.pipe(\n    ofType(fromActions.ADD_ENTRY),\n    map((action: fromActions.AddEntry) => action.payload),\n    mergeMap(payload =>\n      this.cartService\n        .addEntry(\n          payload.userId,\n          payload.cartId,\n          payload.productCode,\n          payload.quantity\n        )\n        .pipe(\n          map((entry: any) => new fromActions.AddEntrySuccess(entry)),\n          catchError(error => of(new fromActions.AddEntryFail(error)))\n        )\n    )\n  );\n\n  @Effect()\n  removeEntry$: Observable<any> = this.actions$.pipe(\n    ofType(fromActions.REMOVE_ENTRY),\n    map((action: fromActions.AddEntry) => action.payload),\n    mergeMap(payload =>\n      this.cartService\n        .removeEntry(payload.userId, payload.cartId, payload.entry)\n        .pipe(\n          map(() => {\n            return new fromActions.RemoveEntrySuccess();\n          }),\n          catchError(error => of(new fromActions.RemoveEntryFail(error)))\n        )\n    )\n  );\n\n  @Effect()\n  updateEntry$: Observable<any> = this.actions$.pipe(\n    ofType(fromActions.UPDATE_ENTRY),\n    map((action: fromActions.AddEntry) => action.payload),\n    mergeMap(payload =>\n      this.cartService\n        .updateEntry(payload.userId, payload.cartId, payload.entry, payload.qty)\n        .pipe(\n          map(() => {\n            return new fromActions.UpdateEntrySuccess();\n          }),\n          catchError(error => of(new fromActions.UpdateEntryFail(error)))\n        )\n    )\n  );\n\n  constructor(private actions$: Actions, private cartService: OccCartService) {}\n}\n","import { CartEffects } from './cart.effect';\nimport { CartEntryEffects } from './cart-entry.effect';\n\nexport const effects: any[] = [CartEffects, CartEntryEffects];\n\nexport * from './cart.effect';\nexport * from './cart-entry.effect';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { metaReducers } from './reducers/index';\nimport { effects } from './effects/index';\nimport { CART_FEATURE } from './cart-state';\nimport { CartOccModule } from './../occ/cart-occ.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    CartOccModule,\n    StoreModule.forFeature(CART_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects)\n  ],\n  providers: [reducerProvider]\n})\nexport class CartStoreModule {}\n","import { NgModule } from '@angular/core';\n\nimport { CartDataService, CartService } from './facade/index';\nimport { CartOccModule } from './occ/cart-occ.module';\nimport { CartStoreModule } from './store/cart-store.module';\n@NgModule({\n  imports: [CartOccModule, CartStoreModule],\n  providers: [CartDataService, CartService]\n})\nexport class CartModule {}\n","import { Meta } from '@angular/platform-browser';\nimport { ServerConfig } from './server-config';\n\nexport const SERVER_BASE_URL_META_TAG_NAME = 'occ-backend-base-url';\nexport const SERVER_BASE_URL_META_TAG_PLACEHOLDER =\n  'OCC_BACKEND_BASE_URL_VALUE';\n\nexport function serverConfigFromMetaTagFactory(meta: Meta): ServerConfig {\n  const baseUrl = getMetaTagContent(SERVER_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== SERVER_BASE_URL_META_TAG_PLACEHOLDER\n    ? { server: { baseUrl } }\n    : {};\n}\n\nfunction getMetaTagContent(name: string, meta: Meta) {\n  const metaTag = meta.getTag(`name=\"${name}\"`);\n  return metaTag && metaTag.content;\n}\n","import {\n  CardType,\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  AddressValidation\n} from '../../occ/occ-models/index';\n\nexport const CHECKOUT_FEATURE = 'checkout';\n\nexport interface StateWithCheckout {\n  [CHECKOUT_FEATURE]: CheckoutState;\n}\n\nexport interface AddressVerificationState {\n  results: AddressValidation | string;\n}\n\nexport interface CardTypesState {\n  entities: { [code: string]: CardType };\n}\n\nexport interface CheckoutStepsState {\n  address: Address;\n  deliveryMode: {\n    supported: { [code: string]: DeliveryMode };\n    selected: string;\n  };\n  paymentDetails: PaymentDetails;\n  orderDetails: Order;\n}\n\nexport interface CheckoutState {\n  steps: CheckoutStepsState;\n  cardTypes: CardTypesState;\n  addressVerification: AddressVerificationState;\n}\n","import { Action } from '@ngrx/store';\nimport {\n  Address,\n  DeliveryModeList,\n  PaymentDetails,\n  Order\n} from '../../../occ/occ-models/index';\n\nexport const ADD_DELIVERY_ADDRESS = '[Checkout] Add Delivery Address';\nexport const ADD_DELIVERY_ADDRESS_FAIL = '[Checkout] Add Delivery Address Fail';\nexport const ADD_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Add Delivery Address Success';\n\nexport const SET_DELIVERY_ADDRESS = '[Checkout] Set Delivery Address';\nexport const SET_DELIVERY_ADDRESS_FAIL = '[Checkout] Set Delivery Address Fail';\nexport const SET_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Set Delivery Address Success';\n\nexport const LOAD_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Load Supported Delivery Modes';\nexport const LOAD_SUPPORTED_DELIVERY_MODES_FAIL =\n  '[Checkout] Load Supported Delivery Modes Fail';\nexport const LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS =\n  '[Checkout] Load Supported Delivery Modes Success';\nexport const CLEAR_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Clear Supported Delivery Modes';\n\nexport const SET_DELIVERY_MODE = '[Checkout] Set Delivery Mode';\nexport const SET_DELIVERY_MODE_FAIL = '[Checkout] Set Delivery Mode Fail';\nexport const SET_DELIVERY_MODE_SUCCESS = '[Checkout] Set Delivery Mode Success';\n\nexport const CREATE_PAYMENT_DETAILS = '[Checkout] Create Payment Details';\nexport const CREATE_PAYMENT_DETAILS_FAIL =\n  '[Checkout] Create Payment Details Fail';\nexport const CREATE_PAYMENT_DETAILS_SUCCESS =\n  '[Checkout] Create Payment Details Success';\n\nexport const SET_PAYMENT_DETAILS = '[Checkout] Set Payment Details';\nexport const SET_PAYMENT_DETAILS_FAIL = '[Checkout] Set Payment Details Fail';\nexport const SET_PAYMENT_DETAILS_SUCCESS =\n  '[Checkout] Set Payment Details Success';\n\nexport const PLACE_ORDER = '[Checkout] Place Order';\nexport const PLACE_ORDER_FAIL = '[Checkout] Place Order Fail';\nexport const PLACE_ORDER_SUCCESS = '[Checkout] Place Order Success';\n\nexport const CLEAR_CHECKOUT_STEP = '[Checkout] Clear One Checkout Step';\nexport const CLEAR_CHECKOUT_DATA = '[Checkout] Clear Checkout Data';\n\nexport class AddDeliveryAddress implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS;\n  constructor(\n    public payload: { userId: string; cartId: string; address: Address }\n  ) {}\n}\n\nexport class AddDeliveryAddressFail implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class AddDeliveryAddressSuccess implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {}\n}\n\nexport class SetDeliveryAddress implements Action {\n  readonly type = SET_DELIVERY_ADDRESS;\n  constructor(\n    public payload: { userId: string; cartId: string; address: Address }\n  ) {}\n}\n\nexport class SetDeliveryAddressFail implements Action {\n  readonly type = SET_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class SetDeliveryAddressSuccess implements Action {\n  readonly type = SET_DELIVERY_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {}\n}\n\nexport class LoadSupportedDeliveryModes implements Action {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class LoadSupportedDeliveryModesFail implements Action {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadSupportedDeliveryModesSuccess implements Action {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS;\n  constructor(public payload: DeliveryModeList) {}\n}\n\nexport class SetDeliveryMode implements Action {\n  readonly type = SET_DELIVERY_MODE;\n  constructor(\n    public payload: { userId: string; cartId: string; selectedModeId: string }\n  ) {}\n}\n\nexport class SetDeliveryModeFail implements Action {\n  readonly type = SET_DELIVERY_MODE_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class SetDeliveryModeSuccess implements Action {\n  readonly type = SET_DELIVERY_MODE_SUCCESS;\n  constructor(public payload: string) {}\n}\n\nexport class CreatePaymentDetails implements Action {\n  readonly type = CREATE_PAYMENT_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      paymentDetails: PaymentDetails;\n    }\n  ) {}\n}\n\nexport class CreatePaymentDetailsFail implements Action {\n  readonly type = CREATE_PAYMENT_DETAILS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class CreatePaymentDetailsSuccess implements Action {\n  readonly type = CREATE_PAYMENT_DETAILS_SUCCESS;\n  constructor(public payload: PaymentDetails) {}\n}\n\nexport class SetPaymentDetails implements Action {\n  readonly type = SET_PAYMENT_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      paymentDetails: PaymentDetails;\n    }\n  ) {}\n}\n\nexport class SetPaymentDetailsFail implements Action {\n  readonly type = SET_PAYMENT_DETAILS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class SetPaymentDetailsSuccess implements Action {\n  readonly type = SET_PAYMENT_DETAILS_SUCCESS;\n  constructor(public payload: PaymentDetails) {}\n}\n\nexport class PlaceOrder implements Action {\n  readonly type = PLACE_ORDER;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class PlaceOrderFail implements Action {\n  readonly type = PLACE_ORDER_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class PlaceOrderSuccess implements Action {\n  readonly type = PLACE_ORDER_SUCCESS;\n  constructor(public payload: Order) {}\n}\n\nexport class ClearSupportedDeliveryModes implements Action {\n  readonly type = CLEAR_SUPPORTED_DELIVERY_MODES;\n}\n\nexport class ClearCheckoutStep implements Action {\n  readonly type = CLEAR_CHECKOUT_STEP;\n  constructor(public payload: number) {}\n}\n\nexport class ClearCheckoutData implements Action {\n  readonly type = CLEAR_CHECKOUT_DATA;\n}\n\nexport type CheckoutAction =\n  | AddDeliveryAddress\n  | AddDeliveryAddressFail\n  | AddDeliveryAddressSuccess\n  | SetDeliveryAddress\n  | SetDeliveryAddressFail\n  | SetDeliveryAddressSuccess\n  | LoadSupportedDeliveryModes\n  | LoadSupportedDeliveryModesFail\n  | LoadSupportedDeliveryModesSuccess\n  | SetDeliveryMode\n  | SetDeliveryModeFail\n  | SetDeliveryModeSuccess\n  | ClearSupportedDeliveryModes\n  | CreatePaymentDetails\n  | CreatePaymentDetailsFail\n  | CreatePaymentDetailsSuccess\n  | SetPaymentDetails\n  | SetPaymentDetailsFail\n  | SetPaymentDetailsSuccess\n  | PlaceOrder\n  | PlaceOrderFail\n  | PlaceOrderSuccess\n  | ClearCheckoutStep\n  | ClearCheckoutData;\n","import { Action } from '@ngrx/store';\nimport { CardType } from '../../../occ/occ-models/index';\n\nexport const LOAD_CARD_TYPES = '[Checkout] Load Card Types';\nexport const LOAD_CARD_TYPES_FAIL = '[Checkout] Load Card Fail';\nexport const LOAD_CARD_TYPES_SUCCESS = '[Checkout] Load Card Success';\n\nexport class LoadCardTypes implements Action {\n  readonly type = LOAD_CARD_TYPES;\n  constructor() {}\n}\n\nexport class LoadCardTypesFail implements Action {\n  readonly type = LOAD_CARD_TYPES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCardTypesSuccess implements Action {\n  readonly type = LOAD_CARD_TYPES_SUCCESS;\n  constructor(public payload: CardType[]) {}\n}\n\nexport type CardTypesAction =\n  | LoadCardTypes\n  | LoadCardTypesFail\n  | LoadCardTypesSuccess;\n","import { Action } from '@ngrx/store';\nimport { Address, AddressValidation } from '../../../occ/occ-models/index';\n\nexport const VERIFY_ADDRESS = '[Checkout] Verify Address';\nexport const VERIFY_ADDRESS_FAIL = '[Checkout] Verify Address Fail';\nexport const VERIFY_ADDRESS_SUCCESS = '[Checkout] Verify Address Success';\n\nexport const CLEAR_ADDRESS_VERIFICATION_RESULTS =\n  '[Checkout] Clear Address Verification Results';\n\nexport class VerifyAddress implements Action {\n  readonly type = VERIFY_ADDRESS;\n  constructor(public payload: { userId: string; address: Address }) {}\n}\n\nexport class VerifyAddressFail implements Action {\n  readonly type = VERIFY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class VerifyAddressSuccess implements Action {\n  readonly type = VERIFY_ADDRESS_SUCCESS;\n  constructor(public payload: AddressValidation) {}\n}\n\nexport class ClearAddressVerificationResults implements Action {\n  readonly type = CLEAR_ADDRESS_VERIFICATION_RESULTS;\n  constructor() {}\n}\n\nexport type AddressVerificationActions =\n  | VerifyAddress\n  | VerifyAddressFail\n  | VerifyAddressSuccess\n  | ClearAddressVerificationResults;\n","import { Action } from '@ngrx/store';\n\nexport const CHECKOUT_CLEAR_MISCS_DATA = '[Checkout] Clear Miscs Data';\n\nexport class CheckoutClearMiscsData implements Action {\n  readonly type = CHECKOUT_CLEAR_MISCS_DATA;\n}\n\nexport type CheckoutMiscsDataAction = CheckoutClearMiscsData;\n\nexport * from './checkout.action';\nexport * from './card-types.action';\nexport * from './address-verification.action';\n","import { CheckoutStepsState } from '../checkout-state';\nimport * as fromAction from './../actions/index';\nimport { Address, Order, DeliveryMode } from '../../../occ/occ-models/index';\n\nexport const initialState: CheckoutStepsState = {\n  address: {},\n  deliveryMode: {\n    supported: {},\n    selected: ''\n  },\n  paymentDetails: {},\n  orderDetails: {}\n};\n\nexport function reducer(\n  state = initialState,\n  action: fromAction.CheckoutAction | fromAction.CheckoutClearMiscsData\n): CheckoutStepsState {\n  switch (action.type) {\n    case fromAction.ADD_DELIVERY_ADDRESS_SUCCESS:\n    case fromAction.SET_DELIVERY_ADDRESS_SUCCESS: {\n      const address: Address = action.payload;\n\n      return {\n        ...state,\n        address\n      };\n    }\n\n    case fromAction.LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS: {\n      const supportedModes = action.payload.deliveryModes;\n      if (!supportedModes) {\n        return state;\n      }\n\n      const supported = supportedModes.reduce(\n        (modes: { [code: string]: DeliveryMode }, mode: DeliveryMode) => {\n          return {\n            ...modes,\n            [mode.code]: mode\n          };\n        },\n        {\n          ...state.deliveryMode.supported\n        }\n      );\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported\n        }\n      };\n    }\n\n    case fromAction.SET_DELIVERY_MODE_SUCCESS: {\n      const selected = action.payload;\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected\n        }\n      };\n    }\n\n    case fromAction.CREATE_PAYMENT_DETAILS_SUCCESS:\n    case fromAction.SET_PAYMENT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        paymentDetails: action.payload\n      };\n    }\n\n    case fromAction.CREATE_PAYMENT_DETAILS_FAIL: {\n      const paymentDetails = action.payload;\n      if (paymentDetails['hasError']) {\n        return {\n          ...state,\n          paymentDetails\n        };\n      }\n\n      return state;\n    }\n\n    case fromAction.PLACE_ORDER_SUCCESS: {\n      const orderDetails: Order = action.payload;\n\n      return {\n        ...state,\n        orderDetails\n      };\n    }\n\n    case fromAction.CLEAR_CHECKOUT_DATA: {\n      return initialState;\n    }\n\n    case fromAction.CLEAR_CHECKOUT_STEP: {\n      const stepNumber = action.payload;\n      switch (stepNumber) {\n        case 1: {\n          return {\n            ...state,\n            address: {}\n          };\n        }\n\n        case 2: {\n          return {\n            ...state,\n            deliveryMode: {\n              ...state.deliveryMode,\n              supported: {},\n              selected: ''\n            }\n          };\n        }\n\n        case 3: {\n          return {\n            ...state,\n            paymentDetails: {}\n          };\n        }\n      }\n\n      return state;\n    }\n\n    case fromAction.CLEAR_SUPPORTED_DELIVERY_MODES:\n    case fromAction.CHECKOUT_CLEAR_MISCS_DATA: {\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported: {}\n        }\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getDeliveryAddress = (state: CheckoutStepsState) => state.address;\nexport const getDeliveryMode = (state: CheckoutStepsState) =>\n  state.deliveryMode;\nexport const getPaymentDetails = (state: CheckoutStepsState) =>\n  state.paymentDetails;\nexport const getOrderDetails = (state: CheckoutStepsState) =>\n  state.orderDetails;\n","import * as fromAction from '../actions/index';\nimport { AddressVerificationState } from '../checkout-state';\n\nexport const initialState: AddressVerificationState = {\n  results: {}\n};\n\nexport function reducer(\n  state = initialState,\n  action: fromAction.AddressVerificationActions\n): AddressVerificationState {\n  switch (action.type) {\n    case fromAction.VERIFY_ADDRESS_SUCCESS: {\n      const results = action.payload;\n\n      return {\n        ...state,\n        results\n      };\n    }\n\n    case fromAction.VERIFY_ADDRESS_FAIL: {\n      return {\n        ...state,\n        results: 'FAIL'\n      };\n    }\n\n    case fromAction.CLEAR_ADDRESS_VERIFICATION_RESULTS: {\n      return {\n        ...state,\n        results: {}\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getAddressVerificationResults = (\n  state: AddressVerificationState\n) => state.results;\n","import { CardTypesState } from '../checkout-state';\nimport * as fromAction from '../actions/index';\nimport { CardType } from '../../../occ/occ-models/index';\n\nexport const initialState: CardTypesState = {\n  entities: {}\n};\n\nexport function reducer(\n  state = initialState,\n  action: fromAction.CardTypesAction | fromAction.CheckoutMiscsDataAction\n): CardTypesState {\n  switch (action.type) {\n    case fromAction.LOAD_CARD_TYPES_SUCCESS: {\n      const cardTypes: CardType[] = action.payload;\n      const entities = cardTypes.reduce(\n        (cardTypesEntities: { [code: string]: CardType }, name: CardType) => {\n          return {\n            ...cardTypesEntities,\n            [name.code]: name\n          };\n        },\n        {\n          ...state.entities\n        }\n      );\n\n      return {\n        ...state,\n        entities\n      };\n    }\n\n    case fromAction.CHECKOUT_CLEAR_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n\nexport const getCardTypesEntites = (state: CardTypesState) => state.entities;\n","import { InjectionToken, Provider } from '@angular/core';\n\nimport {\n  ActionReducerMap,\n  createFeatureSelector,\n  MetaReducer,\n  ActionReducer,\n  MemoizedSelector\n} from '@ngrx/store';\n\nimport { CheckoutState, CHECKOUT_FEATURE } from '../checkout-state';\nimport * as fromAction from '../actions/index';\nimport { LOGOUT } from '../../../auth/store/actions/index';\nimport {\n  CURRENCY_CHANGE,\n  LANGUAGE_CHANGE\n} from '../../../site-context/store/actions/index';\n\nimport * as fromAddressVerification from './address-verification.reducer';\nimport * as fromCardTypes from './card-types.reducer';\nimport * as fromCheckout from './checkout.reducer';\n\nexport function getReducers(): ActionReducerMap<CheckoutState> {\n  return {\n    steps: fromCheckout.reducer,\n    cardTypes: fromCardTypes.reducer,\n    addressVerification: fromAddressVerification.reducer\n  };\n}\n\nexport const reducerToken: InjectionToken<\n  ActionReducerMap<CheckoutState>\n> = new InjectionToken<ActionReducerMap<CheckoutState>>('CheckoutReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers\n};\n\nexport const getCheckoutState: MemoizedSelector<\n  any,\n  CheckoutState\n> = createFeatureSelector<CheckoutState>(CHECKOUT_FEATURE);\n\nexport function clearCheckoutState(\n  reducer: ActionReducer<CheckoutState>\n): ActionReducer<CheckoutState> {\n  return function(state, action) {\n    switch (action.type) {\n      case LANGUAGE_CHANGE: {\n        action = new fromAction.CheckoutClearMiscsData();\n        break;\n      }\n      case CURRENCY_CHANGE: {\n        action = new fromAction.ClearSupportedDeliveryModes();\n        break;\n      }\n      case LOGOUT: {\n        action = new fromAction.ClearCheckoutData();\n        break;\n      }\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<CheckoutState>[] = [clearCheckoutState];\n","import { MemoizedSelector, createSelector } from '@ngrx/store';\n\nimport { CheckoutState, CheckoutStepsState } from '../checkout-state';\nimport * as fromReducer from './../reducers/checkout.reducer';\nimport * as fromFeature from './../reducers/index';\nimport {\n  DeliveryMode,\n  Address,\n  Order,\n  PaymentDetails\n} from '../../../occ/occ-models/index';\n\nexport const getCheckoutStepsState: MemoizedSelector<\n  CheckoutState,\n  CheckoutStepsState\n> = createSelector(\n  fromFeature.getCheckoutState,\n  (state: CheckoutState) => state.steps\n);\n\nexport const getDeliveryAddress: MemoizedSelector<\n  CheckoutState,\n  Address\n> = createSelector(\n  getCheckoutStepsState,\n  fromReducer.getDeliveryAddress\n);\n\nexport const getDeliveryMode: MemoizedSelector<\n  CheckoutState,\n  {\n    supported: { [code: string]: DeliveryMode };\n    selected: string;\n  }\n> = createSelector(\n  getCheckoutStepsState,\n  fromReducer.getDeliveryMode\n);\n\nexport const getSupportedDeliveryModes: MemoizedSelector<\n  CheckoutState,\n  DeliveryMode[]\n> = createSelector(\n  getDeliveryMode,\n  deliveryMode => {\n    return Object.keys(deliveryMode.supported).map(\n      code => deliveryMode.supported[code]\n    );\n  }\n);\n\nexport const getSelectedCode: MemoizedSelector<\n  CheckoutState,\n  string\n> = createSelector(\n  getDeliveryMode,\n  deliveryMode => {\n    return deliveryMode.selected;\n  }\n);\n\nexport const getSelectedDeliveryMode: MemoizedSelector<\n  CheckoutState,\n  DeliveryMode\n> = createSelector(\n  getDeliveryMode,\n  deliveryMode => {\n    if (deliveryMode.selected !== '') {\n      if (Object.keys(deliveryMode.supported).length === 0) {\n        return null;\n      }\n      return deliveryMode.supported[deliveryMode.selected];\n    }\n  }\n);\n\nexport const getPaymentDetails: MemoizedSelector<\n  CheckoutState,\n  PaymentDetails\n> = createSelector(\n  getCheckoutStepsState,\n  fromReducer.getPaymentDetails\n);\n\nexport const getCheckoutOrderDetails: MemoizedSelector<\n  CheckoutState,\n  Order\n> = createSelector(\n  getCheckoutStepsState,\n  fromReducer.getOrderDetails\n);\n","import { MemoizedSelector, createSelector } from '@ngrx/store';\n\nimport { CheckoutState, CardTypesState } from '../checkout-state';\nimport * as fromReducer from './../reducers/card-types.reducer';\nimport * as fromFeature from './../reducers/index';\nimport { CardType } from '../../../occ/occ-models/index';\n\nexport const getCardTypesState: MemoizedSelector<\n  CheckoutState,\n  CardTypesState\n> = createSelector(\n  fromFeature.getCheckoutState,\n  (state: CheckoutState) => state.cardTypes\n);\n\nexport const getCardTypesEntites: MemoizedSelector<\n  CheckoutState,\n  { [code: string]: CardType }\n> = createSelector(\n  getCardTypesState,\n  fromReducer.getCardTypesEntites\n);\n\nexport const getAllCardTypes: MemoizedSelector<\n  CheckoutState,\n  CardType[]\n> = createSelector(\n  getCardTypesEntites,\n  entites => {\n    return Object.keys(entites).map(code => entites[code]);\n  }\n);\n","import { MemoizedSelector, createSelector } from '@ngrx/store';\n\nimport { CheckoutState, AddressVerificationState } from '../checkout-state';\nimport * as fromReducer from './../reducers/address-verification.reducer';\nimport * as fromFeature from './../reducers/index';\nimport { AddressValidation } from '../../../occ/occ-models/occ.models';\n\nexport const getAddressVerificationResultsState: MemoizedSelector<\n  CheckoutState,\n  AddressVerificationState\n> = createSelector(\n  fromFeature.getCheckoutState,\n  (state: CheckoutState) => state.addressVerification\n);\n\nexport const getAddressVerificationResults: MemoizedSelector<\n  CheckoutState,\n  string | AddressValidation\n> = createSelector(\n  getAddressVerificationResultsState,\n  fromReducer.getAddressVerificationResults\n);\n","export const GLOBAL_MESSAGE_FEATURE = 'global-message';\n\nexport interface StateWithGlobalMessage {\n  [GLOBAL_MESSAGE_FEATURE]: GlobalMessageState;\n}\n\nexport interface GlobalMessageEntities {\n  [messageType: string]: string[];\n}\n\nexport interface GlobalMessageState {\n  entities: GlobalMessageEntities;\n}\n","import { Action } from '@ngrx/store';\nimport {\n  GlobalMessageType,\n  GlobalMessage\n} from '../../models/global-message.model';\n\nexport const ADD_MESSAGE = '[Global-message] Add a Message';\nexport const REMOVE_MESSAGE = '[Global-message] Remove a Message';\nexport const REMOVE_MESSAGES_BY_TYPE =\n  '[Global-message] Remove messages by type';\n\nexport class AddMessage implements Action {\n  readonly type = ADD_MESSAGE;\n  constructor(public payload: GlobalMessage) {}\n}\n\nexport class RemoveMessage implements Action {\n  readonly type = REMOVE_MESSAGE;\n  constructor(public payload: { type: GlobalMessageType; index: number }) {}\n}\n\nexport class RemoveMessagesByType implements Action {\n  readonly type = REMOVE_MESSAGES_BY_TYPE;\n  constructor(public payload: GlobalMessageType) {}\n}\n\nexport type GlobalMessageAction =\n  | AddMessage\n  | RemoveMessage\n  | RemoveMessagesByType;\n","import { MemoizedSelector, createFeatureSelector } from '@ngrx/store';\nimport {\n  GLOBAL_MESSAGE_FEATURE,\n  GlobalMessageState,\n  StateWithGlobalMessage\n} from '../global-message-state';\n\nexport const getGlobalMessageState: MemoizedSelector<\n  StateWithGlobalMessage,\n  GlobalMessageState\n> = createFeatureSelector<GlobalMessageState>(GLOBAL_MESSAGE_FEATURE);\n","import { MemoizedSelector, createSelector } from '@ngrx/store';\nimport { getGlobalMessageState } from './feature.selector';\nimport {\n  StateWithGlobalMessage,\n  GlobalMessageState,\n  GlobalMessageEntities\n} from '../global-message-state';\n\nexport const getGlobalMessageEntities: MemoizedSelector<\n  StateWithGlobalMessage,\n  GlobalMessageEntities\n> = createSelector(\n  getGlobalMessageState,\n  (state: GlobalMessageState) => state.entities\n);\n","import { GlobalMessageAction } from '../actions/global-message.actions';\nimport {\n  GlobalMessage,\n  GlobalMessageType\n} from '../../models/global-message.model';\nimport * as fromAction from '../actions/index';\nimport { GlobalMessageState } from '../global-message-state';\n\nexport const initialState: GlobalMessageState = {\n  entities: {}\n};\n\nexport function reducer(\n  state = initialState,\n  action: GlobalMessageAction\n): GlobalMessageState {\n  switch (action.type) {\n    case fromAction.ADD_MESSAGE: {\n      const message: GlobalMessage = action.payload;\n\n      if (state.entities[message.type] === undefined) {\n        return {\n          ...state,\n          entities: {\n            ...state.entities,\n            [message.type]: [message.text]\n          }\n        };\n      } else {\n        const msgs = state.entities[message.type];\n\n        if (msgs.indexOf(message.text) === -1) {\n          return {\n            ...state,\n            entities: {\n              ...state.entities,\n              [message.type]: [...msgs, message.text]\n            }\n          };\n        }\n      }\n\n      return state;\n    }\n\n    case fromAction.REMOVE_MESSAGE: {\n      const msgType: GlobalMessageType = action.payload.type;\n      const msgIndex: number = action.payload.index;\n      if (\n        Object.keys(state.entities).length === 0 ||\n        !state.entities[msgType]\n      ) {\n        return state;\n      }\n\n      const messages = [...state.entities[msgType]];\n      messages.splice(msgIndex, 1);\n\n      return {\n        ...state,\n        entities: {\n          ...state.entities,\n          [msgType]: messages\n        }\n      };\n    }\n\n    case fromAction.REMOVE_MESSAGES_BY_TYPE: {\n      const entities = {\n        ...state.entities,\n        [action.payload]: []\n      };\n      return {\n        ...state,\n        entities\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport * as fromGlobalMessage from './global-message.reducer';\nimport { GlobalMessageState } from '../global-message-state';\nimport { ActionReducer } from '@ngrx/store';\n\nexport function getReducers(): ActionReducer<GlobalMessageState> {\n  return fromGlobalMessage.reducer;\n}\n\nexport const reducerToken: InjectionToken<\n  ActionReducer<GlobalMessageState>\n> = new InjectionToken<ActionReducer<GlobalMessageState>>(\n  'GlobalMessageReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers\n};\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { GLOBAL_MESSAGE_FEATURE } from './global-message-state';\nimport { StateModule } from '../../state/state.module';\n\n@NgModule({\n  imports: [\n    StateModule,\n    StoreModule.forFeature(GLOBAL_MESSAGE_FEATURE, reducerToken)\n  ],\n  providers: [reducerProvider]\n})\nexport class GlobalMessageStoreModule {}\n","import { Injectable } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport {\n  GlobalMessage,\n  GlobalMessageType\n} from '../models/global-message.model';\nimport {\n  GlobalMessageEntities,\n  StateWithGlobalMessage,\n  getGlobalMessageEntities,\n  AddMessage,\n  RemoveMessage,\n  RemoveMessagesByType\n} from '../store/index';\n\n@Injectable()\nexport class GlobalMessageService {\n  constructor(private store: Store<StateWithGlobalMessage>) {}\n\n  /**\n   * Get all global messages\n   */\n  get(): Observable<GlobalMessageEntities> {\n    return this.store.pipe(\n      select(getGlobalMessageEntities),\n      filter(data => data !== undefined)\n    );\n  }\n\n  /**\n   * Add one message into store\n   * @param message: GlobalMessage object\n   */\n  add(message: GlobalMessage): void {\n    this.store.dispatch(new AddMessage(message));\n  }\n\n  /**\n   * Remove message(s) from store\n   * @param type: GlobalMessageType\n   * @param index:optional. Without it, messages will be removed by type; otherwise,\n   * message will be removed from list by index.\n   */\n  remove(type: GlobalMessageType, index?: number): void {\n    if (index !== undefined) {\n      this.store.dispatch(\n        new RemoveMessage({\n          type: type,\n          index: index\n        })\n      );\n    } else {\n      this.store.dispatch(new RemoveMessagesByType(type));\n    }\n  }\n}\n","export enum GlobalMessageType {\n  MSG_TYPE_CONFIRMATION = '[GlobalMessage] Confirmation',\n  MSG_TYPE_ERROR = '[GlobalMessage] Error',\n  MSG_TYPE_INFO = '[GlobalMessage] Information'\n}\n\nexport interface GlobalMessage {\n  text: string;\n  type: GlobalMessageType;\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest\n} from '@angular/common/http';\n\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { GlobalMessageService } from '../facade/global-message.service';\nimport { GlobalMessageType } from '../models/global-message.model';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable()\nexport class HttpErrorInterceptor implements HttpInterceptor {\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      catchError((errResponse: any) => {\n        if (errResponse instanceof HttpErrorResponse) {\n          switch (errResponse.status) {\n            case 400: // Bad Request\n              if (\n                errResponse.url.indexOf(OAUTH_ENDPOINT) !== -1 &&\n                errResponse.error.error === 'invalid_grant'\n              ) {\n                if (request.body.get('grant_type') === 'password') {\n                  this.globalMessageService.add({\n                    type: GlobalMessageType.MSG_TYPE_ERROR,\n                    text:\n                      this.getErrorMessage(errResponse) +\n                      '. Please login again.'\n                  });\n                  this.globalMessageService.remove(\n                    GlobalMessageType.MSG_TYPE_CONFIRMATION\n                  );\n                }\n              } else {\n                this.globalMessageService.add({\n                  type: GlobalMessageType.MSG_TYPE_ERROR,\n                  text: this.getErrorMessage(errResponse)\n                });\n              }\n              break;\n            case 403: // Forbidden\n              this.globalMessageService.add({\n                type: GlobalMessageType.MSG_TYPE_ERROR,\n                text: 'You are not authorized to perform this action.'\n              });\n              break;\n            case 404: // Not Found\n              this.globalMessageService.add({\n                type: GlobalMessageType.MSG_TYPE_ERROR,\n                text: 'The requested resource could not be found'\n              });\n              break;\n            case 409: // Already Exists\n              this.globalMessageService.add({\n                type: GlobalMessageType.MSG_TYPE_ERROR,\n                text: 'Already exists'\n              });\n              break;\n            case 502: // Bad Gateway\n              this.globalMessageService.add({\n                type: GlobalMessageType.MSG_TYPE_ERROR,\n                text: 'A server error occurred. Please try again later.'\n              });\n              break;\n            case 504: // Gateway Timeout\n              this.globalMessageService.add({\n                type: GlobalMessageType.MSG_TYPE_ERROR,\n                text: 'The server did not responded, please try again later.'\n              });\n              break;\n            default:\n              this.globalMessageService.add({\n                type: GlobalMessageType.MSG_TYPE_ERROR,\n                text: this.getErrorMessage(errResponse)\n              });\n          }\n        } else {\n          this.globalMessageService.add({\n            type: GlobalMessageType.MSG_TYPE_ERROR,\n            text: 'An unknown error occured'\n          });\n        }\n\n        return throwError(errResponse);\n      })\n    );\n  }\n\n  private getErrorMessage(resp: HttpErrorResponse) {\n    let errMsg = resp.message;\n    if (resp.error) {\n      if (resp.error.errors && resp.error.errors instanceof Array) {\n        errMsg = resp.error.errors[0].message;\n      } else if (resp.error.error_description) {\n        errMsg = resp.error.error_description;\n      }\n    }\n\n    return errMsg;\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { HttpErrorInterceptor } from './http-error.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: HttpErrorInterceptor,\n    multi: true\n  }\n];\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { GlobalMessageService } from './facade/index';\nimport { interceptors } from './http-interceptors/index';\nimport { GlobalMessageStoreModule } from './store/global-message-store.module';\n\n@NgModule({\n  imports: [GlobalMessageStoreModule],\n  providers: [GlobalMessageService]\n})\nexport class GlobalMessageModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: GlobalMessageModule,\n      providers: [...interceptors]\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { throwError, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { UserRegisterFormData } from '../model/user.model';\n\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN\n} from '../../occ/utils/interceptor-util';\nimport { OccConfig } from '../../occ/config/occ-config';\nimport {\n  User,\n  Address,\n  AddressValidation,\n  AddressList,\n  PaymentDetailsList\n} from '../../occ/occ-models/index';\n\nconst USER_ENDPOINT = 'users/';\nconst ADDRESSES_VERIFICATION_ENDPOINT = '/addresses/verification';\nconst ADDRESSES_ENDPOINT = '/addresses';\nconst PAYMENT_DETAILS_ENDPOINT = '/paymentdetails';\n\n@Injectable()\nexport class OccUserService {\n  // some extending from baseservice is not working here...\n  constructor(protected http: HttpClient, protected config: OccConfig) {}\n\n  public loadUser(userId: string): Observable<User> {\n    const url = this.getUserEndpoint() + userId;\n    return this.http\n      .get<User>(url)\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  verifyAddress(\n    userId: string,\n    address: Address\n  ): Observable<AddressValidation> {\n    const url =\n      this.getUserEndpoint() + userId + ADDRESSES_VERIFICATION_ENDPOINT;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    return this.http\n      .post<AddressValidation>(url, address, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  loadUserAddresses(userId: string): Observable<AddressList> {\n    const url = this.getUserEndpoint() + userId + ADDRESSES_ENDPOINT;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    return this.http\n      .get<AddressList>(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  addUserAddress(userId: string, address: Address): Observable<{}> {\n    const url = this.getUserEndpoint() + userId + ADDRESSES_ENDPOINT;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    return this.http\n      .post(url, address, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  updateUserAddress(\n    userId: string,\n    addressId: string,\n    address: Address\n  ): Observable<{}> {\n    const url =\n      this.getUserEndpoint() + userId + ADDRESSES_ENDPOINT + '/' + addressId;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    return this.http\n      .patch(url, address, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  deleteUserAddress(userId: string, addressId: string): Observable<{}> {\n    const url =\n      this.getUserEndpoint() + userId + ADDRESSES_ENDPOINT + '/' + addressId;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  loadUserPaymentMethods(userId: string): Observable<PaymentDetailsList> {\n    const url = `${this.getUserEndpoint()}${userId}${PAYMENT_DETAILS_ENDPOINT}?saved=true`;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    return this.http\n      .get<PaymentDetailsList>(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  deleteUserPaymentMethod(\n    userId: string,\n    paymentMethodID: string\n  ): Observable<{}> {\n    const url = `${this.getUserEndpoint()}${userId}${PAYMENT_DETAILS_ENDPOINT}/${paymentMethodID}`;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  setDefaultUserPaymentMethod(\n    userId: string,\n    paymentMethodID: string\n  ): Observable<{}> {\n    const url = `${this.getUserEndpoint()}${userId}${PAYMENT_DETAILS_ENDPOINT}/${paymentMethodID}`;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    return this.http\n      .patch(\n        url,\n        // TODO: Remove billingAddress property\n        { billingAddress: { titleCode: 'mr' }, defaultPayment: true },\n        { headers }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  registerUser(user: UserRegisterFormData): Observable<User> {\n    const url: string = this.getUserEndpoint();\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    return this.http\n      .post<User>(url, user, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  protected getUserEndpoint() {\n    return (\n      (this.config.server.baseUrl || '') +\n      this.config.server.occPrefix +\n      this.config.site.baseSite +\n      '/' +\n      USER_ENDPOINT\n    );\n  }\n}\n","import { throwError, Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\n\nimport { OccConfig } from '../../occ/config/occ-config';\nimport { Order, OrderHistoryList } from '../../occ/occ-models/index';\n\n// To be changed to a more optimised params after ticket: C3PO-1076\nconst FULL_PARAMS = 'fields=FULL';\n\n@Injectable()\nexport class OccOrderService {\n  constructor(protected http: HttpClient, protected config: OccConfig) {}\n\n  protected getOrderEndpoint(userId: string): string {\n    const orderEndpoint = '/users/' + userId + '/orders';\n    return (\n      (this.config.server.baseUrl || '') +\n      this.config.server.occPrefix +\n      this.config.site.baseSite +\n      orderEndpoint\n    );\n  }\n\n  public placeOrder(userId: string, cartId: string): Observable<Order> {\n    const url = this.getOrderEndpoint(userId);\n    const params = new HttpParams({\n      fromString: 'cartId=' + cartId + '&' + FULL_PARAMS\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded'\n    });\n\n    return this.http\n      .post<Order>(url, {}, { headers, params })\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n\n  public getOrders(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    const url = this.getOrderEndpoint(userId);\n    let params = new HttpParams();\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n    if (sort) {\n      params = params.set('sort', sort);\n    }\n\n    return this.http\n      .get<OrderHistoryList>(url, { params: params })\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n\n  public getOrder(userId: string, orderCode: string): Observable<Order> {\n    const url = this.getOrderEndpoint(userId);\n\n    const orderUrl = url + '/' + orderCode;\n\n    const params = new HttpParams({\n      fromString: FULL_PARAMS\n    });\n\n    return this.http\n      .get<Order>(orderUrl, {\n        params: params\n      })\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { OccModule } from '../../occ/occ.module';\nimport { OccUserService } from './user.service';\nimport { OccOrderService } from './order.service';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, OccModule],\n  providers: [OccUserService, OccOrderService]\n})\nexport class UserOccModule {}\n","import { Action } from '@ngrx/store';\nimport { User } from '../../../occ/occ-models/index';\n\nexport const LOAD_USER_DETAILS = '[User] Load User Details';\nexport const LOAD_USER_DETAILS_FAIL = '[User] Load User Details Fail';\nexport const LOAD_USER_DETAILS_SUCCESS = '[User] Load User Details Success';\n\nexport class LoadUserDetails implements Action {\n  readonly type = LOAD_USER_DETAILS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadUserDetailsFail implements Action {\n  readonly type = LOAD_USER_DETAILS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadUserDetailsSuccess implements Action {\n  readonly type = LOAD_USER_DETAILS_SUCCESS;\n  constructor(public payload: User) {}\n}\n\n// action types\nexport type UserDetailsAction =\n  | LoadUserDetails\n  | LoadUserDetailsFail\n  | LoadUserDetailsSuccess;\n","import { LoaderState } from '../../state';\nimport {\n  Address,\n  PaymentDetails,\n  OrderHistoryList,\n  User,\n  Region,\n  Order,\n  Country,\n  Title\n} from '../../occ/occ-models/index';\n\nexport const USER_FEATURE = 'user';\nexport const USER_PAYMENT_METHODS = '[User] User Payment Methods';\nexport const USER_ORDERS = '[User] User Orders';\nexport const USER_ADDRESSES = '[User] User Addresses';\n\nexport interface StateWithUser {\n  [USER_FEATURE]: UserState;\n}\n\nexport interface UserState {\n  account: UserDetailsState;\n  addresses: LoaderState<Address[]>;\n  billingCountries: BillingCountriesState;\n  countries: DeliveryCountriesState;\n  payments: LoaderState<PaymentDetails[]>;\n  orders: LoaderState<OrderHistoryList>;\n  order: OrderDetailsState;\n  titles: TitlesState;\n  regions: RegionsState;\n}\n\nexport interface OrderDetailsState {\n  order: Order;\n}\n\nexport interface RegionsState {\n  entities: Region[];\n}\n\nexport interface BillingCountryEntities {\n  [key: string]: Country;\n}\n\nexport interface BillingCountriesState {\n  entities: BillingCountryEntities;\n}\n\nexport interface DeliveryCountryEntities {\n  [key: string]: Country;\n}\n\nexport interface DeliveryCountriesState {\n  entities: DeliveryCountryEntities;\n}\n\nexport interface TitleEntities {\n  [key: string]: Title;\n}\n\nexport interface TitlesState {\n  entities: TitleEntities;\n}\n\nexport interface UserDetailsState {\n  details: User;\n}\n","import { USER_ADDRESSES } from '../user-state';\nimport { Address } from '../../../occ/occ-models/index';\nimport {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction\n} from '../../../state/utils/loader/loader.action';\n\nexport const LOAD_USER_ADDRESSES = '[User] Load User Addresses';\nexport const LOAD_USER_ADDRESSES_FAIL = '[User] Load User Addresses Fail';\nexport const LOAD_USER_ADDRESSES_SUCCESS = '[User] Load User Addresses Success';\n\nexport const ADD_USER_ADDRESS = '[User] Add User Address';\nexport const ADD_USER_ADDRESS_FAIL = '[User] Add User Address Fail';\nexport const ADD_USER_ADDRESS_SUCCESS = '[User] Add User Address Success';\n\nexport const UPDATE_USER_ADDRESS = '[User] Update User Address';\nexport const UPDATE_USER_ADDRESS_FAIL = '[User] Update User Address Fail';\nexport const UPDATE_USER_ADDRESS_SUCCESS = '[User] Update User Address Success';\n\nexport const DELETE_USER_ADDRESS = '[User] Delete User Address';\nexport const DELETE_USER_ADDRESS_FAIL = '[User] Delete User Address Fail';\nexport const DELETE_USER_ADDRESS_SUCCESS = '[User] Delete User Address Success';\n\nexport class LoadUserAddresses extends LoaderLoadAction {\n  readonly type = LOAD_USER_ADDRESSES;\n  constructor(public payload: string) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class LoadUserAddressesFail extends LoaderFailAction {\n  readonly type = LOAD_USER_ADDRESSES_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class LoadUserAddressesSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_USER_ADDRESSES_SUCCESS;\n  constructor(public payload: Address[]) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Adding address actions\nexport class AddUserAddress extends LoaderLoadAction {\n  readonly type = ADD_USER_ADDRESS;\n  constructor(public payload: { userId: string; address: Address }) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class AddUserAddressFail extends LoaderFailAction {\n  readonly type = ADD_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class AddUserAddressSuccess extends LoaderSuccessAction {\n  readonly type = ADD_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Updating address actions\nexport class UpdateUserAddress extends LoaderLoadAction {\n  readonly type = UPDATE_USER_ADDRESS;\n  constructor(\n    public payload: { userId: string; addressId: string; address: Address }\n  ) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class UpdateUserAddressFail extends LoaderFailAction {\n  readonly type = UPDATE_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class UpdateUserAddressSuccess extends LoaderSuccessAction {\n  readonly type = UPDATE_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Deleting address actions\nexport class DeleteUserAddress extends LoaderLoadAction {\n  readonly type = DELETE_USER_ADDRESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class DeleteUserAddressFail extends LoaderFailAction {\n  readonly type = DELETE_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class DeleteUserAddressSuccess extends LoaderSuccessAction {\n  readonly type = DELETE_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// action types\nexport type UserAddressesAction =\n  | LoadUserAddresses\n  | LoadUserAddressesFail\n  | LoadUserAddressesSuccess\n  | AddUserAddress\n  | AddUserAddressFail\n  | AddUserAddressSuccess\n  | UpdateUserAddress\n  | UpdateUserAddressFail\n  | UpdateUserAddressSuccess\n  | DeleteUserAddress\n  | DeleteUserAddressFail\n  | DeleteUserAddressSuccess;\n","import { USER_PAYMENT_METHODS } from '../user-state';\nimport { PaymentDetails } from '../../../occ/occ-models/index';\nimport {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction\n} from '../../../state/utils/loader/loader.action';\n\nexport const LOAD_USER_PAYMENT_METHODS = '[User] Load User Payment Methods';\nexport const LOAD_USER_PAYMENT_METHODS_FAIL =\n  '[User] Load User Payment Methods Fail';\nexport const LOAD_USER_PAYMENT_METHODS_SUCCESS =\n  '[User] Load User Payment Methods Success';\n\nexport const SET_DEFAULT_USER_PAYMENT_METHOD =\n  '[User] Set Default User Payment Method';\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_FAIL =\n  '[User] Set Default User Payment Method Fail';\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS =\n  '[User] Set Default User Payment Method Success';\n\nexport const DELETE_USER_PAYMENT_METHOD = '[User] Delete User Payment Method';\nexport const DELETE_USER_PAYMENT_METHOD_FAIL =\n  '[User] Delete User Payment Method Fail';\nexport const DELETE_USER_PAYMENT_METHOD_SUCCESS =\n  '[User] Delete User  Payment Method Success';\n\nexport class LoadUserPaymentMethods extends LoaderLoadAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS;\n  constructor(public payload: string) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class LoadUserPaymentMethodsFail extends LoaderFailAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class LoadUserPaymentMethodsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS_SUCCESS;\n  constructor(public payload: PaymentDetails[]) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class SetDefaultUserPaymentMethod extends LoaderLoadAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class SetDefaultUserPaymentMethodFail extends LoaderFailAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class SetDefaultUserPaymentMethodSuccess extends LoaderSuccessAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class DeleteUserPaymentMethod extends LoaderLoadAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class DeleteUserPaymentMethodFail extends LoaderFailAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class DeleteUserPaymentMethodSuccess extends LoaderSuccessAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\n// action types\nexport type UserPaymentMethodsAction =\n  | LoadUserPaymentMethods\n  | LoadUserPaymentMethodsFail\n  | LoadUserPaymentMethodsSuccess\n  | SetDefaultUserPaymentMethod\n  | SetDefaultUserPaymentMethodFail\n  | SetDefaultUserPaymentMethodSuccess\n  | DeleteUserPaymentMethod\n  | DeleteUserPaymentMethodFail\n  | DeleteUserPaymentMethodSuccess;\n","import { Action } from '@ngrx/store';\n\nimport { UserRegisterFormData } from '../../model/user.model';\n\nexport const REGISTER_USER = '[User] Register User';\nexport const REGISTER_USER_FAIL = '[User] Register User Fail';\nexport const REGISTER_USER_SUCCESS = '[User] Register User Success';\n\nexport class RegisterUser implements Action {\n  readonly type = REGISTER_USER;\n  constructor(public payload: UserRegisterFormData) {}\n}\n\nexport class RegisterUserFail implements Action {\n  readonly type = REGISTER_USER_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class RegisterUserSuccess implements Action {\n  readonly type = REGISTER_USER_SUCCESS;\n  constructor() {}\n}\n\n// action types\nexport type UserRegisterAction =\n  | RegisterUser\n  | RegisterUserFail\n  | RegisterUserSuccess;\n","import { USER_ORDERS } from '../user-state';\nimport { OrderHistoryList } from '../../../occ/occ-models/index';\nimport {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction\n} from '../../../state/utils/loader/loader.action';\n\nexport const LOAD_USER_ORDERS = '[User] Load User Orders';\nexport const LOAD_USER_ORDERS_FAIL = '[User] Load User Orders Fail';\nexport const LOAD_USER_ORDERS_SUCCESS = '[User] Load User Orders Success';\nexport const CLEAR_USER_ORDERS = '[User] Clear User Orders';\n\nexport class LoadUserOrders extends LoaderLoadAction {\n  readonly type = LOAD_USER_ORDERS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(USER_ORDERS);\n  }\n}\n\nexport class LoadUserOrdersFail extends LoaderFailAction {\n  readonly type = LOAD_USER_ORDERS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ORDERS, payload);\n  }\n}\n\nexport class LoadUserOrdersSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_USER_ORDERS_SUCCESS;\n  constructor(public payload: OrderHistoryList) {\n    super(USER_ORDERS);\n  }\n}\n\nexport class ClearUserOrders {\n  readonly type = CLEAR_USER_ORDERS;\n  constructor() {}\n}\n\nexport type UserOrdersAction =\n  | LoadUserOrders\n  | LoadUserOrdersFail\n  | LoadUserOrdersSuccess\n  | ClearUserOrders;\n","import { Action } from '@ngrx/store';\n\nimport { Title } from '../../../occ/occ-models';\n\nexport const LOAD_TITLES = '[User] Load Tiltes';\nexport const LOAD_TITLES_FAIL = '[User] Load Titles Fail';\nexport const LOAD_TITLES_SUCCESS = '[User] Load Titles Success';\n\nexport class LoadTitles implements Action {\n  readonly type = LOAD_TITLES;\n  constructor() {}\n}\n\nexport class LoadTitlesFail implements Action {\n  readonly type = LOAD_TITLES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadTitlesSuccess implements Action {\n  readonly type = LOAD_TITLES_SUCCESS;\n  constructor(public payload: Title[]) {}\n}\n\nexport type TitlesAction = LoadTitles | LoadTitlesFail | LoadTitlesSuccess;\n","import { Action } from '@ngrx/store';\n\nimport { Country } from '../../../occ/occ-models/index';\n\nexport const LOAD_DELIVERY_COUNTRIES = '[User] Load Delivery Countries';\nexport const LOAD_DELIVERY_COUNTRIES_FAIL =\n  '[User] Load Delivery Countries Fail';\nexport const LOAD_DELIVERY_COUNTRIES_SUCCESS =\n  '[User] Load Delivery Countries Success';\n\nexport class LoadDeliveryCountries implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadDeliveryCountriesFail implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadDeliveryCountriesSuccess implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_SUCCESS;\n  constructor(public payload: Country[]) {}\n}\n\nexport type DeliveryCountriesAction =\n  | LoadDeliveryCountries\n  | LoadDeliveryCountriesFail\n  | LoadDeliveryCountriesSuccess;\n","import { Action } from '@ngrx/store';\n\nimport { Region } from '../../../occ/occ-models/index';\n\nexport const LOAD_REGIONS = '[User] Load Regions';\nexport const LOAD_REGIONS_SUCCESS = '[User] Load Regions Success';\nexport const LOAD_REGIONS_FAIL = '[User] Load Regions Fail';\n\nexport class LoadRegions implements Action {\n  readonly type = LOAD_REGIONS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadRegionsFail implements Action {\n  readonly type = LOAD_REGIONS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadRegionsSuccess implements Action {\n  readonly type = LOAD_REGIONS_SUCCESS;\n  constructor(public payload: Region[]) {}\n}\n\nexport type RegionsAction = LoadRegions | LoadRegionsFail | LoadRegionsSuccess;\n","import { Action } from '@ngrx/store';\nimport { Order } from '../../../occ/occ-models/index';\n\nexport const LOAD_ORDER_DETAILS = '[User] Load Order Details';\nexport const LOAD_ORDER_DETAILS_FAIL = '[User] Load Order Details Fail';\nexport const LOAD_ORDER_DETAILS_SUCCESS = '[User] Load Order Details Success';\nexport const CLEAR_ORDER_DETAILS = '[User] Clear Order Details';\n\nexport class LoadOrderDetails implements Action {\n  readonly type = LOAD_ORDER_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      orderCode: string;\n    }\n  ) {}\n}\n\nexport class LoadOrderDetailsFail implements Action {\n  readonly type = LOAD_ORDER_DETAILS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadOrderDetailsSuccess implements Action {\n  readonly type = LOAD_ORDER_DETAILS_SUCCESS;\n  constructor(public payload: Order) {}\n}\n\nexport class ClearOrderDetails implements Action {\n  readonly type = CLEAR_ORDER_DETAILS;\n}\n\nexport type OrderDetailsAction =\n  | LoadOrderDetails\n  | LoadOrderDetailsFail\n  | LoadOrderDetailsSuccess\n  | ClearOrderDetails;\n","import { Action } from '@ngrx/store';\n\nexport const LOAD_BILLING_COUNTRIES = '[User] Load Billing Countries';\nexport const LOAD_BILLING_COUNTRIES_FAIL = '[User] Load Billing Countries Fail';\nexport const LOAD_BILLING_COUNTRIES_SUCCESS =\n  '[User] Load Billing Countries Success';\n\nexport class LoadBillingCountries implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadBillingCountriesFail implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBillingCountriesSuccess implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport type BillingCountriesAction =\n  | LoadBillingCountries\n  | LoadBillingCountriesFail\n  | LoadBillingCountriesSuccess;\n","import { Action } from '@ngrx/store';\n\nexport const CLEAR_MISCS_DATA = '[User] Clear User Misc Data';\n\nexport class ClearMiscsData implements Action {\n  readonly type = CLEAR_MISCS_DATA;\n}\n\nexport * from './user-details.action';\nexport * from './user-addresses.action';\nexport * from './payment-methods.action';\nexport * from './user-register.action';\nexport * from './user-orders.action';\nexport * from './titles.action';\nexport * from './delivery-countries.action';\nexport * from './regions.action';\nexport * from './order-details.action';\nexport * from './billing-countries.action';\n","import { Injectable } from '@angular/core';\n\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\n\nimport * as fromUserDetailsAction from '../actions/user-details.action';\nimport { OccUserService } from '../../occ/index';\nimport { User } from '../../../occ/occ-models/index';\n\n@Injectable()\nexport class UserDetailsEffects {\n  @Effect()\n  loadUserDetails$: Observable<\n    fromUserDetailsAction.UserDetailsAction\n  > = this.actions$.pipe(\n    ofType(fromUserDetailsAction.LOAD_USER_DETAILS),\n    map((action: fromUserDetailsAction.LoadUserDetails) => action.payload),\n    mergeMap(userId => {\n      return this.occUserService.loadUser(userId).pipe(\n        map((user: User) => {\n          return new fromUserDetailsAction.LoadUserDetailsSuccess(user);\n        }),\n        catchError(error =>\n          of(new fromUserDetailsAction.LoadUserDetailsFail(error))\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private occUserService: OccUserService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\n\nimport * as fromUserAddressesAction from '../actions/user-addresses.action';\nimport { OccUserService } from '../../occ/index';\nimport { AddressList } from '../../../occ/occ-models/index';\n\n@Injectable()\nexport class UserAddressesEffects {\n  @Effect()\n  loadUserAddresses$: Observable<\n    fromUserAddressesAction.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(fromUserAddressesAction.LOAD_USER_ADDRESSES),\n    map((action: fromUserAddressesAction.LoadUserAddresses) => action.payload),\n    mergeMap(payload => {\n      return this.occUserService.loadUserAddresses(payload).pipe(\n        map((addressesList: AddressList) => {\n          return new fromUserAddressesAction.LoadUserAddressesSuccess(\n            addressesList.addresses\n          );\n        }),\n        catchError(error =>\n          of(new fromUserAddressesAction.LoadUserAddressesFail(error))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  addUserAddress$: Observable<\n    fromUserAddressesAction.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(fromUserAddressesAction.ADD_USER_ADDRESS),\n    map((action: fromUserAddressesAction.AddUserAddress) => action.payload),\n    mergeMap(payload => {\n      return this.occUserService\n        .addUserAddress(payload.userId, payload.address)\n        .pipe(\n          map((data: any) => {\n            return new fromUserAddressesAction.AddUserAddressSuccess(data);\n          }),\n          catchError(error =>\n            of(new fromUserAddressesAction.AddUserAddressFail(error))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  updateUserAddress$: Observable<\n    fromUserAddressesAction.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(fromUserAddressesAction.UPDATE_USER_ADDRESS),\n    map((action: fromUserAddressesAction.UpdateUserAddress) => action.payload),\n    mergeMap(payload => {\n      return this.occUserService\n        .updateUserAddress(payload.userId, payload.addressId, payload.address)\n        .pipe(\n          map((data: any) => {\n            return new fromUserAddressesAction.UpdateUserAddressSuccess(data);\n          }),\n          catchError(error =>\n            of(new fromUserAddressesAction.UpdateUserAddressFail(error))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  deleteUserAddress$: Observable<\n    fromUserAddressesAction.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(fromUserAddressesAction.DELETE_USER_ADDRESS),\n    map((action: fromUserAddressesAction.DeleteUserAddress) => action.payload),\n    mergeMap(payload => {\n      return this.occUserService\n        .deleteUserAddress(payload.userId, payload.addressId)\n        .pipe(\n          map((data: any) => {\n            return new fromUserAddressesAction.DeleteUserAddressSuccess(data);\n          }),\n          catchError(error =>\n            of(new fromUserAddressesAction.DeleteUserAddressFail(error))\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private occUserService: OccUserService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\n\nimport { OccUserService } from '../../occ/index';\nimport * as fromUserPaymentMethodsAction from '../actions/payment-methods.action';\nimport { PaymentDetailsList } from '../../../occ/occ-models/index';\n\n@Injectable()\nexport class UserPaymentMethodsEffects {\n  @Effect()\n  loadUserPaymentMethods$: Observable<any> = this.actions$.pipe(\n    ofType(fromUserPaymentMethodsAction.LOAD_USER_PAYMENT_METHODS),\n    map(\n      (action: fromUserPaymentMethodsAction.LoadUserPaymentMethods) =>\n        action.payload\n    ),\n    mergeMap(payload => {\n      return this.occUserService.loadUserPaymentMethods(payload).pipe(\n        map((paymentsList: PaymentDetailsList) => {\n          return new fromUserPaymentMethodsAction.LoadUserPaymentMethodsSuccess(\n            paymentsList.payments\n          );\n        }),\n        catchError(error =>\n          of(new fromUserPaymentMethodsAction.LoadUserPaymentMethodsFail(error))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  setDefaultUserPaymentMethod$: Observable<any> = this.actions$.pipe(\n    ofType(fromUserPaymentMethodsAction.SET_DEFAULT_USER_PAYMENT_METHOD),\n    map(\n      (action: fromUserPaymentMethodsAction.SetDefaultUserPaymentMethod) =>\n        action.payload\n    ),\n    mergeMap(payload => {\n      return this.occUserService\n        .setDefaultUserPaymentMethod(payload.userId, payload.paymentMethodId)\n        .pipe(\n          switchMap((data: any) => {\n            return [\n              new fromUserPaymentMethodsAction.SetDefaultUserPaymentMethodSuccess(\n                data\n              ),\n              new fromUserPaymentMethodsAction.LoadUserPaymentMethods(\n                payload.userId\n              )\n            ];\n          }),\n          catchError(error =>\n            of(\n              new fromUserPaymentMethodsAction.SetDefaultUserPaymentMethodFail(\n                error\n              )\n            )\n          )\n        );\n    })\n  );\n  @Effect()\n  deleteUserPaymentMethod$: Observable<any> = this.actions$.pipe(\n    ofType(fromUserPaymentMethodsAction.DELETE_USER_PAYMENT_METHOD),\n    map(\n      (action: fromUserPaymentMethodsAction.DeleteUserPaymentMethod) =>\n        action.payload\n    ),\n    mergeMap(payload => {\n      return this.occUserService\n        .deleteUserPaymentMethod(payload.userId, payload.paymentMethodId)\n        .pipe(\n          switchMap((data: any) => {\n            return [\n              new fromUserPaymentMethodsAction.DeleteUserPaymentMethodSuccess(\n                data\n              ),\n              new fromUserPaymentMethodsAction.LoadUserPaymentMethods(\n                payload.userId\n              )\n            ];\n          }),\n          catchError(error =>\n            of(\n              new fromUserPaymentMethodsAction.DeleteUserPaymentMethodFail(\n                error\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private occUserService: OccUserService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Effect, Actions, ofType } from '@ngrx/effects';\n\nimport { Observable, of } from 'rxjs';\nimport { map, mergeMap, catchError, switchMap } from 'rxjs/operators';\n\nimport * as fromActions from '../actions/user-register.action';\nimport { LoadUserToken } from '../../../auth/index';\nimport { UserRegisterFormData } from '../../../user/model/user.model';\nimport { OccUserService } from '../../../user/occ/index';\n\n@Injectable()\nexport class UserRegisterEffects {\n  @Effect()\n  registerUser$: Observable<\n    fromActions.UserRegisterAction | LoadUserToken\n  > = this.actions$.pipe(\n    ofType(fromActions.REGISTER_USER),\n    map((action: fromActions.RegisterUser) => action.payload),\n    mergeMap((user: UserRegisterFormData) => {\n      return this.userService.registerUser(user).pipe(\n        switchMap(_result => [\n          new LoadUserToken({\n            userId: user.uid,\n            password: user.password\n          }),\n          new fromActions.RegisterUserSuccess()\n        ]),\n        catchError(error => of(new fromActions.RegisterUserFail(error)))\n      );\n    })\n  );\n\n  constructor(private actions$: Actions, private userService: OccUserService) {}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\n\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, catchError } from 'rxjs/operators';\n\nimport { USER_ORDERS } from '../user-state';\nimport { CLEAR_MISCS_DATA } from '../actions/index';\nimport * as fromUserOrdersAction from '../actions/user-orders.action';\nimport { LoaderResetAction } from '../../../state';\nimport { OccOrderService } from '../../occ/index';\nimport { OrderHistoryList } from '../../../occ/occ-models/index';\n\n@Injectable()\nexport class UserOrdersEffect {\n  constructor(\n    private actions$: Actions,\n    private occOrderService: OccOrderService\n  ) {}\n\n  @Effect()\n  loadUserOrders$: Observable<\n    fromUserOrdersAction.UserOrdersAction\n  > = this.actions$.pipe(\n    ofType(fromUserOrdersAction.LOAD_USER_ORDERS),\n    map((action: fromUserOrdersAction.LoadUserOrders) => action.payload),\n    switchMap(payload => {\n      return this.occOrderService\n        .getOrders(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map((orders: OrderHistoryList) => {\n            return new fromUserOrdersAction.LoadUserOrdersSuccess(orders);\n          }),\n          catchError(error =>\n            of(new fromUserOrdersAction.LoadUserOrdersFail(error))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  resetUserOrders$: Observable<Action> = this.actions$.pipe(\n    ofType(CLEAR_MISCS_DATA, fromUserOrdersAction.CLEAR_USER_ORDERS),\n    map(() => {\n      return new LoaderResetAction(USER_ORDERS);\n    })\n  );\n}\n","import { Injectable } from '@angular/core';\n\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\n\nimport * as fromAction from '../actions/titles.action';\nimport { OccMiscsService } from '../../../occ/miscs/miscs.service';\n\n@Injectable()\nexport class TitlesEffects {\n  @Effect()\n  loadTitles$: Observable<fromAction.TitlesAction> = this.actions$.pipe(\n    ofType(fromAction.LOAD_TITLES),\n    switchMap(() => {\n      return this.occMiscsService.loadTitles().pipe(\n        map(data => new fromAction.LoadTitlesSuccess(data.titles)),\n        catchError(error => of(new fromAction.LoadTitlesFail(error)))\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private occMiscsService: OccMiscsService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\n\nimport * as fromAction from '../actions/delivery-countries.action';\nimport { OccMiscsService } from '../../../occ/miscs/miscs.service';\n\n@Injectable()\nexport class DeliveryCountriesEffects {\n  @Effect()\n  loadDeliveryCountries$: Observable<\n    fromAction.DeliveryCountriesAction\n  > = this.actions$.pipe(\n    ofType(fromAction.LOAD_DELIVERY_COUNTRIES),\n    switchMap(() => {\n      return this.occMiscsService.loadDeliveryCountries().pipe(\n        map(\n          data => new fromAction.LoadDeliveryCountriesSuccess(data.countries)\n        ),\n        catchError(error => of(new fromAction.LoadDeliveryCountriesFail(error)))\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private occMiscsService: OccMiscsService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Effect, Actions, ofType } from '@ngrx/effects';\n\nimport { Observable, of } from 'rxjs';\nimport { switchMap, map, catchError } from 'rxjs/operators';\n\nimport * as fromActions from '../actions/index';\nimport { OccMiscsService } from '../../../occ/miscs/miscs.service';\n\n@Injectable()\nexport class RegionsEffects {\n  @Effect()\n  loadRegions$: Observable<fromActions.RegionsAction> = this.actions$.pipe(\n    ofType(fromActions.LOAD_REGIONS),\n    map((action: fromActions.LoadRegions) => {\n      return action.payload;\n    }),\n    switchMap((countryCode: string) => {\n      return this.occMiscsService.loadRegions(countryCode).pipe(\n        map(data => new fromActions.LoadRegionsSuccess(data.regions)),\n        catchError(error => of(new fromActions.LoadRegionsFail(error)))\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private occMiscsService: OccMiscsService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\n\nimport * as fromOrderDetailsAction from '../actions/order-details.action';\nimport { OccOrderService } from '../../occ/index';\nimport { Order } from '../../../occ/occ-models/index';\nimport { ProductImageConverterService } from '../../../product/store/converters/index';\n\n@Injectable()\nexport class OrderDetailsEffect {\n  @Effect()\n  loadOrderDetails$: Observable<\n    fromOrderDetailsAction.OrderDetailsAction\n  > = this.actions$.pipe(\n    ofType(fromOrderDetailsAction.LOAD_ORDER_DETAILS),\n    map((action: fromOrderDetailsAction.LoadOrderDetails) => action.payload),\n    switchMap(payload => {\n      return this.occOrderService\n        .getOrder(payload.userId, payload.orderCode)\n        .pipe(\n          map((order: Order) => {\n            if (order.consignments) {\n              order.consignments.forEach(element => {\n                element.entries.forEach(entry => {\n                  this.productImageConverter.convertProduct(\n                    entry.orderEntry.product\n                  );\n                });\n              });\n            }\n            if (order.unconsignedEntries) {\n              order.unconsignedEntries.forEach(entry => {\n                this.productImageConverter.convertProduct(entry.product);\n              });\n            }\n            return new fromOrderDetailsAction.LoadOrderDetailsSuccess(order);\n          }),\n          catchError(error =>\n            of(new fromOrderDetailsAction.LoadOrderDetailsFail(error))\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private occOrderService: OccOrderService,\n    private productImageConverter: ProductImageConverterService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\n\nimport * as fromAction from '../actions/billing-countries.action';\nimport { OccMiscsService } from '../../../occ/miscs/miscs.service';\n\n@Injectable()\nexport class BillingCountriesEffect {\n  @Effect()\n  loadBillingCountries$: Observable<\n    fromAction.BillingCountriesAction\n  > = this.actions$.pipe(\n    ofType(fromAction.LOAD_BILLING_COUNTRIES),\n    switchMap(() => {\n      return this.occMiscsService.loadBillingCountries().pipe(\n        map(data => new fromAction.LoadBillingCountriesSuccess(data.countries)),\n        catchError(error => of(new fromAction.LoadBillingCountriesFail(error)))\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private occMiscsService: OccMiscsService\n  ) {}\n}\n","import { UserDetailsEffects } from './user-details.effect';\nimport { UserAddressesEffects } from './user-addresses.effect';\nimport { UserPaymentMethodsEffects } from './payment-methods.effect';\nimport { UserRegisterEffects } from './user-register.effect';\nimport { UserOrdersEffect } from './user-orders.effect';\nimport { TitlesEffects } from './titles.effect';\nimport { DeliveryCountriesEffects } from './delivery-countries.effect';\nimport { RegionsEffects } from './regions.effect';\nimport { OrderDetailsEffect } from './order-details.effect';\nimport { BillingCountriesEffect } from './billing-countries.effect';\n\nexport const effects: any[] = [\n  DeliveryCountriesEffects,\n  RegionsEffects,\n  TitlesEffects,\n  UserDetailsEffects,\n  UserAddressesEffects,\n  UserPaymentMethodsEffects,\n  UserRegisterEffects,\n  UserOrdersEffect,\n  OrderDetailsEffect,\n  BillingCountriesEffect\n];\n\nexport * from './user-details.effect';\nexport * from './user-addresses.effect';\nexport * from './payment-methods.effect';\nexport * from './user-register.effect';\nexport * from './user-orders.effect';\nexport * from './titles.effect';\nexport * from './delivery-countries.effect';\nexport * from './regions.effect';\nexport * from './order-details.effect';\nexport * from './billing-countries.effect';\n","import { BillingCountriesState } from '../user-state';\nimport * as fromAction from '../actions/billing-countries.action';\nimport { CLEAR_MISCS_DATA, ClearMiscsData } from '../actions/index';\n\nexport const initialState: BillingCountriesState = {\n  entities: {}\n};\n\nexport function reducer(\n  state = initialState,\n  action: fromAction.BillingCountriesAction | ClearMiscsData\n): BillingCountriesState {\n  switch (action.type) {\n    case fromAction.LOAD_BILLING_COUNTRIES_SUCCESS: {\n      const billingCountries = action.payload;\n      const entities = billingCountries.reduce(\n        (countryEntities: { [isocode: string]: any }, name: any) => {\n          return {\n            ...countryEntities,\n            [name.isocode]: name\n          };\n        },\n        {\n          ...state.entities\n        }\n      );\n\n      return {\n        ...state,\n        entities\n      };\n    }\n\n    case CLEAR_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { DeliveryCountriesState } from '../user-state';\nimport * as fromAction from '../actions/index';\nimport { Country } from '../../../occ/occ-models/index';\n\nexport const initialState: DeliveryCountriesState = {\n  entities: {}\n};\n\nexport function reducer(\n  state = initialState,\n  action: fromAction.DeliveryCountriesAction | fromAction.ClearMiscsData\n): DeliveryCountriesState {\n  switch (action.type) {\n    case fromAction.LOAD_DELIVERY_COUNTRIES_SUCCESS: {\n      const deliveryCountries = action.payload;\n      const entities = deliveryCountries.reduce(\n        (countryEntities: { [isocode: string]: Country }, country: Country) => {\n          return {\n            ...countryEntities,\n            [country.isocode]: country\n          };\n        },\n        {\n          ...state.entities\n        }\n      );\n\n      return {\n        ...state,\n        entities\n      };\n    }\n\n    case fromAction.CLEAR_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import * as fromOrderDetailsAction from '../actions/order-details.action';\nimport { OrderDetailsState } from '../user-state';\nimport { Order } from '../../../occ/occ-models/index';\n\nexport const initialState: OrderDetailsState = {\n  order: {}\n};\n\nexport function reducer(\n  state = initialState,\n  action: fromOrderDetailsAction.OrderDetailsAction\n): OrderDetailsState {\n  switch (action.type) {\n    case fromOrderDetailsAction.LOAD_ORDER_DETAILS_SUCCESS: {\n      const order: Order = action.payload;\n\n      return {\n        ...state,\n        order\n      };\n    }\n    case fromOrderDetailsAction.CLEAR_ORDER_DETAILS: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import * as fromPaymentMethodsAction from '../actions/payment-methods.action';\nimport { PaymentDetails } from '../../../occ/occ-models/index';\n\nexport const initialState: PaymentDetails[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: fromPaymentMethodsAction.UserPaymentMethodsAction\n): PaymentDetails[] {\n  switch (action.type) {\n    case fromPaymentMethodsAction.LOAD_USER_PAYMENT_METHODS_SUCCESS: {\n      return action.payload ? action.payload : state;\n    }\n\n    case fromPaymentMethodsAction.LOAD_USER_PAYMENT_METHODS_FAIL: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { RegionsState } from '../user-state';\nimport * as fromAction from '../actions/index';\nimport { Region } from '../../../occ/occ-models';\n\nexport const initialState: RegionsState = {\n  entities: []\n};\n\nexport function reducer(\n  state = initialState,\n  action: fromAction.RegionsAction | fromAction.ClearMiscsData\n): RegionsState {\n  switch (action.type) {\n    case fromAction.LOAD_REGIONS_SUCCESS: {\n      const entities: Region[] = action.payload;\n      if (entities) {\n        return {\n          ...state,\n          entities\n        };\n      }\n      return initialState;\n    }\n\n    case fromAction.LOAD_REGIONS: {\n      return {\n        ...state\n      };\n    }\n\n    case fromAction.CLEAR_MISCS_DATA: {\n      return {\n        ...initialState\n      };\n    }\n  }\n\n  return state;\n}\n","import { TitlesState } from '../user-state';\nimport * as fromAction from '../actions/index';\nimport { Title } from '../../../occ';\n\nexport const initialState: TitlesState = {\n  entities: {}\n};\n\nexport function reducer(\n  state = initialState,\n  action: fromAction.TitlesAction | fromAction.ClearMiscsData\n): TitlesState {\n  switch (action.type) {\n    case fromAction.LOAD_TITLES_SUCCESS: {\n      const titles = action.payload;\n      const entities = titles.reduce(\n        (titleEntities: { [code: string]: Title }, name: Title) => {\n          return {\n            ...titleEntities,\n            [name.code]: name\n          };\n        },\n        {\n          ...state.entities\n        }\n      );\n\n      return {\n        ...state,\n        entities\n      };\n    }\n\n    case fromAction.CLEAR_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import * as fromActions from '../actions/user-addresses.action';\nimport { Address } from '../../../occ';\n\nexport const initialState: Address[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: fromActions.UserAddressesAction\n): Address[] {\n  switch (action.type) {\n    case fromActions.LOAD_USER_ADDRESSES_FAIL: {\n      return initialState;\n    }\n\n    case fromActions.LOAD_USER_ADDRESSES_SUCCESS: {\n      return action.payload ? action.payload : state;\n    }\n  }\n  return state;\n}\n","import * as fromUserDetailsAction from '../actions/user-details.action';\nimport { UserDetailsState } from '../user-state';\nimport { User } from '../../../occ/occ-models/index';\n\nexport const initialState: UserDetailsState = {\n  details: <User>{}\n};\n\nexport function reducer(\n  state = initialState,\n  action: fromUserDetailsAction.UserDetailsAction\n): UserDetailsState {\n  switch (action.type) {\n    case fromUserDetailsAction.LOAD_USER_DETAILS_SUCCESS: {\n      const details: User = action.payload;\n\n      return {\n        ...state,\n        details\n      };\n    }\n  }\n  return state;\n}\n","import * as fromUserOrdersAction from '../actions/user-orders.action';\nimport { OrderHistoryList } from '../../../occ';\n\nexport const initialState: OrderHistoryList = {\n  orders: [],\n  pagination: {},\n  sorts: []\n};\n\nexport function reducer(\n  state = initialState,\n  action: fromUserOrdersAction.UserOrdersAction\n): OrderHistoryList {\n  switch (action.type) {\n    case fromUserOrdersAction.LOAD_USER_ORDERS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case fromUserOrdersAction.LOAD_USER_ORDERS_FAIL: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\n\nimport { ActionReducerMap, MetaReducer, ActionReducer } from '@ngrx/store';\n\nimport {\n  UserState,\n  USER_ORDERS,\n  USER_PAYMENT_METHODS,\n  USER_ADDRESSES\n} from '../user-state';\nimport { LOGOUT } from '../../../auth/index';\nimport {\n  PaymentDetails,\n  OrderHistoryList,\n  Address\n} from '../../../occ/occ-models/occ.models';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\n\nimport * as fromBillingCountriesReducer from './billing-countries.reducer';\nimport * as fromDeliveryCountries from './delivery-countries.reducer';\nimport * as fromOrderDetailsReducer from './order-details.reducer';\nimport * as fromPaymentReducer from './payment-methods.reducer';\nimport * as fromRegionsReducer from './regions.reducer';\nimport * as fromTitlesReducer from './titles.reducer';\nimport * as fromAddressesReducer from './user-addresses.reducer';\nimport * as fromUserDetailsReducer from './user-details.reducer';\nimport * as fromUserOrdersReducer from './user-orders.reducer';\n\nexport function getReducers(): ActionReducerMap<UserState> {\n  return {\n    account: fromUserDetailsReducer.reducer,\n    addresses: loaderReducer<Address[]>(\n      USER_ADDRESSES,\n      fromAddressesReducer.reducer\n    ),\n    billingCountries: fromBillingCountriesReducer.reducer,\n    payments: loaderReducer<PaymentDetails[]>(\n      USER_PAYMENT_METHODS,\n      fromPaymentReducer.reducer\n    ),\n    orders: loaderReducer<OrderHistoryList>(\n      USER_ORDERS,\n      fromUserOrdersReducer.reducer\n    ),\n    order: fromOrderDetailsReducer.reducer,\n    countries: fromDeliveryCountries.reducer,\n    titles: fromTitlesReducer.reducer,\n    regions: fromRegionsReducer.reducer\n  };\n}\n\nexport const reducerToken: InjectionToken<\n  ActionReducerMap<UserState>\n> = new InjectionToken<ActionReducerMap<UserState>>('UserReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers\n};\n\nexport function clearUserState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function(state, action) {\n    if (action.type === LOGOUT) {\n      state = undefined;\n    }\n\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearUserState];\n","import { MemoizedSelector, createFeatureSelector } from '@ngrx/store';\nimport { UserState, USER_FEATURE, StateWithUser } from '../user-state';\n\nexport const getUserState: MemoizedSelector<\n  StateWithUser,\n  UserState\n> = createFeatureSelector<UserState>(USER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { UserDetailsState, UserState, StateWithUser } from '../user-state';\nimport { User } from '../../../occ/occ-models/index';\nimport { getUserState } from './feature.selector';\n\nexport const getDetailsState: MemoizedSelector<\n  StateWithUser,\n  UserDetailsState\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.account\n);\n\nexport const getDetails: MemoizedSelector<StateWithUser, User> = createSelector(\n  getDetailsState,\n  (state: UserDetailsState) => state.details\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { UserState, StateWithUser } from '../user-state';\nimport { Address } from '../../../occ/occ-models/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector\n} from '../../../state/utils/loader/loader.selectors';\n\nimport { getUserState } from './feature.selector';\n\nexport const getAddressesLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<Address[]>\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.addresses\n);\n\nexport const getAddresses: MemoizedSelector<\n  StateWithUser,\n  Address[]\n> = createSelector(\n  getAddressesLoaderState,\n  (state: LoaderState<Address[]>) => loaderValueSelector(state)\n);\n\nexport const getAddressesLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getAddressesLoaderState,\n  (state: LoaderState<Address[]>) => loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { UserState, StateWithUser } from '../user-state';\nimport { PaymentDetails } from '../../../occ/occ-models/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector\n} from '../../../state/utils/loader/loader.selectors';\n\nimport { getUserState } from './feature.selector';\n\nexport const getPaymentMethodsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<PaymentDetails[]>\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.payments\n);\n\nexport const getPaymentMethods: MemoizedSelector<\n  StateWithUser,\n  PaymentDetails[]\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) => loaderValueSelector(state)\n);\n\nexport const getPaymentMethodsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) => loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { UserState, StateWithUser } from '../user-state';\nimport { OrderHistoryList } from '../../../occ/occ-models/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderValueSelector,\n  loaderSuccessSelector\n} from '../../../state/utils/loader/loader.selectors';\n\nimport { getUserState } from './feature.selector';\n\nexport const getOrdersState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<OrderHistoryList>\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.orders\n);\n\nexport const getOrdersLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getOrdersState,\n  (state: LoaderState<OrderHistoryList>) => loaderSuccessSelector(state)\n);\n\nexport const getOrders: MemoizedSelector<\n  StateWithUser,\n  OrderHistoryList\n> = createSelector(\n  getOrdersState,\n  (state: LoaderState<OrderHistoryList>) => loaderValueSelector(state)\n);\n","import { MemoizedSelector, createSelector } from '@ngrx/store';\n\nimport {\n  UserState,\n  TitlesState,\n  StateWithUser,\n  TitleEntities\n} from '../user-state';\nimport { Title } from '../../../occ/occ-models/index';\nimport { getUserState } from './feature.selector';\n\nexport const getTitlesState: MemoizedSelector<\n  StateWithUser,\n  TitlesState\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.titles\n);\n\nexport const getTitlesEntites: MemoizedSelector<\n  StateWithUser,\n  TitleEntities\n> = createSelector(\n  getTitlesState,\n  (state: TitlesState) => state.entities\n);\n\nexport const getAllTitles: MemoizedSelector<\n  StateWithUser,\n  Title[]\n> = createSelector(\n  getTitlesEntites,\n  entites => Object.keys(entites).map(code => entites[code])\n);\n\nexport const titleSelectorFactory = (\n  code: string\n): MemoizedSelector<StateWithUser, Title> =>\n  createSelector(\n    getTitlesEntites,\n    entities => (Object.keys(entities).length !== 0 ? entities[code] : null)\n  );\n","import { MemoizedSelector, createSelector } from '@ngrx/store';\nimport {\n  UserState,\n  DeliveryCountriesState,\n  StateWithUser,\n  DeliveryCountryEntities\n} from '../user-state';\nimport { Country } from '../../../occ/occ-models/index';\nimport { getUserState } from './feature.selector';\n\nexport const getDeliveryCountriesState: MemoizedSelector<\n  StateWithUser,\n  DeliveryCountriesState\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.countries\n);\n\nexport const getDeliveryCountriesEntites: MemoizedSelector<\n  StateWithUser,\n  DeliveryCountryEntities\n> = createSelector(\n  getDeliveryCountriesState,\n  (state: DeliveryCountriesState) => state.entities\n);\n\nexport const getAllDeliveryCountries: MemoizedSelector<\n  StateWithUser,\n  Country[]\n> = createSelector(\n  getDeliveryCountriesEntites,\n  entites => Object.keys(entites).map(isocode => entites[isocode])\n);\n\nexport const countrySelectorFactory = (\n  isocode: string\n): MemoizedSelector<StateWithUser, Country> =>\n  createSelector(\n    getDeliveryCountriesEntites,\n    entities => (Object.keys(entities).length !== 0 ? entities[isocode] : null)\n  );\n","import { MemoizedSelector, createSelector } from '@ngrx/store';\n\nimport { UserState, RegionsState, StateWithUser } from '../user-state';\nimport { Region } from '../../../occ/occ-models/index';\nimport { getUserState } from './feature.selector';\n\nexport const getRegionsState: MemoizedSelector<\n  StateWithUser,\n  RegionsState\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.regions\n);\n\nexport const getAllRegions: MemoizedSelector<\n  StateWithUser,\n  Region[]\n> = createSelector(\n  getRegionsState,\n  (state: RegionsState) => state.entities\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { OrderDetailsState, UserState, StateWithUser } from '../user-state';\nimport { Order } from '../../../occ/occ-models/index';\nimport { getUserState } from './feature.selector';\n\nexport const getOrderState: MemoizedSelector<\n  StateWithUser,\n  OrderDetailsState\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.order\n);\n\nexport const getOrderDetails: MemoizedSelector<\n  StateWithUser,\n  Order\n> = createSelector(\n  getOrderState,\n  (state: OrderDetailsState) => state.order\n);\n","import { MemoizedSelector, createSelector } from '@ngrx/store';\nimport {\n  UserState,\n  BillingCountriesState,\n  StateWithUser,\n  BillingCountryEntities\n} from '../user-state';\nimport { getUserState } from './feature.selector';\nimport { Country } from '../../../occ/occ-models/occ.models';\n\nexport const getBillingCountriesState: MemoizedSelector<\n  StateWithUser,\n  BillingCountriesState\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.billingCountries\n);\n\nexport const getBillingCountriesEntites: MemoizedSelector<\n  StateWithUser,\n  BillingCountryEntities\n> = createSelector(\n  getBillingCountriesState,\n  (state: BillingCountriesState) => state.entities\n);\n\nexport const getAllBillingCountries: MemoizedSelector<\n  StateWithUser,\n  Country[]\n> = createSelector(\n  getBillingCountriesEntites,\n  entites => Object.keys(entites).map(isocode => entites[isocode])\n);\n","import { Injectable } from '@angular/core';\n\nimport { Store, select } from '@ngrx/store';\n\nimport { Observable } from 'rxjs';\nimport { tap, map } from 'rxjs/operators';\n\nimport * as fromStore from '../store/index';\nimport {\n  Order,\n  User,\n  PaymentDetails,\n  Address,\n  Title,\n  Country,\n  Region,\n  OrderHistoryList\n} from '../../occ/occ-models/index';\nimport { UserRegisterFormData } from '../model/user.model';\n\n@Injectable()\nexport class UserService {\n  constructor(private store: Store<fromStore.StateWithUser>) {}\n\n  /**\n   * Returns a user\n   */\n  get(): Observable<User> {\n    return this.store.pipe(select(fromStore.getDetails));\n  }\n\n  /**\n   * Loads the user's details\n   */\n  load(userId: string): void {\n    this.store.dispatch(new fromStore.LoadUserDetails(userId));\n  }\n\n  /**\n   * Register a new user\n   *\n   * @param submitFormData as UserRegisterFormData\n   */\n  register(userRegisterFormData: UserRegisterFormData) {\n    this.store.dispatch(new fromStore.RegisterUser(userRegisterFormData));\n  }\n\n  /**\n   * Returns an order's detail\n   */\n  getOrderDetails(): Observable<Order> {\n    return this.store.pipe(select(fromStore.getOrderDetails));\n  }\n\n  /**\n   * Retrieves order's details\n   *\n   * @param userId a user's ID\n   * @param orderCode an order code\n   */\n  loadOrderDetails(userId: string, orderCode: string): void {\n    this.store.dispatch(\n      new fromStore.LoadOrderDetails({\n        userId: userId,\n        orderCode: orderCode\n      })\n    );\n  }\n\n  /**\n   * Clears order's details\n   */\n  clearOrderDetails(): void {\n    this.store.dispatch(new fromStore.ClearOrderDetails());\n  }\n\n  /**\n   * Returns order history list\n   */\n  getOrderHistoryList(\n    userId: string,\n    pageSize: number\n  ): Observable<OrderHistoryList> {\n    return this.store.pipe(\n      select(fromStore.getOrdersState),\n      tap(orderListState => {\n        const attemptedLoad =\n          orderListState.loading ||\n          orderListState.success ||\n          orderListState.error;\n        if (!attemptedLoad && !!userId) {\n          this.loadOrderList(userId, pageSize);\n        }\n      }),\n      map(orderListState => orderListState.value)\n    );\n  }\n\n  /**\n   * Returns a loaded flag for order history list\n   */\n  getOrderHistoryListLoaded(): Observable<boolean> {\n    return this.store.pipe(select(fromStore.getOrdersLoaded));\n  }\n\n  /**\n   * Loads all user's payment methods.\n   * @param userId a user ID\n   */\n  loadPaymentMethods(userId: string): void {\n    this.store.dispatch(new fromStore.LoadUserPaymentMethods(userId));\n  }\n\n  /**\n   * Returns all user's payment methods\n   */\n  getPaymentMethods(): Observable<PaymentDetails[]> {\n    return this.store.pipe(select(fromStore.getPaymentMethods));\n  }\n\n  /**\n   * Returns a loading flag for payment methods\n   */\n  getPaymentMethodsLoading(): Observable<boolean> {\n    return this.store.pipe(select(fromStore.getPaymentMethodsLoading));\n  }\n\n  /**\n   * Sets the payment as a default one\n   * @param userId a user ID\n   * @param paymentMethodId a payment method ID\n   */\n  setPaymentMethodAsDefault(userId: string, paymentMethodId: string): void {\n    this.store.dispatch(\n      new fromStore.SetDefaultUserPaymentMethod({\n        userId: userId,\n        paymentMethodId\n      })\n    );\n  }\n\n  /**\n   * Deletes the payment method\n   *\n   * @param userId a user ID\n   * @param paymentMethodId a payment method ID\n   */\n  deletePaymentMethod(userId: string, paymentMethodId: string): void {\n    this.store.dispatch(\n      new fromStore.DeleteUserPaymentMethod({\n        userId: userId,\n        paymentMethodId\n      })\n    );\n  }\n\n  /**\n   * Retrieves an order list\n   * @param userId a user ID\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadOrderList(\n    userId: string,\n    pageSize: number,\n    currentPage?: number,\n    sort?: string\n  ): void {\n    this.store.dispatch(\n      new fromStore.LoadUserOrders({\n        userId: userId,\n        pageSize: pageSize,\n        currentPage: currentPage,\n        sort: sort\n      })\n    );\n  }\n\n  /**\n   * Retrieves user's addresses\n   * @param userId a user ID\n   */\n  loadAddresses(userId: string): void {\n    this.store.dispatch(new fromStore.LoadUserAddresses(userId));\n  }\n\n  /**\n   * Adds user address\n   * @param userId a user ID\n   * @param address a user address\n   */\n  addUserAddress(userId: string, address: Address): void {\n    this.store.dispatch(\n      new fromStore.AddUserAddress({\n        userId: userId,\n        address: address\n      })\n    );\n  }\n\n  /**\n   * Sets user address as default\n   * @param userId a user ID\n   * @param addressId a user address ID\n   */\n  setAddressAsDefault(userId: string, addressId: string): void {\n    this.store.dispatch(\n      new fromStore.UpdateUserAddress({\n        userId: userId,\n        addressId: addressId,\n        address: { defaultAddress: true }\n      })\n    );\n  }\n\n  /**\n   * Updates existing user address\n   * @param userId a user ID\n   * @param addressId a user address ID\n   * @param address a user address\n   */\n  updateUserAddress(userId: string, addressId: string, address: Address): void {\n    this.store.dispatch(\n      new fromStore.UpdateUserAddress({\n        userId: userId,\n        addressId: addressId,\n        address: address\n      })\n    );\n  }\n\n  /**\n   * Deletes existing user address\n   * @param userId a user ID\n   * @param addressId a user address ID\n   */\n  deleteUserAddress(userId: string, addressId: string): void {\n    this.store.dispatch(\n      new fromStore.DeleteUserAddress({\n        userId: userId,\n        addressId: addressId\n      })\n    );\n  }\n\n  /**\n   * Returns addresses\n   */\n  getAddresses(): Observable<Address[]> {\n    return this.store.pipe(select(fromStore.getAddresses));\n  }\n\n  /**\n   * Returns a loading flag for addresses\n   */\n  getAddressesLoading(): Observable<boolean> {\n    return this.store.pipe(select(fromStore.getAddressesLoading));\n  }\n\n  /**\n   * Returns titles\n   */\n  getTitles(): Observable<Title[]> {\n    return this.store.pipe(select(fromStore.getAllTitles));\n  }\n\n  /**\n   * Retrieves titles\n   */\n  loadTitles(): void {\n    this.store.dispatch(new fromStore.LoadTitles());\n  }\n\n  /**\n   * Retrieves delivery countries\n   */\n  loadDeliveryCountries(): void {\n    this.store.dispatch(new fromStore.LoadDeliveryCountries());\n  }\n\n  /**\n   * Returns all delivery countries\n   */\n  getDeliveryCountries(): Observable<Country[]> {\n    return this.store.pipe(select(fromStore.getAllDeliveryCountries));\n  }\n\n  /**\n   * Returns a country based on the provided `isocode`\n   * @param isocode an isocode for a country\n   */\n  getCountry(isocode: string): Observable<Country> {\n    return this.store.pipe(select(fromStore.countrySelectorFactory(isocode)));\n  }\n\n  /**\n   * Retrieves regions for specified country by `countryIsoCode`\n   * @param countryIsoCode\n   */\n  loadRegions(countryIsoCode: string): void {\n    this.store.dispatch(new fromStore.LoadRegions(countryIsoCode));\n  }\n\n  /**\n   * Returns all regions\n   */\n  getRegions(): Observable<Region[]> {\n    return this.store.pipe(select(fromStore.getAllRegions));\n  }\n\n  /**\n   * Returns all billing countries\n   */\n  getAllBillingCountries(): Observable<Country[]> {\n    return this.store.pipe(select(fromStore.getAllBillingCountries));\n  }\n\n  /**\n   * Retrieves billing countries\n   */\n  loadBillingCountries() {\n    return this.store.dispatch(new fromStore.LoadBillingCountries());\n  }\n\n  /**\n   * Cleaning order list\n   */\n  clearOrderList() {\n    this.store.dispatch(new fromStore.ClearUserOrders());\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { RouterModule } from '@angular/router';\n\nimport { metaReducers, reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { USER_FEATURE } from './user-state';\nimport { StateModule } from '../../state/state.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    StateModule,\n    StoreModule.forFeature(USER_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n    RouterModule\n  ],\n  providers: [reducerProvider]\n})\nexport class UserStoreModule {}\n","import { NgModule } from '@angular/core';\n\nimport { UserService } from './facade/index';\nimport { UserStoreModule } from './store/user-store.module';\nimport { UserOccModule } from './occ/user-occ.module';\n\n@NgModule({\n  imports: [UserOccModule, UserStoreModule],\n  providers: [UserService]\n})\nexport class UserModule {}\n","import { Injectable } from '@angular/core';\n\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport { Observable, of } from 'rxjs';\nimport { map, catchError, mergeMap, switchMap } from 'rxjs/operators';\n\nimport * as fromActions from '../actions/index';\nimport { OccCartService } from '../../../cart/index';\nimport { GlobalMessageType, AddMessage } from '../../../global-message/index';\nimport { ProductImageConverterService } from '../../../product/index';\nimport { OccOrderService } from '../../../user/index';\nimport { OrderEntry, PaymentDetails } from '../../../occ/occ-models/index';\nimport * as fromUserActions from '../../../user/store/actions/index';\n\n@Injectable()\nexport class CheckoutEffects {\n  @Effect()\n  addDeliveryAddress$: Observable<\n    | fromUserActions.LoadUserAddresses\n    | fromActions.SetDeliveryAddress\n    | fromActions.AddDeliveryAddressFail\n  > = this.actions$.pipe(\n    ofType(fromActions.ADD_DELIVERY_ADDRESS),\n    map((action: fromActions.AddDeliveryAddress) => action.payload),\n    mergeMap(payload =>\n      this.occCartService\n        .createAddressOnCart(payload.userId, payload.cartId, payload.address)\n        .pipe(\n          mergeMap(address => {\n            address['titleCode'] = payload.address.titleCode;\n            return [\n              new fromUserActions.LoadUserAddresses(payload.userId),\n              new fromActions.SetDeliveryAddress({\n                userId: payload.userId,\n                cartId: payload.cartId,\n                address: address\n              })\n            ];\n          }),\n          catchError(error => of(new fromActions.AddDeliveryAddressFail(error)))\n        )\n    )\n  );\n\n  @Effect()\n  setDeliveryAddress$: Observable<\n    fromActions.SetDeliveryAddressSuccess | fromActions.SetDeliveryAddressFail\n  > = this.actions$.pipe(\n    ofType(fromActions.SET_DELIVERY_ADDRESS),\n    map((action: any) => action.payload),\n    mergeMap(payload => {\n      return this.occCartService\n        .setDeliveryAddress(payload.userId, payload.cartId, payload.address.id)\n        .pipe(\n          map(() => new fromActions.SetDeliveryAddressSuccess(payload.address)),\n          catchError(error => of(new fromActions.SetDeliveryAddressFail(error)))\n        );\n    })\n  );\n\n  @Effect()\n  loadSupportedDeliveryModes$: Observable<\n    | fromActions.LoadSupportedDeliveryModesSuccess\n    | fromActions.LoadSupportedDeliveryModesFail\n  > = this.actions$.pipe(\n    ofType(fromActions.LOAD_SUPPORTED_DELIVERY_MODES),\n    map((action: any) => action.payload),\n    mergeMap(payload => {\n      return this.occCartService\n        .getSupportedDeliveryModes(payload.userId, payload.cartId)\n        .pipe(\n          map(data => {\n            return new fromActions.LoadSupportedDeliveryModesSuccess(data);\n          }),\n          catchError(error =>\n            of(new fromActions.LoadSupportedDeliveryModesFail(error))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  setDeliveryMode$: Observable<\n    fromActions.SetDeliveryModeSuccess | fromActions.SetDeliveryModeFail\n  > = this.actions$.pipe(\n    ofType(fromActions.SET_DELIVERY_MODE),\n    map((action: any) => action.payload),\n    mergeMap(payload => {\n      return this.occCartService\n        .setDeliveryMode(payload.userId, payload.cartId, payload.selectedModeId)\n        .pipe(\n          map(\n            () => new fromActions.SetDeliveryModeSuccess(payload.selectedModeId)\n          ),\n          catchError(error => of(new fromActions.SetDeliveryModeFail(error)))\n        );\n    })\n  );\n\n  @Effect()\n  createPaymentDetails$: Observable<\n    | fromUserActions.LoadUserPaymentMethods\n    | fromActions.CreatePaymentDetailsSuccess\n    | fromActions.CreatePaymentDetailsFail\n  > = this.actions$.pipe(\n    ofType(fromActions.CREATE_PAYMENT_DETAILS),\n    map((action: any) => action.payload),\n    mergeMap(payload => {\n      // get information for creating a subscription directly with payment provider\n      return this.occCartService\n        .getPaymentProviderSubInfo(payload.userId, payload.cartId)\n        .pipe(\n          map(data => {\n            const labelsMap = this.convertToMap(data.mappingLabels.entry);\n            return {\n              url: data.postUrl,\n              parameters: this.getParamsForPaymentProvider(\n                payload.paymentDetails,\n                data.parameters.entry,\n                labelsMap\n              ),\n              mappingLabels: labelsMap\n            };\n          }),\n          mergeMap(sub => {\n            // create a subscription directly with payment provider\n            return this.occCartService\n              .createSubWithPaymentProvider(sub.url, sub.parameters)\n              .pipe(\n                map(response => this.extractPaymentDetailsFromHtml(response)),\n                mergeMap(fromPaymentProvider => {\n                  if (!fromPaymentProvider['hasError']) {\n                    // consume response from payment provider and creates payment details\n\n                    return this.occCartService\n                      .createPaymentDetails(\n                        payload.userId,\n                        payload.cartId,\n                        this.getPaymentSopResponseParams(\n                          payload.paymentDetails,\n                          fromPaymentProvider,\n                          sub.mappingLabels\n                        )\n                      )\n                      .pipe(\n                        mergeMap(details => {\n                          return [\n                            new fromUserActions.LoadUserPaymentMethods(\n                              payload.userId\n                            ),\n                            new fromActions.CreatePaymentDetailsSuccess(details)\n                          ];\n                        }),\n                        catchError(error =>\n                          of(new fromActions.CreatePaymentDetailsFail(error))\n                        )\n                      );\n                  } else {\n                    return of(\n                      new fromActions.CreatePaymentDetailsFail(\n                        fromPaymentProvider\n                      )\n                    );\n                  }\n                })\n              );\n          })\n        );\n    })\n  );\n\n  @Effect()\n  setPaymentDetails$: Observable<\n    fromActions.SetPaymentDetailsSuccess | fromActions.SetPaymentDetailsFail\n  > = this.actions$.pipe(\n    ofType(fromActions.SET_PAYMENT_DETAILS),\n    map((action: any) => action.payload),\n    mergeMap(payload => {\n      return this.occCartService\n        .setPaymentDetails(\n          payload.userId,\n          payload.cartId,\n          payload.paymentDetails.id\n        )\n        .pipe(\n          map(\n            () =>\n              new fromActions.SetPaymentDetailsSuccess(payload.paymentDetails)\n          ),\n          catchError(error => of(new fromActions.SetPaymentDetailsFail(error)))\n        );\n    })\n  );\n\n  @Effect()\n  placeOrder$: Observable<\n    fromActions.PlaceOrderSuccess | AddMessage | fromActions.PlaceOrderFail\n  > = this.actions$.pipe(\n    ofType(fromActions.PLACE_ORDER),\n    map((action: any) => action.payload),\n    mergeMap(payload => {\n      return this.occOrderService\n        .placeOrder(payload.userId, payload.cartId)\n        .pipe(\n          map(data => {\n            for (const entry of data.entries as OrderEntry[]) {\n              this.productImageConverter.convertProduct(entry.product);\n            }\n            return data;\n          }),\n          switchMap(data => [\n            new fromActions.PlaceOrderSuccess(data),\n            new AddMessage({\n              text: 'Order placed successfully',\n              type: GlobalMessageType.MSG_TYPE_CONFIRMATION\n            })\n          ]),\n          catchError(error => of(new fromActions.PlaceOrderFail(error)))\n        );\n    })\n  );\n\n  private domparser: DOMParser;\n\n  constructor(\n    private actions$: Actions,\n    private occCartService: OccCartService,\n    private occOrderService: OccOrderService,\n    private productImageConverter: ProductImageConverterService\n  ) {\n    if (typeof DOMParser !== 'undefined') {\n      this.domparser = new DOMParser();\n    }\n  }\n\n  private getPaymentSopResponseParams(\n    paymentDetails: any,\n    fromPaymentProvider: any,\n    mappingLabels: any\n  ) {\n    const sopResponseParams = {};\n\n    sopResponseParams['decision'] =\n      fromPaymentProvider[mappingLabels['hybris_sop_decision']];\n    sopResponseParams['amount'] =\n      fromPaymentProvider[mappingLabels['hybris_sop_amount']];\n    sopResponseParams['currency'] =\n      fromPaymentProvider[mappingLabels['hybris_sop_currency']];\n\n    sopResponseParams['billTo_country'] =\n      fromPaymentProvider[mappingLabels['hybris_billTo_country']];\n    sopResponseParams['billTo_firstName'] =\n      fromPaymentProvider[mappingLabels['hybris_billTo_firstname']];\n    sopResponseParams['billTo_lastName'] =\n      fromPaymentProvider[mappingLabels['hybris_billTo_lastname']];\n    sopResponseParams['billTo_street1'] =\n      fromPaymentProvider[mappingLabels['hybris_billTo_street1']];\n    sopResponseParams['billTo_city'] =\n      fromPaymentProvider[mappingLabels['hybris_billTo_city']];\n    sopResponseParams['billTo_postalCode'] =\n      fromPaymentProvider[mappingLabels['hybris_billTo_postalcode']];\n\n    sopResponseParams['card_cardType'] = paymentDetails.cardType.code;\n    sopResponseParams['card_accountNumber'] =\n      fromPaymentProvider[mappingLabels['hybris_sop_card_number']];\n    sopResponseParams['card_expirationMonth'] = paymentDetails.expiryMonth;\n    sopResponseParams['card_expirationYear'] = paymentDetails.expiryYear;\n    sopResponseParams['card_nameOnCard'] = paymentDetails.accountHolderName;\n    sopResponseParams['defaultPayment'] = paymentDetails.defaultPayment;\n    sopResponseParams['savePaymentInfo'] = true;\n\n    sopResponseParams['reasonCode'] =\n      fromPaymentProvider[mappingLabels['hybris_sop_reason_code']];\n    sopResponseParams['paySubscriptionCreateReply_subscriptionID'] =\n      fromPaymentProvider[mappingLabels['hybris_sop_subscriptionID']];\n\n    if (mappingLabels['hybris_sop_uses_public_signature'] === 'true') {\n      sopResponseParams[\n        'paySubscriptionCreateReply_subscriptionIDPublicSignature'\n      ] = fromPaymentProvider[mappingLabels['hybris_sop_public_signature']];\n    }\n\n    return sopResponseParams;\n  }\n\n  private getParamsForPaymentProvider(\n    paymentDetails: PaymentDetails,\n    parameters: { key; value }[],\n    mappingLabels: any\n  ) {\n    const params = this.convertToMap(parameters);\n    params[mappingLabels['hybris_account_holder_name']] =\n      paymentDetails.accountHolderName;\n    params[mappingLabels['hybris_card_type']] = paymentDetails.cardType.code;\n    params[mappingLabels['hybris_card_number']] = paymentDetails.cardNumber;\n    if (mappingLabels['hybris_combined_expiry_date'] === 'true') {\n      params[mappingLabels['hybris_card_expiry_date']] =\n        paymentDetails.expiryMonth +\n        mappingLabels['hybris_separator_expiry_date'] +\n        paymentDetails.expiryYear;\n    } else {\n      params[mappingLabels['hybris_card_expiration_month']] =\n        paymentDetails.expiryMonth;\n      params[mappingLabels['hybris_card_expiration_year']] =\n        paymentDetails.expiryYear;\n    }\n    params[mappingLabels['hybris_card_cvn']] = paymentDetails.cvn;\n\n    // billing address\n    params[mappingLabels['hybris_billTo_country']] =\n      paymentDetails.billingAddress.country.isocode;\n    params[mappingLabels['hybris_billTo_firstname']] =\n      paymentDetails.billingAddress.firstName;\n    params[mappingLabels['hybris_billTo_lastname']] =\n      paymentDetails.billingAddress.lastName;\n    params[mappingLabels['hybris_billTo_street1']] =\n      paymentDetails.billingAddress.line1 +\n      ' ' +\n      paymentDetails.billingAddress.line2;\n    params[mappingLabels['hybris_billTo_city']] =\n      paymentDetails.billingAddress.town;\n    params[mappingLabels['hybris_billTo_postalcode']] =\n      paymentDetails.billingAddress.postalCode;\n    return params;\n  }\n\n  private extractPaymentDetailsFromHtml(html: string): any {\n    const domdoc = this.domparser.parseFromString(html, 'text/xml');\n    const responseForm = domdoc.getElementsByTagName('form')[0];\n    const inputs = responseForm.getElementsByTagName('input');\n\n    const values = {};\n    for (let i = 0; inputs[i]; i++) {\n      const input = inputs[i];\n      if (\n        input.getAttribute('name') !== '{}' &&\n        input.getAttribute('value') !== ''\n      ) {\n        values[input.getAttribute('name')] = input.getAttribute('value');\n      }\n    }\n\n    // rejected for some reason\n    if (values['decision'] !== 'ACCEPT') {\n      const reason = { hasError: true };\n      Object.keys(values).forEach(name => {\n        if (name === 'reasonCode' || name.startsWith('InvalidField')) {\n          reason[name] = values[name];\n        }\n      });\n      return reason;\n    }\n\n    return values;\n  }\n\n  private convertToMap(paramList: { key; value }[]) {\n    return paramList.reduce(function(result, item) {\n      const key = item.key;\n      result[key] = item.value;\n      return result;\n    }, {});\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\n\nimport * as fromAction from '../actions/card-types.action';\nimport { OccMiscsService } from '../../../occ/miscs/miscs.service';\n\n@Injectable()\nexport class CardTypesEffects {\n  @Effect()\n  loadCardTypes$: Observable<\n    fromAction.LoadCardTypesSuccess | fromAction.LoadCardTypesFail\n  > = this.actions$.pipe(\n    ofType(fromAction.LOAD_CARD_TYPES),\n    switchMap(() => {\n      return this.occMiscsService.loadCardTypes().pipe(\n        map(data => new fromAction.LoadCardTypesSuccess(data.cardTypes)),\n        catchError(error => of(new fromAction.LoadCardTypesFail(error)))\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private occMiscsService: OccMiscsService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\n\nimport * as fromAction from '../actions/address-verification.action';\nimport { OccUserService } from '../../../user/occ/user.service';\n\n@Injectable()\nexport class AddressVerificationEffect {\n  @Effect()\n  verifyAddress$: Observable<\n    fromAction.VerifyAddressSuccess | fromAction.VerifyAddressFail\n  > = this.actions$.pipe(\n    ofType(fromAction.VERIFY_ADDRESS),\n    map((action: any) => action.payload),\n    mergeMap(payload =>\n      this.occUserService.verifyAddress(payload.userId, payload.address).pipe(\n        map(data => {\n          return new fromAction.VerifyAddressSuccess(data);\n        }),\n        catchError(error => of(new fromAction.VerifyAddressFail(error)))\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private occUserService: OccUserService\n  ) {}\n}\n","import { CheckoutEffects } from './checkout.effect';\nimport { CardTypesEffects } from './card-types.effect';\nimport { AddressVerificationEffect } from './address-verification.effect';\n\nexport const effects: any[] = [\n  CheckoutEffects,\n  AddressVerificationEffect,\n  CardTypesEffects\n];\n\nexport * from './checkout.effect';\nexport * from './card-types.effect';\nexport * from './address-verification.effect';\n","import { Injectable } from '@angular/core';\n\nimport { Store, select } from '@ngrx/store';\n\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport * as fromCheckoutStore from '../store/index';\nimport { CartDataService, ANONYMOUS_USERID } from '../../cart/index';\nimport {\n  PaymentDetails,\n  CardType,\n  Order,\n  DeliveryMode,\n  AddressValidation,\n  Address\n} from '../../occ/occ-models/index';\n\n@Injectable()\nexport class CheckoutService {\n  constructor(\n    private checkoutStore: Store<fromCheckoutStore.CheckoutState>,\n    private cartData: CartDataService\n  ) {}\n\n  /**\n   * Get supported delivery modes\n   */\n  getSupportedDeliveryModes(): Observable<DeliveryMode[]> {\n    return this.checkoutStore.pipe(\n      select(fromCheckoutStore.getSupportedDeliveryModes)\n    );\n  }\n\n  /**\n   * Get selected delivery mode\n   */\n  getSelectedDeliveryMode(): Observable<DeliveryMode> {\n    return this.checkoutStore.pipe(\n      select(fromCheckoutStore.getSelectedDeliveryMode)\n    );\n  }\n\n  /**\n   * Get selected delivery mode code\n   */\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.checkoutStore.pipe(select(fromCheckoutStore.getSelectedCode));\n  }\n\n  /**\n   * Get card types\n   */\n  getCardTypes(): Observable<CardType[]> {\n    return this.checkoutStore.pipe(select(fromCheckoutStore.getAllCardTypes));\n  }\n\n  /**\n   * Get delivery address\n   */\n  getDeliveryAddress(): Observable<Address> {\n    return this.checkoutStore.pipe(\n      select(fromCheckoutStore.getDeliveryAddress)\n    );\n  }\n\n  /**\n   * Get address verification results\n   */\n  getAddressVerificationResults(): Observable<AddressValidation | string> {\n    return this.checkoutStore.pipe(\n      select(fromCheckoutStore.getAddressVerificationResults),\n      filter(results => Object.keys(results).length !== 0)\n    );\n  }\n\n  /**\n   * Get payment details\n   */\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.checkoutStore.pipe(select(fromCheckoutStore.getPaymentDetails));\n  }\n\n  /**\n   * Get order details\n   */\n  getOrderDetails(): Observable<Order> {\n    return this.checkoutStore.pipe(\n      select(fromCheckoutStore.getCheckoutOrderDetails)\n    );\n  }\n\n  /**\n   * Create and set a delivery address using the address param\n   * @param address : the Address to be created and set\n   */\n  createAndSetAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      this.checkoutStore.dispatch(\n        new fromCheckoutStore.AddDeliveryAddress({\n          userId: this.cartData.userId,\n          cartId: this.cartData.cartId,\n          address: address\n        })\n      );\n    }\n  }\n\n  /**\n   * Load supported delivery modes\n   */\n  loadSupportedDeliveryModes(): void {\n    if (this.actionAllowed()) {\n      this.checkoutStore.dispatch(\n        new fromCheckoutStore.LoadSupportedDeliveryModes({\n          userId: this.cartData.userId,\n          cartId: this.cartData.cartId\n        })\n      );\n    }\n  }\n\n  /**\n   * Set delivery mode\n   * @param mode : The delivery mode to be set\n   */\n  setDeliveryMode(mode: string): void {\n    if (this.actionAllowed()) {\n      this.checkoutStore.dispatch(\n        new fromCheckoutStore.SetDeliveryMode({\n          userId: this.cartData.userId,\n          cartId: this.cartData.cartId,\n          selectedModeId: mode\n        })\n      );\n    }\n  }\n\n  /**\n   * Load the supported card types\n   */\n  loadSupportedCardTypes(): void {\n    this.checkoutStore.dispatch(new fromCheckoutStore.LoadCardTypes());\n  }\n\n  /**\n   * Create payment details using the given paymentDetails param\n   * @param paymentDetails: the PaymentDetails to be created\n   */\n  createPaymentDetails(paymentDetails: PaymentDetails): void {\n    if (this.actionAllowed()) {\n      this.checkoutStore.dispatch(\n        new fromCheckoutStore.CreatePaymentDetails({\n          userId: this.cartData.userId,\n          cartId: this.cartData.cartId,\n          paymentDetails\n        })\n      );\n    }\n  }\n\n  /**\n   * Places an order\n   */\n  placeOrder(): void {\n    if (this.actionAllowed()) {\n      this.checkoutStore.dispatch(\n        new fromCheckoutStore.PlaceOrder({\n          userId: this.cartData.userId,\n          cartId: this.cartData.cartId\n        })\n      );\n    }\n  }\n\n  /**\n   * Verifies the address\n   * @param address : the address to be verified\n   */\n  verifyAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      this.checkoutStore.dispatch(\n        new fromCheckoutStore.VerifyAddress({\n          userId: this.cartData.userId,\n          address\n        })\n      );\n    }\n  }\n\n  /**\n   * Set delivery address\n   * @param address : The address to be set\n   */\n  setDeliveryAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      this.checkoutStore.dispatch(\n        new fromCheckoutStore.SetDeliveryAddress({\n          userId: this.cartData.userId,\n          cartId: this.cartData.cart.code,\n          address: address\n        })\n      );\n    }\n  }\n\n  /**\n   * Set payment details\n   * @param paymentDetails : the PaymentDetails to be set\n   */\n  setPaymentDetails(paymentDetails: PaymentDetails): void {\n    if (this.actionAllowed()) {\n      this.checkoutStore.dispatch(\n        new fromCheckoutStore.SetPaymentDetails({\n          userId: this.cartData.userId,\n          cartId: this.cartData.cart.code,\n          paymentDetails: paymentDetails\n        })\n      );\n    }\n  }\n\n  /**\n   * Clear address verification results\n   */\n  clearAddressVerificationResults(): void {\n    this.checkoutStore.dispatch(\n      new fromCheckoutStore.ClearAddressVerificationResults()\n    );\n  }\n\n  /**\n   * Clear checkout data\n   */\n  clearCheckoutData(): void {\n    this.checkoutStore.dispatch(new fromCheckoutStore.ClearCheckoutData());\n  }\n\n  /**\n   * Clear checkout step\n   * @param stepNumber : the step number to be cleared\n   */\n  clearCheckoutStep(stepNumber: number): void {\n    this.checkoutStore.dispatch(\n      new fromCheckoutStore.ClearCheckoutStep(stepNumber)\n    );\n  }\n\n  private actionAllowed(): boolean {\n    return this.cartData.userId !== ANONYMOUS_USERID;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { metaReducers, reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { CHECKOUT_FEATURE } from './checkout-state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(CHECKOUT_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects)\n  ],\n  providers: [reducerProvider]\n})\nexport class CheckoutStoreModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { PageType } from '../../occ/occ-models/occ.models';\nimport { CartService } from '../../cart/facade/cart.service';\nimport { PageTitleResolver } from '../../cms/page/page-title.resolver';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CheckoutPageTitleResolver extends PageTitleResolver {\n  constructor(\n    protected routingService: RoutingService,\n    protected cartService: CartService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'MultiStepCheckoutSummaryPageTemplate';\n  }\n\n  resolve(): Observable<string> {\n    return this.cartService\n      .getActive()\n      .pipe(map(cart => `Checkout ${cart.totalItems} items`));\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { CheckoutService } from './facade/index';\nimport { CheckoutStoreModule } from './store/checkout-store.module';\nimport { PageTitleResolver } from '../cms/index';\nimport { CheckoutPageTitleResolver } from './services/checkout-page-title.resolver';\n\n@NgModule({\n  imports: [CheckoutStoreModule],\n  providers: [\n    CheckoutService,\n    {\n      provide: PageTitleResolver,\n      useExisting: CheckoutPageTitleResolver,\n      multi: true\n    }\n  ]\n})\nexport class CheckoutModule {}\n","import { Injectable } from '@angular/core';\nimport { combineLatest } from 'rxjs';\nimport { takeWhile } from 'rxjs/operators';\n\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SmartEditService {\n  private _cmsTicketId: string;\n\n  constructor(\n    private cmsService: CmsService,\n    private routingService: RoutingService,\n    winRef: WindowRef\n  ) {\n    this.getCmsTicket();\n    this.addPageContract();\n\n    if (winRef.nativeWindow) {\n      const window = winRef.nativeWindow as any;\n      // rerender components and slots after editing\n      window.smartedit = window.smartedit || {};\n      window.smartedit.renderComponent = (\n        componentId,\n        componentType,\n        parentId\n      ) => {\n        return this.renderComponent(componentId, componentType, parentId);\n      };\n\n      // reprocess page\n      window.smartedit.reprocessPage = this.reprocessPage;\n    }\n  }\n\n  get cmsTicketId(): string {\n    return this._cmsTicketId;\n  }\n\n  protected getCmsTicket() {\n    combineLatest(\n      this.cmsService.getCurrentPage(),\n      this.routingService.getRouterState()\n    )\n      .pipe(takeWhile(([cmsPage]) => cmsPage === undefined))\n      .subscribe(([, routerState]) => {\n        if (routerState.state && !this._cmsTicketId) {\n          this._cmsTicketId = routerState.state.queryParams['cmsTicketId'];\n          if (this._cmsTicketId) {\n            this.cmsService.launchInSmartEdit = true;\n          }\n        }\n      });\n  }\n\n  protected addPageContract() {\n    this.cmsService.getCurrentPage().subscribe(cmsPage => {\n      if (cmsPage && this._cmsTicketId) {\n        const previousContract = [];\n        Array.from(document.body.classList).forEach(attr =>\n          previousContract.push(attr)\n        );\n        previousContract.forEach(attr => document.body.classList.remove(attr));\n\n        document.body.classList.add(`smartedit-page-uid-${cmsPage.pageId}`);\n        document.body.classList.add(`smartedit-page-uuid-${cmsPage.uuid}`);\n        document.body.classList.add(\n          `smartedit-catalog-version-uuid-${cmsPage.catalogUuid}`\n        );\n      }\n    });\n  }\n\n  protected renderComponent(\n    componentId: string,\n    componentType?: string,\n    parentId?: string\n  ): boolean {\n    if (componentId) {\n      // without parentId, it is slot\n      if (!parentId) {\n        this.cmsService.refreshLatestPage();\n      } else if (componentType) {\n        this.cmsService.refreshComponent(componentId);\n      }\n    }\n\n    return true;\n  }\n\n  protected reprocessPage() {\n    // TODO: reprocess page API\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { SmartEditService } from '../services/smart-edit.service';\n\n@Injectable()\nexport class CmsTicketInterceptor implements HttpInterceptor {\n  constructor(private service: SmartEditService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.indexOf('/cms/') > -1 && this.service.cmsTicketId) {\n      request = request.clone({\n        setParams: {\n          cmsTicketId: this.service.cmsTicketId\n        }\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { CmsTicketInterceptor } from './cms-ticket.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: CmsTicketInterceptor,\n    multi: true\n  }\n];\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({})\nexport class SmartEditModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: SmartEditModule,\n      providers: [...interceptors]\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { throwError, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { StoreFinderSearchConfig, LongitudeLatitude } from './../model/index';\n\nimport { OccConfig } from '../../occ/config/occ-config';\nimport { StoreFinderSearchPage } from '../../occ/occ-models';\n\nconst STORES_ENDPOINT = 'stores';\n\n@Injectable()\nexport class OccStoreFinderService {\n  constructor(private http: HttpClient, private occModuleConfig: OccConfig) {}\n\n  findStores(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: LongitudeLatitude\n  ): Observable<any> {\n    return this.callOccFindStores(query, searchConfig, longitudeLatitude);\n  }\n\n  storesCount(): Observable<any> {\n    const storeCountUrl = this.getStoresEndpoint('storescounts');\n\n    return this.http\n      .get(storeCountUrl)\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n\n  findStoreById(storeId: string): Observable<any> {\n    const storeDetailsUrl = this.getStoresEndpoint(storeId);\n    const params = { fields: 'FULL' };\n\n    return this.http\n      .get(storeDetailsUrl, { params })\n      .pipe(catchError((error: any) => throwError(error.json())));\n  }\n\n  protected callOccFindStores(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: LongitudeLatitude\n  ): Observable<StoreFinderSearchPage> {\n    const url = this.getStoresEndpoint();\n    let params: HttpParams = new HttpParams({\n      fromString:\n        'fields=stores(name,displayName,openingHours(weekDayOpeningList(FULL),specialDayOpeningList(FULL)),' +\n        'geoPoint(latitude,longitude),address(line1,line2,town,region(FULL),postalCode,phone,country,email), features),' +\n        'pagination(DEFAULT),' +\n        'sorts(DEFAULT)'\n    });\n\n    if (longitudeLatitude) {\n      params = params.set('longitude', String(longitudeLatitude.longitude));\n      params = params.set('latitude', String(longitudeLatitude.latitude));\n    } else {\n      params = params.set('query', query);\n    }\n    if (searchConfig.pageSize) {\n      params = params.set('pageSize', String(searchConfig.pageSize));\n    }\n    if (searchConfig.currentPage) {\n      params = params.set('currentPage', String(searchConfig.currentPage));\n    }\n    if (searchConfig.sort) {\n      params = params.set('sort', searchConfig.sort);\n    }\n\n    return this.http.get<StoreFinderSearchPage>(url, { params }).pipe(\n      catchError((error: any) => {\n        if (error.json) {\n          return throwError(error.json());\n        }\n        return throwError(error);\n      })\n    );\n  }\n\n  protected getStoresEndpoint(url?: string) {\n    const baseUrl =\n      this.occModuleConfig.server.baseUrl +\n      this.occModuleConfig.server.occPrefix +\n      this.occModuleConfig.site.baseSite +\n      '/' +\n      STORES_ENDPOINT;\n\n    return url ? baseUrl + '/' + url : baseUrl;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { OccModule } from '../../occ/occ.module';\nimport { OccStoreFinderService } from './store-finder.service';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, OccModule],\n  providers: [OccStoreFinderService]\n})\nexport class StoreFinderOccModule {}\n","export abstract class StoreFinderConfig {\n  googleMaps?: {\n    apiUrl: string;\n    apiKey: string;\n    scale: number;\n    selectedMarkerScale: number;\n  };\n}\n","import { LoaderState } from '../../state';\nimport { StoreEntities } from '../model';\n\nexport const STORE_FINDER_FEATURE = 'stores';\nexport const STORE_FINDER_DATA = '[StoreFinder] Store Finder Data';\n\nexport interface StateWithStoreFinder {\n  [STORE_FINDER_FEATURE]: StoresState;\n}\n\nexport interface StoresState {\n  findStores: LoaderState<FindStoresState>;\n  viewAllStores: LoaderState<ViewAllStoresState>;\n}\n\nexport interface FindStoresState {\n  findStoresEntities: StoreEntities;\n}\n\nexport interface ViewAllStoresState {\n  viewAllStoresEntities: StoreEntities;\n}\n","import { StoreFinderSearchConfig } from '../../model/search-config';\nimport { LongitudeLatitude } from '../../model/longitude-latitude';\nimport {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction\n} from '../../../state/utils/loader/loader.action';\nimport { STORE_FINDER_DATA } from '../store-finder-state';\n\nexport const ON_HOLD = '[StoreFinder] On Hold';\nexport const FIND_STORES = '[StoreFinder] Find Stores';\nexport const FIND_STORES_FAIL = '[StoreFinder] Find Stores Fail';\nexport const FIND_STORES_SUCCESS = '[StoreFinder] Find Stores Success';\n\nexport const FIND_STORE_BY_ID = '[StoreFinder] Find a Store by Id';\nexport const FIND_STORE_BY_ID_FAIL = '[StoreFinder] Find a Store by Id Fail';\nexport const FIND_STORE_BY_ID_SUCCESS =\n  '[StoreFinder] Find a Store by Id Success';\n\nexport class OnHold extends LoaderLoadAction {\n  readonly type = ON_HOLD;\n  constructor() {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStores extends LoaderLoadAction {\n  readonly type = FIND_STORES;\n  constructor(\n    public payload: {\n      queryText: string;\n      longitudeLatitude?: LongitudeLatitude;\n      useMyLocation?: boolean;\n      searchConfig?: StoreFinderSearchConfig;\n      countryIsoCode?: string;\n    }\n  ) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoresFail extends LoaderFailAction {\n  readonly type = FIND_STORES_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class FindStoresSuccess extends LoaderSuccessAction {\n  readonly type = FIND_STORES_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoreById extends LoaderLoadAction {\n  readonly type = FIND_STORE_BY_ID;\n  constructor(public payload: { storeId: string }) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoreByIdFail extends LoaderFailAction {\n  readonly type = FIND_STORE_BY_ID_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class FindStoreByIdSuccess extends LoaderSuccessAction {\n  readonly type = FIND_STORE_BY_ID_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport type FindStoresAction =\n  | OnHold\n  | FindStores\n  | FindStoresFail\n  | FindStoresSuccess\n  | FindStoreById\n  | FindStoreByIdFail\n  | FindStoreByIdSuccess;\n","import {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction\n} from '../../../state/utils/loader/loader.action';\nimport { STORE_FINDER_DATA } from '../store-finder-state';\n\nexport const VIEW_ALL_STORES = '[StoreFinder] View All Stores';\nexport const VIEW_ALL_STORES_FAIL = '[StoreFinder] View All Stores Fail';\nexport const VIEW_ALL_STORES_SUCCESS = '[StoreFinder] View All Stores Success';\n\nexport class ViewAllStores extends LoaderLoadAction {\n  readonly type = VIEW_ALL_STORES;\n  constructor() {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class ViewAllStoresFail extends LoaderFailAction {\n  readonly type = VIEW_ALL_STORES_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class ViewAllStoresSuccess extends LoaderSuccessAction {\n  readonly type = VIEW_ALL_STORES_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport type ViewAllStoresAction =\n  | ViewAllStores\n  | ViewAllStoresFail\n  | ViewAllStoresSuccess;\n","import { MemoizedSelector, createFeatureSelector } from '@ngrx/store';\nimport {\n  StoresState,\n  STORE_FINDER_FEATURE,\n  StateWithStoreFinder\n} from '../store-finder-state';\n\nexport const getStoreFinderState: MemoizedSelector<\n  StateWithStoreFinder,\n  StoresState\n> = createFeatureSelector<StoresState>(STORE_FINDER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  FindStoresState,\n  StoresState,\n  StateWithStoreFinder\n} from '../store-finder-state';\nimport { getStoreFinderState } from './feature.selector';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderLoadingSelector,\n  loaderValueSelector\n} from '../../../state/utils/loader/loader.selectors';\n\nexport const getFindStoresState: MemoizedSelector<\n  StateWithStoreFinder,\n  LoaderState<FindStoresState>\n> = createSelector(\n  getStoreFinderState,\n  (storesState: StoresState) => storesState.findStores\n);\n\nexport const getFindStoresEntities: MemoizedSelector<\n  StateWithStoreFinder,\n  FindStoresState\n> = createSelector(\n  getFindStoresState,\n  state => loaderValueSelector(state)\n);\n\nexport const getStoresLoading: MemoizedSelector<\n  StateWithStoreFinder,\n  boolean\n> = createSelector(\n  getFindStoresState,\n  state => loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  StoresState,\n  StateWithStoreFinder,\n  ViewAllStoresState\n} from '../store-finder-state';\nimport { getStoreFinderState } from './feature.selector';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderLoadingSelector,\n  loaderValueSelector\n} from '../../../state/utils/loader/loader.selectors';\n\nexport const getViewAllStoresState: MemoizedSelector<\n  StateWithStoreFinder,\n  LoaderState<ViewAllStoresState>\n> = createSelector(\n  getStoreFinderState,\n  (storesState: StoresState) => storesState.viewAllStores\n);\n\nexport const getViewAllStoresEntities: MemoizedSelector<\n  StateWithStoreFinder,\n  ViewAllStoresState\n> = createSelector(\n  getViewAllStoresState,\n  state => loaderValueSelector(state)\n);\n\nexport const getViewAllStoresLoading: MemoizedSelector<\n  StateWithStoreFinder,\n  boolean\n> = createSelector(\n  getViewAllStoresState,\n  state => loaderLoadingSelector(state)\n);\n","import { Inject, Injectable } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n@Injectable()\nexport class ExternalJsFileLoader {\n  constructor(@Inject(DOCUMENT) private document: any) {}\n\n  /**\n   * Loads a javascript from an external URL\n   * @param src URL for the script to be loaded\n   * @param params additional parameters to be attached to the given URL\n   * @param callback a function to be invoked after the script has been loaded\n   */\n  public load(src: string, params?: Object, callback?: EventListener): void {\n    const script = this.document.createElement('script');\n    script.type = 'text/javascript';\n    if (params) {\n      script.src = src + this.parseParams(params);\n    } else {\n      script.src = src;\n    }\n\n    script.async = true;\n    script.defer = true;\n    if (callback) {\n      script.addEventListener('load', callback);\n    }\n\n    document.head.appendChild(script);\n  }\n\n  /**\n   * Parses the given object with parameters to a string \"param1=value1&param2=value2\"\n   * @param params object containing parameters\n   */\n  private parseParams(params: Object): string {\n    let result = '';\n    const keysArray = Object.keys(params);\n    if (keysArray.length > 0) {\n      result =\n        '?' +\n        keysArray\n          .map(key => encodeURI(key) + '=' + encodeURI(params[key]))\n          .join('&');\n    }\n    return result;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Location } from '../model';\n\n@Injectable()\nexport class StoreDataService {\n  readonly DECIMAL_BASE: 10;\n  readonly weekDays = {\n    0: 'Sun',\n    1: 'Mon',\n    2: 'Tue',\n    3: 'Wed',\n    4: 'Thu',\n    5: 'Fri',\n    6: 'Sat'\n  };\n\n  /**\n   * Returns store latitude\n   * @param location store location\n   */\n  getStoreLatitude(location: Location): number {\n    return location.geoPoint.latitude;\n  }\n\n  /**\n   * Returns store longitude\n   * @param location store location\n   */\n  getStoreLongitude(location: Location): number {\n    return location.geoPoint.longitude;\n  }\n\n  /**\n   * Returns store closing time\n   * @param location store location\n   * @param date date to compare\n   */\n  getStoreClosingTime(location: Location, date: Date): Date {\n    const requestedDaySchedule = this.getSchedule(location, date);\n    let result: Date = null;\n\n    if (requestedDaySchedule.closed === false) {\n      const closingHour = requestedDaySchedule.closingTime.formattedHour.split(\n        ':'\n      )[0];\n      const closingMinute = requestedDaySchedule.closingTime.minute;\n      result = new Date(date.valueOf());\n      result.setHours(closingHour);\n      result.setMinutes(closingMinute);\n    }\n\n    return result;\n  }\n\n  /**\n   * Returns store opening time\n   * @param location store location\n   * @param date date to compare\n   */\n  getStoreOpeningTime(location: Location, date: Date): Date {\n    const requestedDaySchedule = this.getSchedule(location, date);\n    let result: Date = null;\n\n    if (requestedDaySchedule.closed === false) {\n      const openingHour = requestedDaySchedule.openingTime.formattedHour.split(\n        ':'\n      )[0];\n      const openingMinutes = requestedDaySchedule.openingTime.minute;\n      result = new Date(date.valueOf());\n      result.setHours(openingHour);\n      result.setMinutes(openingMinutes);\n    }\n\n    return result;\n  }\n\n  /**\n   * Returns information about store open status\n   * @param location store location\n   * @param date date to compare\n   */\n  isStoreOpen(location: Location, date: Date): boolean {\n    const requestedDaySchedule = this.getSchedule(location, date);\n    let result = false;\n\n    if (requestedDaySchedule.closed === false) {\n      const openingDate = this.getStoreOpeningTime(location, date);\n      const closingDate = this.getStoreClosingTime(location, date);\n\n      result = date > openingDate && date < closingDate;\n    }\n\n    return result;\n  }\n\n  /**\n   * Extracts schedule from the given location for the given date\n   * @param location location\n   * @param date date\n   *\n   * @returns payload describing the store's schedule for the given day.\n   */\n  private getSchedule(location: Location, date: Date): any {\n    const weekday = this.weekDays[date.getDay()];\n    return location.openingHours.weekDayOpeningList.find(\n      weekDayOpeningListItem => weekDayOpeningListItem.weekDay === weekday\n    );\n  }\n}\n","/// <reference types=\"@types/googlemaps\" />\nimport { ExternalJsFileLoader } from './external-js-file-loader.service';\nimport { Injectable } from '@angular/core';\nimport { StoreDataService } from '../facade/store-data.service';\nimport { StoreFinderConfig } from '../config/store-finder-config';\n\n@Injectable()\nexport class GoogleMapRendererService {\n  private googleMap: google.maps.Map = null;\n  private markers: google.maps.Marker[];\n\n  constructor(\n    private config: StoreFinderConfig,\n    private externalJsFileLoader: ExternalJsFileLoader,\n    private storeDataService: StoreDataService\n  ) {}\n\n  /**\n   * Renders google map on the given element and draws markers on it.\n   * If map already exists it will use an existing map otherwise it will create one\n   * @param mapElement HTML element inside of which the map will be displayed\n   * @param locations array containign geo data to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  renderMap(\n    mapElement: HTMLElement,\n    locations: any[],\n    selectMarkerHandler?: Function\n  ): void {\n    if (this.googleMap === null) {\n      this.externalJsFileLoader.load(\n        this.config.googleMaps.apiUrl,\n        { key: this.config.googleMaps.apiKey },\n        () => {\n          this.drawMap(mapElement, locations, selectMarkerHandler);\n        }\n      );\n    } else {\n      this.drawMap(mapElement, locations, selectMarkerHandler);\n    }\n  }\n\n  /**\n   * Centers the map to the given point\n   * @param latitute latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitute: number, longitude: number): void {\n    this.googleMap.panTo({ lat: latitute, lng: longitude });\n    this.googleMap.setZoom(this.config.googleMaps.selectedMarkerScale);\n  }\n\n  /**\n   * Defines and returns {@link google.maps.LatLng} representing a point where the map will be centered\n   * @param locations list of locations\n   */\n  private defineMapCenter(locations: any[]): google.maps.LatLng {\n    return new google.maps.LatLng(\n      this.storeDataService.getStoreLatitude(locations[0]),\n      this.storeDataService.getStoreLongitude(locations[0])\n    );\n  }\n\n  /**\n   * Creates google map inside if the given HTML element centered to the given point\n   * @param mapElement {@link HTMLElement} inside of which the map will be created\n   * @param mapCenter {@link google.maps.LatLng} the point where the map will be centered\n   */\n  private initMap(\n    mapElement: HTMLElement,\n    mapCenter: google.maps.LatLng\n  ): void {\n    const mapProp = {\n      center: mapCenter,\n      zoom: this.config.googleMaps.scale,\n      mapTypeId: google.maps.MapTypeId.ROADMAP\n    };\n    this.googleMap = new google.maps.Map(mapElement, mapProp);\n  }\n\n  /**\n   * Erases the current map's markers and create a new one based on the given locations\n   * @param locations array of locations to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  private createMarkers(\n    locations: any[],\n    selectMarkerHandler?: Function\n  ): void {\n    this.markers = [];\n    locations.forEach((element, index) => {\n      const marker = new google.maps.Marker({\n        position: new google.maps.LatLng(\n          this.storeDataService.getStoreLatitude(element),\n          this.storeDataService.getStoreLongitude(element)\n        ),\n        label: index + 1 + ''\n      });\n      this.markers.push(marker);\n      marker.setMap(this.googleMap);\n      marker.addListener('mouseover', function() {\n        marker.setAnimation(google.maps.Animation.BOUNCE);\n      });\n      marker.addListener('mouseout', function() {\n        marker.setAnimation(null);\n      });\n      if (selectMarkerHandler) {\n        marker.addListener('click', function() {\n          selectMarkerHandler(index);\n        });\n      }\n    });\n  }\n\n  /**\n   * Initialize and draw the map\n   * @param mapElement {@link HTMLElement} inside of which the map will be drawn\n   * @param locations array of locations to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  private drawMap(\n    mapElement: HTMLElement,\n    locations: any[],\n    selectMarkerHandler: Function\n  ) {\n    this.initMap(mapElement, this.defineMapCenter(locations));\n    this.createMarkers(locations, selectMarkerHandler);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\n\nimport * as fromAction from './../actions/find-stores.action';\n\nimport { OccStoreFinderService } from '../../occ/store-finder.service';\n\n@Injectable()\nexport class FindStoresEffect {\n  constructor(\n    private actions$: Actions,\n    private occStoreFinderService: OccStoreFinderService\n  ) {}\n\n  @Effect()\n  findStores$: Observable<any> = this.actions$.pipe(\n    ofType(fromAction.FIND_STORES),\n    map((action: fromAction.FindStores) => action.payload),\n    mergeMap(payload =>\n      this.occStoreFinderService\n        .findStores(\n          payload.queryText,\n          payload.searchConfig,\n          payload.longitudeLatitude\n        )\n        .pipe(\n          map(data => {\n            data.geolocation = payload.longitudeLatitude;\n\n            if (payload.countryIsoCode) {\n              data.stores = data.stores.filter(\n                store =>\n                  store.address.country.isocode === payload.countryIsoCode\n              );\n            }\n\n            return new fromAction.FindStoresSuccess(data);\n          }),\n          catchError(error => of(new fromAction.FindStoresFail(error)))\n        )\n    )\n  );\n\n  @Effect()\n  findStoreById$: Observable<any> = this.actions$.pipe(\n    ofType(fromAction.FIND_STORE_BY_ID),\n    map((action: fromAction.FindStoreById) => action.payload),\n    switchMap(payload =>\n      this.occStoreFinderService.findStoreById(payload.storeId).pipe(\n        map(data => new fromAction.FindStoreByIdSuccess(data)),\n        catchError(error => of(new fromAction.FindStoreByIdFail(error)))\n      )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\n\nimport { OccStoreFinderService } from '../../occ/store-finder.service';\n\nimport * as fromAction from './../actions/view-all-stores.action';\n\n@Injectable()\nexport class ViewAllStoresEffect {\n  constructor(\n    private actions$: Actions,\n    private occStoreFinderService: OccStoreFinderService\n  ) {}\n\n  @Effect()\n  viewAllStores$: Observable<any> = this.actions$.pipe(\n    ofType(fromAction.VIEW_ALL_STORES),\n    switchMap(() => {\n      return this.occStoreFinderService.storesCount().pipe(\n        map(data => new fromAction.ViewAllStoresSuccess(data)),\n        catchError(error => of(new fromAction.ViewAllStoresFail(error)))\n      );\n    })\n  );\n}\n","import { FindStoresEffect } from './find-stores.effect';\nimport { ViewAllStoresEffect } from './view-all-stores.effect';\n\nexport const effects: any[] = [FindStoresEffect, ViewAllStoresEffect];\n\nexport * from './find-stores.effect';\nexport * from './view-all-stores.effect';\n","import { ActionReducerMap, MetaReducer } from '@ngrx/store';\n\nimport { InjectionToken, Provider } from '@angular/core';\nimport { StoresState, STORE_FINDER_DATA } from '../store-finder-state';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\n\nexport function getReducers(): ActionReducerMap<StoresState> {\n  return {\n    findStores: loaderReducer(STORE_FINDER_DATA),\n    viewAllStores: loaderReducer(STORE_FINDER_DATA)\n  };\n}\n\nexport const reducerToken: InjectionToken<\n  ActionReducerMap<StoresState>\n> = new InjectionToken<ActionReducerMap<StoresState>>('StoreFinderReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers\n};\n\nexport const metaReducers: MetaReducer<any>[] = [];\n","import { Injectable } from '@angular/core';\nimport { Store, Action, select } from '@ngrx/store';\nimport {\n  StateWithStoreFinder,\n  FindStoresState,\n  ViewAllStoresState\n} from '../store/store-finder-state';\n\nimport * as fromStore from '../store/index';\nimport { StoreFinderSearchConfig } from './../model/search-config';\nimport { LongitudeLatitude } from './../model/longitude-latitude';\nimport { Observable } from 'rxjs';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable()\nexport class StoreFinderService {\n  private geolocationWatchId: number = null;\n\n  constructor(\n    private store: Store<StateWithStoreFinder>,\n    private winRef: WindowRef\n  ) {}\n\n  /**\n   * Returns boolean observable for store's loading state\n   */\n  getStoresLoading(): Observable<boolean> {\n    return this.store.pipe(select(fromStore.getStoresLoading));\n  }\n\n  /**\n   * Returns observable for store's entities\n   */\n  getFindStoresEntities(): Observable<FindStoresState> {\n    return this.store.pipe(select(fromStore.getFindStoresEntities));\n  }\n\n  /**\n   * Returns boolean observable for view all store's loading state\n   */\n  getViewAllStoresLoading(): Observable<boolean> {\n    return this.store.pipe(select(fromStore.getViewAllStoresLoading));\n  }\n\n  /**\n   * Returns observable for view all store's entities\n   */\n  getViewAllStoresEntities(): Observable<ViewAllStoresState> {\n    return this.store.pipe(select(fromStore.getViewAllStoresEntities));\n  }\n\n  /**\n   * Store finding action functionality\n   * @param queryText text query\n   * @param longitudeLatitude longitude and latitude coordinates\n   * @param searchConfig search configuration\n   * @param countryIsoCode country ISO code\n   */\n  findStoresAction(\n    queryText: string,\n    longitudeLatitude: LongitudeLatitude,\n    searchConfig: StoreFinderSearchConfig,\n    countryIsoCode?: string\n  ) {\n    this.store.dispatch(\n      new fromStore.FindStores({\n        queryText: queryText,\n        longitudeLatitude: longitudeLatitude,\n        searchConfig: searchConfig,\n        countryIsoCode: countryIsoCode\n      })\n    );\n  }\n\n  /**\n   * View all stores\n   */\n  viewAllStores() {\n    this.clearWatchGeolocation(new fromStore.ViewAllStores());\n  }\n\n  /**\n   * View all stores by id\n   * @param storeId store id\n   */\n  viewStoreById(storeId: string) {\n    this.clearWatchGeolocation(new fromStore.FindStoreById({ storeId }));\n  }\n\n  /**\n   * Find all stores\n   * @param queryText text query\n   * @param useMyLocation use current location\n   */\n  findStores(queryText: string, useMyLocation?: boolean) {\n    if (useMyLocation && this.winRef.nativeWindow) {\n      this.clearWatchGeolocation(new fromStore.OnHold());\n      this.geolocationWatchId = this.winRef.nativeWindow.navigator.geolocation.watchPosition(\n        (pos: Position) => {\n          const longitudeLatitude: LongitudeLatitude = {\n            longitude: pos.coords.longitude,\n            latitude: pos.coords.latitude\n          };\n          this.clearWatchGeolocation(\n            new fromStore.FindStores({ queryText, longitudeLatitude })\n          );\n        }\n      );\n    } else {\n      this.clearWatchGeolocation(new fromStore.FindStores({ queryText }));\n    }\n  }\n\n  private clearWatchGeolocation(callbackAction: Action) {\n    if (this.geolocationWatchId !== null) {\n      this.winRef.nativeWindow.navigator.geolocation.clearWatch(\n        this.geolocationWatchId\n      );\n      this.geolocationWatchId = null;\n    }\n    this.store.dispatch(callbackAction);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { STORE_FINDER_FEATURE } from './store-finder-state';\n\nimport { StoreFinderOccModule } from '../occ/store-finder-occ.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreFinderOccModule,\n    StoreModule.forFeature(STORE_FINDER_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects)\n  ],\n  providers: [reducerProvider]\n})\nexport class StoreFinderStoreModule {}\n","import { StoreFinderConfig } from './store-finder-config';\n\nexport const defaultStoreFinderConfig: StoreFinderConfig = {\n  googleMaps: {\n    apiUrl: 'https://maps.googleapis.com/maps/api/js',\n    apiKey: '',\n    scale: 12,\n    selectedMarkerScale: 16\n  }\n};\n","import { NgModule } from '@angular/core';\nimport { StoreFinderStoreModule } from './store/store-finder-store.module';\nimport { StoreFinderService } from './facade/store-finder.service';\nimport { StoreDataService } from './facade/store-data.service';\nimport {\n  GoogleMapRendererService,\n  ExternalJsFileLoader\n} from './service/index';\nimport { StoreFinderOccModule } from './occ/store-finder-occ.module';\nimport { ConfigModule } from '../config';\nimport { defaultStoreFinderConfig } from './config/default-store-finder-config';\nimport { StoreFinderConfig } from './config/store-finder-config';\n\n@NgModule({\n  imports: [\n    ConfigModule.withConfig(defaultStoreFinderConfig),\n    StoreFinderStoreModule,\n    StoreFinderOccModule\n  ],\n  providers: [\n    StoreFinderService,\n    StoreDataService,\n    GoogleMapRendererService,\n    ExternalJsFileLoader,\n    { provide: StoreFinderConfig, useValue: defaultStoreFinderConfig }\n  ]\n})\nexport class StoreFinderCoreModule {}\n","import { NgModule } from '@angular/core';\n\n@NgModule({})\nexport class CxApiModule {}\n","import { Injectable, Optional } from '@angular/core';\n\nimport { AuthService } from '../auth/index';\nimport { CmsService } from '../cms/index';\nimport { RoutingService } from '../routing/index';\nimport { LanguageService, CurrencyService } from '../site-context/index';\nimport {\n  ProductService,\n  ProductSearchService,\n  ProductReviewService\n} from '../product/index';\nimport { UserService } from '../user/index';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CxApiService {\n  constructor(\n    @Optional() public auth: AuthService,\n    @Optional() public cms: CmsService,\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    // user\n    @Optional() public user: UserService\n  ) {}\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { Product } from '../../../occ/occ-models/occ.models';\n\n@Pipe({ name: 'stripHtml' })\nexport class StripHtmlPipe implements PipeTransform {\n  transform(product: Product): Product {\n    const productClone = Object.assign({}, product);\n    productClone.name = product.name.replace(/<[^>]*>/g, '');\n\n    return productClone;\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { StripHtmlPipe } from './strip-html.pipe';\n\n@NgModule({\n  declarations: [StripHtmlPipe],\n  exports: [StripHtmlPipe]\n})\nexport class StripHtmlModule {}\n","import { NgModule } from '@angular/core';\n\nimport { StripHtmlModule } from './strip-html/strip-html.module';\n\n@NgModule({\n  imports: [StripHtmlModule]\n})\nexport class PipeModule {}\n","import { NgModule } from '@angular/core';\n\nimport { PipeModule } from './pipe/pipe.module';\n\n@NgModule({\n  imports: [PipeModule]\n})\nexport class UtilModule {}\n","import { EntityState } from './entity-state';\n\nexport function entitySelector<T>(state: EntityState<T>, id: string): T {\n  return state.entities[id] || undefined;\n}\n","import { filter } from 'rxjs/operators';\n\nimport { EntityLoadAction } from '../entity-loader/entity-loader.action';\nimport { MonoTypeOperatorFunction } from 'rxjs';\n\nexport function ofLoaderLoad(\n  entityType: string\n): MonoTypeOperatorFunction<EntityLoadAction> {\n  return filter(\n    (action: EntityLoadAction) =>\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType &&\n      action.meta.loader.load\n  );\n}\n\nexport function ofLoaderFail(\n  entityType: string\n): MonoTypeOperatorFunction<EntityLoadAction> {\n  return filter(\n    (action: EntityLoadAction) =>\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType &&\n      action.meta.loader.error\n  );\n}\n\nexport function ofLoaderSuccess(\n  entityType: string\n): MonoTypeOperatorFunction<EntityLoadAction> {\n  return filter(\n    (action: EntityLoadAction) =>\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType &&\n      !action.meta.loader.load &&\n      !action.meta.loader.error\n  );\n}\n","import { CmsConfig } from './cms-config';\n\nexport const defaultCmsModuleConfig: CmsConfig = {\n  defaultPageIdForType: {\n    ProductPage: ['productDetails'],\n    CategoryPage: ['productList', 'productGrid', 'category']\n  },\n  cmsComponents: {\n    CMSTabParagraphComponent: { selector: 'cx-paragraph' }\n  }\n};\n"]}