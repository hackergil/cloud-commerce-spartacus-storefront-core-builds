/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import * as fromAction from './../actions';
/** @type {?} */
export var initialState = {
    content: {},
    entries: {},
    refresh: false,
    cartMergeComplete: false
};
/**
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
export function reducer(state, action) {
    if (state === void 0) { state = initialState; }
    switch (action.type) {
        case fromAction.MERGE_CART: {
            return tslib_1.__assign({}, state, { cartMergeComplete: false });
        }
        case fromAction.MERGE_CART_SUCCESS: {
            return tslib_1.__assign({}, state, { cartMergeComplete: true });
        }
        case fromAction.LOAD_CART_SUCCESS:
        case fromAction.CREATE_CART_SUCCESS: {
            /** @type {?} */
            var content = tslib_1.__assign({}, action.payload);
            /** @type {?} */
            var entries = {};
            if (content.entries) {
                entries = content.entries.reduce(function (entryMap, entry) {
                    var _a;
                    return tslib_1.__assign({}, entryMap, (_a = {}, _a[entry.product.code] = state.entries[entry.product.code]
                        ? tslib_1.__assign({}, state.entries[entry.product.code], entry) : entry, _a));
                }, tslib_1.__assign({}, entries));
                delete content['entries'];
            }
            return tslib_1.__assign({}, state, { content: content,
                entries: entries, refresh: false });
        }
        case fromAction.REMOVE_ENTRY_SUCCESS:
        case fromAction.UPDATE_ENTRY_SUCCESS:
        case fromAction.ADD_ENTRY_SUCCESS: {
            return tslib_1.__assign({}, state, { refresh: true });
        }
    }
    return state;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC5yZWR1Y2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL2NhcnQvc3RvcmUvcmVkdWNlcnMvY2FydC5yZWR1Y2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxLQUFLLFVBQVUsTUFBTSxjQUFjLENBQUM7O0FBSTNDLE1BQU0sS0FBTyxZQUFZLEdBQWM7SUFDckMsT0FBTyxFQUFFLEVBQUU7SUFDWCxPQUFPLEVBQUUsRUFBRTtJQUNYLE9BQU8sRUFBRSxLQUFLO0lBQ2QsaUJBQWlCLEVBQUUsS0FBSztDQUN6Qjs7Ozs7O0FBRUQsTUFBTSxVQUFVLE9BQU8sQ0FDckIsS0FBb0IsRUFDcEIsTUFBMEQ7SUFEMUQsc0JBQUEsRUFBQSxvQkFBb0I7SUFHcEIsUUFBUSxNQUFNLENBQUMsSUFBSSxFQUFFO1FBQ25CLEtBQUssVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzFCLDRCQUNLLEtBQUssSUFDUixpQkFBaUIsRUFBRSxLQUFLLElBQ3hCO1NBQ0g7UUFFRCxLQUFLLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ2xDLDRCQUNLLEtBQUssSUFDUixpQkFBaUIsRUFBRSxJQUFJLElBQ3ZCO1NBQ0g7UUFFRCxLQUFLLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQztRQUNsQyxLQUFLLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDOztnQkFDN0IsT0FBTyx3QkFBUSxNQUFNLENBQUMsT0FBTyxDQUFFOztnQkFDakMsT0FBTyxHQUFHLEVBQUU7WUFDaEIsSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO2dCQUNuQixPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQzlCLFVBQUMsUUFBaUMsRUFBRSxLQUFpQjs7b0JBQ25ELDRCQUNLLFFBQVEsZUFPVixLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksSUFBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO3dCQUNyRCxDQUFDLHNCQUNNLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFDakMsS0FBSyxFQUVaLENBQUMsQ0FBQyxLQUFLLE9BQ1Q7Z0JBQ0osQ0FBQyx1QkFFSSxPQUFPLEVBRWIsQ0FBQztnQkFDRixPQUFPLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQzthQUMzQjtZQUNELDRCQUNLLEtBQUssSUFDUixPQUFPLFNBQUE7Z0JBQ1AsT0FBTyxTQUFBLEVBQ1AsT0FBTyxFQUFFLEtBQUssSUFDZDtTQUNIO1FBRUQsS0FBSyxVQUFVLENBQUMsb0JBQW9CLENBQUM7UUFDckMsS0FBSyxVQUFVLENBQUMsb0JBQW9CLENBQUM7UUFDckMsS0FBSyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUNqQyw0QkFDSyxLQUFLLElBQ1IsT0FBTyxFQUFFLElBQUksSUFDYjtTQUNIO0tBQ0Y7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmcm9tQWN0aW9uIGZyb20gJy4vLi4vYWN0aW9ucyc7XG5pbXBvcnQgeyBPcmRlckVudHJ5IH0gZnJvbSAnLi4vLi4vLi4vb2NjL29jYy1tb2RlbHMvaW5kZXgnO1xuaW1wb3J0IHsgQ2FydFN0YXRlIH0gZnJvbSAnLi4vY2FydC1zdGF0ZSc7XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsU3RhdGU6IENhcnRTdGF0ZSA9IHtcbiAgY29udGVudDoge30sXG4gIGVudHJpZXM6IHt9LFxuICByZWZyZXNoOiBmYWxzZSxcbiAgY2FydE1lcmdlQ29tcGxldGU6IGZhbHNlXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gcmVkdWNlcihcbiAgc3RhdGUgPSBpbml0aWFsU3RhdGUsXG4gIGFjdGlvbjogZnJvbUFjdGlvbi5DYXJ0QWN0aW9uIHwgZnJvbUFjdGlvbi5DYXJ0RW50cnlBY3Rpb25cbik6IENhcnRTdGF0ZSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIGZyb21BY3Rpb24uTUVSR0VfQ0FSVDoge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGNhcnRNZXJnZUNvbXBsZXRlOiBmYWxzZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjYXNlIGZyb21BY3Rpb24uTUVSR0VfQ0FSVF9TVUNDRVNTOiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgY2FydE1lcmdlQ29tcGxldGU6IHRydWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY2FzZSBmcm9tQWN0aW9uLkxPQURfQ0FSVF9TVUNDRVNTOlxuICAgIGNhc2UgZnJvbUFjdGlvbi5DUkVBVEVfQ0FSVF9TVUNDRVNTOiB7XG4gICAgICBjb25zdCBjb250ZW50ID0geyAuLi5hY3Rpb24ucGF5bG9hZCB9O1xuICAgICAgbGV0IGVudHJpZXMgPSB7fTtcbiAgICAgIGlmIChjb250ZW50LmVudHJpZXMpIHtcbiAgICAgICAgZW50cmllcyA9IGNvbnRlbnQuZW50cmllcy5yZWR1Y2UoXG4gICAgICAgICAgKGVudHJ5TWFwOiB7IFtjb2RlOiBzdHJpbmddOiBhbnkgfSwgZW50cnk6IE9yZGVyRW50cnkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIC4uLmVudHJ5TWFwLFxuICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICBJZiB3ZSByZWZyZXNoIHRoZSBwYWdlIGZyb20gY2FydCBkZXRhaWxzIHBhZ2UsIDIgbG9hZCBjYXJ0XG4gICAgICAgICAgICAgIEFjdGlvbnMgZ2V0cyBkaXNwYXRjaGVkLiBPbmUgaXMgbm9uLWRldGFpbCwgYW5kIHRoZSBzZWNvbmQgaXMgZGV0YWlsZWQuXG4gICAgICAgICAgICAgIEluIHRoZSBjYXNlIHdoZXJlIHRoZSBkZXRhaWxlZCBvbmNlIGdldCByZXNvbHZlZCBmaXJzdCwgd2UgbWVyZ2UgdGhlIGV4aXN0aW5nXG4gICAgICAgICAgICAgIGRhdGEgd2l0aCB0aGUgbmV3IGRhdGEgZnJvbSB0aGUgcmVzcG9uc2UgKHRvIG5vdCBkZWxldGUgZXhpc3RpbmcgZGV0YWlsZWQgZGF0YSkuXG4gICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgIFtlbnRyeS5wcm9kdWN0LmNvZGVdOiBzdGF0ZS5lbnRyaWVzW2VudHJ5LnByb2R1Y3QuY29kZV1cbiAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uc3RhdGUuZW50cmllc1tlbnRyeS5wcm9kdWN0LmNvZGVdLFxuICAgICAgICAgICAgICAgICAgICAuLi5lbnRyeVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDogZW50cnlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICAuLi5lbnRyaWVzXG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICBkZWxldGUgY29udGVudFsnZW50cmllcyddO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGNvbnRlbnQsXG4gICAgICAgIGVudHJpZXMsXG4gICAgICAgIHJlZnJlc2g6IGZhbHNlXG4gICAgICB9O1xuICAgIH1cblxuICAgIGNhc2UgZnJvbUFjdGlvbi5SRU1PVkVfRU5UUllfU1VDQ0VTUzpcbiAgICBjYXNlIGZyb21BY3Rpb24uVVBEQVRFX0VOVFJZX1NVQ0NFU1M6XG4gICAgY2FzZSBmcm9tQWN0aW9uLkFERF9FTlRSWV9TVUNDRVNTOiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgcmVmcmVzaDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RhdGU7XG59XG4iXX0=