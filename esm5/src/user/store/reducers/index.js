/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken } from '@angular/core';
import { USER_ORDERS, USER_PAYMENT_METHODS, USER_ADDRESSES } from '../user-state';
import { LOGOUT } from '../../../auth/index';
import { loaderReducer } from '../../../state/utils/loader/loader.reducer';
import * as fromBillingCountriesReducer from './billing-countries.reducer';
import * as fromDeliveryCountries from './delivery-countries.reducer';
import * as fromOrderDetailsReducer from './order-details.reducer';
import * as fromPaymentReducer from './payment-methods.reducer';
import * as fromRegionsReducer from './regions.reducer';
import * as fromTitlesReducer from './titles.reducer';
import * as fromAddressesReducer from './user-addresses.reducer';
import * as fromUserDetailsReducer from './user-details.reducer';
import * as fromUserOrdersReducer from './user-orders.reducer';
/**
 * @return {?}
 */
export function getReducers() {
    return {
        account: fromUserDetailsReducer.reducer,
        addresses: loaderReducer(USER_ADDRESSES, fromAddressesReducer.reducer),
        billingCountries: fromBillingCountriesReducer.reducer,
        payments: loaderReducer(USER_PAYMENT_METHODS, fromPaymentReducer.reducer),
        orders: loaderReducer(USER_ORDERS, fromUserOrdersReducer.reducer),
        order: fromOrderDetailsReducer.reducer,
        countries: fromDeliveryCountries.reducer,
        titles: fromTitlesReducer.reducer,
        regions: fromRegionsReducer.reducer
    };
}
/** @type {?} */
export var reducerToken = new InjectionToken('UserReducers');
/** @type {?} */
export var reducerProvider = {
    provide: reducerToken,
    useFactory: getReducers
};
/**
 * @param {?} reducer
 * @return {?}
 */
export function clearUserState(reducer) {
    return function (state, action) {
        if (action.type === LOGOUT) {
            state = undefined;
        }
        return reducer(state, action);
    };
}
/** @type {?} */
export var metaReducers = [clearUserState];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvdXNlci9zdG9yZS9yZWR1Y2Vycy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBWSxNQUFNLGVBQWUsQ0FBQztBQUl6RCxPQUFPLEVBRUwsV0FBVyxFQUNYLG9CQUFvQixFQUNwQixjQUFjLEVBQ2YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBTTdDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUUzRSxPQUFPLEtBQUssMkJBQTJCLE1BQU0sNkJBQTZCLENBQUM7QUFDM0UsT0FBTyxLQUFLLHFCQUFxQixNQUFNLDhCQUE4QixDQUFDO0FBQ3RFLE9BQU8sS0FBSyx1QkFBdUIsTUFBTSx5QkFBeUIsQ0FBQztBQUNuRSxPQUFPLEtBQUssa0JBQWtCLE1BQU0sMkJBQTJCLENBQUM7QUFDaEUsT0FBTyxLQUFLLGtCQUFrQixNQUFNLG1CQUFtQixDQUFDO0FBQ3hELE9BQU8sS0FBSyxpQkFBaUIsTUFBTSxrQkFBa0IsQ0FBQztBQUN0RCxPQUFPLEtBQUssb0JBQW9CLE1BQU0sMEJBQTBCLENBQUM7QUFDakUsT0FBTyxLQUFLLHNCQUFzQixNQUFNLHdCQUF3QixDQUFDO0FBQ2pFLE9BQU8sS0FBSyxxQkFBcUIsTUFBTSx1QkFBdUIsQ0FBQzs7OztBQUUvRCxNQUFNLFVBQVUsV0FBVztJQUN6QixPQUFPO1FBQ0wsT0FBTyxFQUFFLHNCQUFzQixDQUFDLE9BQU87UUFDdkMsU0FBUyxFQUFFLGFBQWEsQ0FDdEIsY0FBYyxFQUNkLG9CQUFvQixDQUFDLE9BQU8sQ0FDN0I7UUFDRCxnQkFBZ0IsRUFBRSwyQkFBMkIsQ0FBQyxPQUFPO1FBQ3JELFFBQVEsRUFBRSxhQUFhLENBQ3JCLG9CQUFvQixFQUNwQixrQkFBa0IsQ0FBQyxPQUFPLENBQzNCO1FBQ0QsTUFBTSxFQUFFLGFBQWEsQ0FDbkIsV0FBVyxFQUNYLHFCQUFxQixDQUFDLE9BQU8sQ0FDOUI7UUFDRCxLQUFLLEVBQUUsdUJBQXVCLENBQUMsT0FBTztRQUN0QyxTQUFTLEVBQUUscUJBQXFCLENBQUMsT0FBTztRQUN4QyxNQUFNLEVBQUUsaUJBQWlCLENBQUMsT0FBTztRQUNqQyxPQUFPLEVBQUUsa0JBQWtCLENBQUMsT0FBTztLQUNwQyxDQUFDO0FBQ0osQ0FBQzs7QUFFRCxNQUFNLEtBQU8sWUFBWSxHQUVyQixJQUFJLGNBQWMsQ0FBOEIsY0FBYyxDQUFDOztBQUVuRSxNQUFNLEtBQU8sZUFBZSxHQUFhO0lBQ3ZDLE9BQU8sRUFBRSxZQUFZO0lBQ3JCLFVBQVUsRUFBRSxXQUFXO0NBQ3hCOzs7OztBQUVELE1BQU0sVUFBVSxjQUFjLENBQzVCLE9BQTJCO0lBRTNCLE9BQU8sVUFBUyxLQUFLLEVBQUUsTUFBTTtRQUMzQixJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssTUFBTSxFQUFFO1lBQzFCLEtBQUssR0FBRyxTQUFTLENBQUM7U0FDbkI7UUFFRCxPQUFPLE9BQU8sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDaEMsQ0FBQyxDQUFDO0FBQ0osQ0FBQzs7QUFFRCxNQUFNLEtBQU8sWUFBWSxHQUF1QixDQUFDLGNBQWMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuLCBQcm92aWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBBY3Rpb25SZWR1Y2VyTWFwLCBNZXRhUmVkdWNlciwgQWN0aW9uUmVkdWNlciB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcblxuaW1wb3J0IHtcbiAgVXNlclN0YXRlLFxuICBVU0VSX09SREVSUyxcbiAgVVNFUl9QQVlNRU5UX01FVEhPRFMsXG4gIFVTRVJfQUREUkVTU0VTXG59IGZyb20gJy4uL3VzZXItc3RhdGUnO1xuaW1wb3J0IHsgTE9HT1VUIH0gZnJvbSAnLi4vLi4vLi4vYXV0aC9pbmRleCc7XG5pbXBvcnQge1xuICBQYXltZW50RGV0YWlscyxcbiAgT3JkZXJIaXN0b3J5TGlzdCxcbiAgQWRkcmVzc1xufSBmcm9tICcuLi8uLi8uLi9vY2Mvb2NjLW1vZGVscy9vY2MubW9kZWxzJztcbmltcG9ydCB7IGxvYWRlclJlZHVjZXIgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9sb2FkZXIvbG9hZGVyLnJlZHVjZXInO1xuXG5pbXBvcnQgKiBhcyBmcm9tQmlsbGluZ0NvdW50cmllc1JlZHVjZXIgZnJvbSAnLi9iaWxsaW5nLWNvdW50cmllcy5yZWR1Y2VyJztcbmltcG9ydCAqIGFzIGZyb21EZWxpdmVyeUNvdW50cmllcyBmcm9tICcuL2RlbGl2ZXJ5LWNvdW50cmllcy5yZWR1Y2VyJztcbmltcG9ydCAqIGFzIGZyb21PcmRlckRldGFpbHNSZWR1Y2VyIGZyb20gJy4vb3JkZXItZGV0YWlscy5yZWR1Y2VyJztcbmltcG9ydCAqIGFzIGZyb21QYXltZW50UmVkdWNlciBmcm9tICcuL3BheW1lbnQtbWV0aG9kcy5yZWR1Y2VyJztcbmltcG9ydCAqIGFzIGZyb21SZWdpb25zUmVkdWNlciBmcm9tICcuL3JlZ2lvbnMucmVkdWNlcic7XG5pbXBvcnQgKiBhcyBmcm9tVGl0bGVzUmVkdWNlciBmcm9tICcuL3RpdGxlcy5yZWR1Y2VyJztcbmltcG9ydCAqIGFzIGZyb21BZGRyZXNzZXNSZWR1Y2VyIGZyb20gJy4vdXNlci1hZGRyZXNzZXMucmVkdWNlcic7XG5pbXBvcnQgKiBhcyBmcm9tVXNlckRldGFpbHNSZWR1Y2VyIGZyb20gJy4vdXNlci1kZXRhaWxzLnJlZHVjZXInO1xuaW1wb3J0ICogYXMgZnJvbVVzZXJPcmRlcnNSZWR1Y2VyIGZyb20gJy4vdXNlci1vcmRlcnMucmVkdWNlcic7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZWR1Y2VycygpOiBBY3Rpb25SZWR1Y2VyTWFwPFVzZXJTdGF0ZT4ge1xuICByZXR1cm4ge1xuICAgIGFjY291bnQ6IGZyb21Vc2VyRGV0YWlsc1JlZHVjZXIucmVkdWNlcixcbiAgICBhZGRyZXNzZXM6IGxvYWRlclJlZHVjZXI8QWRkcmVzc1tdPihcbiAgICAgIFVTRVJfQUREUkVTU0VTLFxuICAgICAgZnJvbUFkZHJlc3Nlc1JlZHVjZXIucmVkdWNlclxuICAgICksXG4gICAgYmlsbGluZ0NvdW50cmllczogZnJvbUJpbGxpbmdDb3VudHJpZXNSZWR1Y2VyLnJlZHVjZXIsXG4gICAgcGF5bWVudHM6IGxvYWRlclJlZHVjZXI8UGF5bWVudERldGFpbHNbXT4oXG4gICAgICBVU0VSX1BBWU1FTlRfTUVUSE9EUyxcbiAgICAgIGZyb21QYXltZW50UmVkdWNlci5yZWR1Y2VyXG4gICAgKSxcbiAgICBvcmRlcnM6IGxvYWRlclJlZHVjZXI8T3JkZXJIaXN0b3J5TGlzdD4oXG4gICAgICBVU0VSX09SREVSUyxcbiAgICAgIGZyb21Vc2VyT3JkZXJzUmVkdWNlci5yZWR1Y2VyXG4gICAgKSxcbiAgICBvcmRlcjogZnJvbU9yZGVyRGV0YWlsc1JlZHVjZXIucmVkdWNlcixcbiAgICBjb3VudHJpZXM6IGZyb21EZWxpdmVyeUNvdW50cmllcy5yZWR1Y2VyLFxuICAgIHRpdGxlczogZnJvbVRpdGxlc1JlZHVjZXIucmVkdWNlcixcbiAgICByZWdpb25zOiBmcm9tUmVnaW9uc1JlZHVjZXIucmVkdWNlclxuICB9O1xufVxuXG5leHBvcnQgY29uc3QgcmVkdWNlclRva2VuOiBJbmplY3Rpb25Ub2tlbjxcbiAgQWN0aW9uUmVkdWNlck1hcDxVc2VyU3RhdGU+XG4+ID0gbmV3IEluamVjdGlvblRva2VuPEFjdGlvblJlZHVjZXJNYXA8VXNlclN0YXRlPj4oJ1VzZXJSZWR1Y2VycycpO1xuXG5leHBvcnQgY29uc3QgcmVkdWNlclByb3ZpZGVyOiBQcm92aWRlciA9IHtcbiAgcHJvdmlkZTogcmVkdWNlclRva2VuLFxuICB1c2VGYWN0b3J5OiBnZXRSZWR1Y2Vyc1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyVXNlclN0YXRlKFxuICByZWR1Y2VyOiBBY3Rpb25SZWR1Y2VyPGFueT5cbik6IEFjdGlvblJlZHVjZXI8YW55PiB7XG4gIHJldHVybiBmdW5jdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKGFjdGlvbi50eXBlID09PSBMT0dPVVQpIHtcbiAgICAgIHN0YXRlID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiByZWR1Y2VyKHN0YXRlLCBhY3Rpb24pO1xuICB9O1xufVxuXG5leHBvcnQgY29uc3QgbWV0YVJlZHVjZXJzOiBNZXRhUmVkdWNlcjxhbnk+W10gPSBbY2xlYXJVc2VyU3RhdGVdO1xuIl19